!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	./telnet.h	59;"	d
ACMD	./act.comm.c	/^ACMD(do_gen_comm)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_gsay)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_page)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_qcomm)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_reply)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_say)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_spec_comm)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_tell)$/;"	f
ACMD	./act.comm.c	/^ACMD(do_write)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_color)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_commands)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_consider)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_diagnose)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_equipment)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_examine)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_exits)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_gen_ps)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_gold)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_help)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_inventory)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_levels)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_look)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_score)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_time)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_toggle)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_users)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_weather)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_where)$/;"	f
ACMD	./act.informative.c	/^ACMD(do_who)$/;"	f
ACMD	./act.item.c	/^ACMD(do_drink)$/;"	f
ACMD	./act.item.c	/^ACMD(do_drop)$/;"	f
ACMD	./act.item.c	/^ACMD(do_eat)$/;"	f
ACMD	./act.item.c	/^ACMD(do_get)$/;"	f
ACMD	./act.item.c	/^ACMD(do_give)$/;"	f
ACMD	./act.item.c	/^ACMD(do_grab)$/;"	f
ACMD	./act.item.c	/^ACMD(do_pour)$/;"	f
ACMD	./act.item.c	/^ACMD(do_put)$/;"	f
ACMD	./act.item.c	/^ACMD(do_remove)$/;"	f
ACMD	./act.item.c	/^ACMD(do_wear)$/;"	f
ACMD	./act.item.c	/^ACMD(do_wield)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_enter)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_follow)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_gen_door)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_leave)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_move)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_rest)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_sit)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_sleep)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_stand)$/;"	f
ACMD	./act.movement.c	/^ACMD(do_wake)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_assist)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_backstab)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_bash)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_flee)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_hit)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_kick)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_kill)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_order)$/;"	f
ACMD	./act.offensive.c	/^ACMD(do_rescue)$/;"	f
ACMD	./act.other.c	/^ACMD(do_display)$/;"	f
ACMD	./act.other.c	/^ACMD(do_gen_tog)$/;"	f
ACMD	./act.other.c	/^ACMD(do_gen_write)$/;"	f
ACMD	./act.other.c	/^ACMD(do_group)$/;"	f
ACMD	./act.other.c	/^ACMD(do_hide)$/;"	f
ACMD	./act.other.c	/^ACMD(do_not_here)$/;"	f
ACMD	./act.other.c	/^ACMD(do_practice)$/;"	f
ACMD	./act.other.c	/^ACMD(do_quit)$/;"	f
ACMD	./act.other.c	/^ACMD(do_report)$/;"	f
ACMD	./act.other.c	/^ACMD(do_save)$/;"	f
ACMD	./act.other.c	/^ACMD(do_sneak)$/;"	f
ACMD	./act.other.c	/^ACMD(do_split)$/;"	f
ACMD	./act.other.c	/^ACMD(do_steal)$/;"	f
ACMD	./act.other.c	/^ACMD(do_title)$/;"	f
ACMD	./act.other.c	/^ACMD(do_ungroup)$/;"	f
ACMD	./act.other.c	/^ACMD(do_use)$/;"	f
ACMD	./act.other.c	/^ACMD(do_visible)$/;"	f
ACMD	./act.other.c	/^ACMD(do_wimpy)$/;"	f
ACMD	./act.social.c	/^ACMD(do_action)$/;"	f
ACMD	./act.social.c	/^ACMD(do_insult)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_advance)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_at)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_date)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_dc)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_echo)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_force)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_gecho)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_goto)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_invis)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_last)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_load)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_poofset)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_purge)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_restore)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_return)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_send)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_set)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_show)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_shutdown)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_snoop)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_stat)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_switch)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_syslog)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_teleport)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_trans)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_vnum)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_vstat)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_wizlock)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_wiznet)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_wizutil)$/;"	f
ACMD	./act.wizard.c	/^ACMD(do_zreset)$/;"	f
ACMD	./ban.c	/^ACMD(do_ban)$/;"	f
ACMD	./ban.c	/^ACMD(do_unban)$/;"	f
ACMD	./db.c	/^ACMD(do_reboot)$/;"	f
ACMD	./graph.c	/^ACMD(do_track)$/;"	f
ACMD	./house.c	/^ACMD(do_hcontrol)$/;"	f
ACMD	./house.c	/^ACMD(do_house)$/;"	f
ACMD	./interpreter.c	/^ACMD(do_alias)$/;"	f
ACMD	./interpreter.h	11;"	d
ACMD	./modify.c	/^ACMD(do_skillset)$/;"	f
ACMD	./olc.c	/^ACMD(do_olc)$/;"	f
ACMD	./spell_parser.c	/^ACMD(do_cast)$/;"	f
ACMD_EXAMINE	./boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_LOOK	./boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_READ	./boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_REMOVE	./boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_WRITE	./boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACTNULL	./comm.c	/^const char *ACTNULL = "<NULL>";$/;"	v
AFF_BLIND	./structs.h	221;"	d
AFF_CHARM	./structs.h	242;"	d
AFF_CURSE	./structs.h	230;"	d
AFF_DETECT_ALIGN	./structs.h	223;"	d
AFF_DETECT_INVIS	./structs.h	224;"	d
AFF_DETECT_MAGIC	./structs.h	225;"	d
AFF_FLAGGED	./utils.h	221;"	d
AFF_FLAGS	./utils.h	207;"	d
AFF_GROUP	./structs.h	229;"	d
AFF_HIDE	./structs.h	240;"	d
AFF_INFRAVISION	./structs.h	231;"	d
AFF_INVISIBLE	./structs.h	222;"	d
AFF_NOTRACK	./structs.h	236;"	d
AFF_POISON	./structs.h	232;"	d
AFF_PROTECT_EVIL	./structs.h	233;"	d
AFF_PROTECT_GOOD	./structs.h	234;"	d
AFF_SANCTUARY	./structs.h	228;"	d
AFF_SENSE_LIFE	./structs.h	226;"	d
AFF_SLEEP	./structs.h	235;"	d
AFF_SNEAK	./structs.h	239;"	d
AFF_UNUSED16	./structs.h	237;"	d
AFF_UNUSED17	./structs.h	238;"	d
AFF_UNUSED20	./structs.h	241;"	d
AFF_WATERWALK	./structs.h	227;"	d
ALIAS_COMPLEX	./interpreter.h	70;"	d
ALIAS_FILE	./utils.h	108;"	d
ALIAS_GLOB_CHAR	./interpreter.h	74;"	d
ALIAS_SEP_CHAR	./interpreter.h	72;"	d
ALIAS_SIMPLE	./interpreter.h	69;"	d
ALIAS_VAR_CHAR	./interpreter.h	73;"	d
AN	./utils.h	144;"	d
ANA	./utils.h	418;"	d
AO	./telnet.h	52;"	d
APPLY_AC	./structs.h	375;"	d
APPLY_AGE	./structs.h	367;"	d
APPLY_CHA	./structs.h	364;"	d
APPLY_CHAR_HEIGHT	./structs.h	369;"	d
APPLY_CHAR_WEIGHT	./structs.h	368;"	d
APPLY_CLASS	./structs.h	365;"	d
APPLY_CON	./structs.h	363;"	d
APPLY_DAMROLL	./structs.h	377;"	d
APPLY_DEX	./structs.h	360;"	d
APPLY_EXP	./structs.h	374;"	d
APPLY_GOLD	./structs.h	373;"	d
APPLY_HIT	./structs.h	371;"	d
APPLY_HITROLL	./structs.h	376;"	d
APPLY_INT	./structs.h	361;"	d
APPLY_LEVEL	./structs.h	366;"	d
APPLY_MANA	./structs.h	370;"	d
APPLY_MOVE	./structs.h	372;"	d
APPLY_NONE	./structs.h	358;"	d
APPLY_SAVING_BREATH	./structs.h	381;"	d
APPLY_SAVING_PARA	./structs.h	378;"	d
APPLY_SAVING_PETRI	./structs.h	380;"	d
APPLY_SAVING_ROD	./structs.h	379;"	d
APPLY_SAVING_SPELL	./structs.h	382;"	d
APPLY_STR	./structs.h	359;"	d
APPLY_WIS	./structs.h	362;"	d
ASPELL	./spells.c	/^ASPELL(spell_charm)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_create_water)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_detect_poison)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_enchant_weapon)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_identify)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_locate_object)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_recall)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_summon)$/;"	f
ASPELL	./spells.c	/^ASPELL(spell_teleport)$/;"	f
ASPELL	./spells.h	212;"	d
ASSIGNMOB	./spec_assign.c	/^void ASSIGNMOB(mob_vnum mob, SPECIAL(fname))$/;"	f
ASSIGNOBJ	./spec_assign.c	/^void ASSIGNOBJ(obj_vnum obj, SPECIAL(fname))$/;"	f
ASSIGNROOM	./spec_assign.c	/^void ASSIGNROOM(room_vnum room, SPECIAL(fname))$/;"	f
AUTHTYPE_CNT	./telnet.h	265;"	d
AUTHTYPE_KERBEROS_V4	./telnet.h	261;"	d
AUTHTYPE_KERBEROS_V5	./telnet.h	262;"	d
AUTHTYPE_MINK	./telnet.h	264;"	d
AUTHTYPE_NAME	./telnet.h	278;"	d
AUTHTYPE_NAME_OK	./telnet.h	277;"	d
AUTHTYPE_NULL	./telnet.h	260;"	d
AUTHTYPE_SPX	./telnet.h	263;"	d
AUTHTYPE_TEST	./telnet.h	267;"	d
AUTH_HOW_MASK	./telnet.h	258;"	d
AUTH_HOW_MUTUAL	./telnet.h	257;"	d
AUTH_HOW_ONE_WAY	./telnet.h	256;"	d
AUTH_WHO_CLIENT	./telnet.h	249;"	d
AUTH_WHO_MASK	./telnet.h	251;"	d
AUTH_WHO_SERVER	./telnet.h	250;"	d
AWAKE	./utils.h	351;"	d
AYT	./telnet.h	51;"	d
BACKGROUND_FILE	./db.h	82;"	d
BANNED_SITE_LENGTH	./db.h	220;"	d
BAN_ALL	./db.h	218;"	d
BAN_FILE	./db.h	95;"	d
BAN_LIST_FORMAT	./ban.c	129;"	d	file:
BAN_LIST_FORMAT	./ban.c	202;"	d	file:
BAN_NEW	./db.h	216;"	d
BAN_NOT	./db.h	215;"	d
BAN_SELECT	./db.h	217;"	d
BFS_ALREADY_THERE	./utils.h	112;"	d
BFS_ERROR	./utils.h	111;"	d
BFS_NO_PATH	./utils.h	113;"	d
BINARY	./act.wizard.c	2102;"	d	file:
BLOCK_SIZE	./mail.h	29;"	d
BOARD_MAGIC	./boards.h	17;"	d
BOARD_RNUM	./boards.h	41;"	d
BOARD_VNUM	./boards.h	36;"	d
BOOL_CASE	./db.c	1215;"	d	file:
BOOL_CASE	./db.c	1279;"	d	file:
BOTH	./act.wizard.c	2099;"	d	file:
BREAK	./telnet.h	54;"	d
BRF	./utils.h	101;"	d
BUG_FILE	./db.h	88;"	d
BUY_TYPE	./shop.h	17;"	d
BUY_WORD	./shop.h	18;"	d
Board_clear_all	./boards.c	/^void Board_clear_all(void)$/;"	f
Board_clear_board	./boards.c	/^void Board_clear_board(int board_type)$/;"	f
Board_display_msg	./boards.c	/^int Board_display_msg(int board_type, struct char_data *ch, char *arg, struct obj_data *board)$/;"	f
Board_load_board	./boards.c	/^void Board_load_board(int board_type)$/;"	f
Board_remove_msg	./boards.c	/^int Board_remove_msg(int board_type, struct char_data *ch, char *arg, struct obj_data *board)$/;"	f
Board_reset_board	./boards.c	/^void Board_reset_board(int board_type)$/;"	f
Board_save_board	./boards.c	/^void Board_save_board(int board_type)$/;"	f
Board_show_board	./boards.c	/^int Board_show_board(int board_type, struct char_data *ch, char *arg, struct obj_data *board)$/;"	f
Board_write_message	./boards.c	/^int Board_write_message(int board_type, struct char_data *ch, char *arg, struct obj_data *board)$/;"	f
CAN_CARRY_N	./utils.h	350;"	d
CAN_CARRY_OBJ	./utils.h	460;"	d
CAN_CARRY_W	./utils.h	349;"	d
CAN_GET_OBJ	./utils.h	464;"	d
CAN_GO	./utils.h	479;"	d
CAN_SEE	./utils.h	439;"	d
CAN_SEE_IN_DARK	./utils.h	352;"	d
CAN_SEE_OBJ	./utils.h	457;"	d
CAN_SEE_OBJ_CARRIER	./utils.h	450;"	d
CAN_WEAR	./utils.h	402;"	d
CAP	./utils.c	/^char *CAP(char *txt)$/;"	f
CASE	./db.c	1212;"	d	file:
CASE	./db.c	1278;"	d	file:
CAST_POTION	./spells.h	16;"	d
CAST_SCROLL	./spells.h	19;"	d
CAST_SPELL	./spells.h	15;"	d
CAST_STAFF	./spells.h	18;"	d
CAST_UNDEFINED	./spells.h	14;"	d
CAST_WAND	./spells.h	17;"	d
CCBLU	./screen.h	33;"	d
CCCYN	./screen.h	35;"	d
CCGRN	./screen.h	31;"	d
CCMAG	./screen.h	34;"	d
CCNRM	./screen.h	29;"	d
CCRED	./screen.h	30;"	d
CCWHT	./screen.h	36;"	d
CCYEL	./screen.h	32;"	d
CHECK_NULL	./comm.c	2263;"	d	file:
CHECK_PLAYER_SPECIAL	./utils.h	198;"	d
CHECK_PLAYER_SPECIAL	./utils.h	201;"	d
CHECK_WAIT	./utils.h	362;"	d
CIRCLEMUD_VERSION	./utils.h	411;"	d
CIRCLE_CRYPT	./conf.h	35;"	d
CIRCLE_GNU_LIBC_MEMORY_TRACK	./sysdep.h	118;"	d
CIRCLE_UNIX	./conf.h	32;"	d
CIRCLE_UNSIGNED_INDEX	./structs.h	43;"	d
CLASS_ABBR	./utils.h	484;"	d
CLASS_ANIMAL	./structs.h	129;"	d
CLASS_CLERIC	./structs.h	119;"	d
CLASS_DRAGON	./structs.h	130;"	d
CLASS_GIANT	./structs.h	131;"	d
CLASS_HUMANOID	./structs.h	128;"	d
CLASS_MAGIC_USER	./structs.h	118;"	d
CLASS_OTHER	./structs.h	126;"	d
CLASS_THIEF	./structs.h	120;"	d
CLASS_UNDEAD	./structs.h	127;"	d
CLASS_UNDEFINED	./structs.h	117;"	d
CLASS_WARRIOR	./structs.h	121;"	d
CLOSE_DOOR	./act.movement.c	315;"	d	file:
CLOSE_SOCKET	./sysdep.h	392;"	d
CMD_IS	./interpreter.h	17;"	d
CMD_NAME	./interpreter.h	16;"	d
CMP	./utils.h	103;"	d
COLOR_LEV	./screen.h	38;"	d
CONT_CLOSEABLE	./structs.h	386;"	d
CONT_CLOSED	./structs.h	388;"	d
CONT_LOCKED	./structs.h	389;"	d
CONT_PICKPROOF	./structs.h	387;"	d
CON_CHPWD_GETNEW	./structs.h	259;"	d
CON_CHPWD_GETOLD	./structs.h	258;"	d
CON_CHPWD_VRFY	./structs.h	260;"	d
CON_CLOSE	./structs.h	247;"	d
CON_CNFPASSWD	./structs.h	252;"	d
CON_DELCNF1	./structs.h	261;"	d
CON_DELCNF2	./structs.h	262;"	d
CON_DISCONNECT	./structs.h	263;"	d
CON_EXDESC	./structs.h	257;"	d
CON_GET_NAME	./structs.h	248;"	d
CON_MENU	./structs.h	256;"	d
CON_NAME_CNFRM	./structs.h	249;"	d
CON_NEWPASSWD	./structs.h	251;"	d
CON_PASSWORD	./structs.h	250;"	d
CON_PLAYING	./structs.h	246;"	d
CON_QCLASS	./structs.h	254;"	d
CON_QSEX	./structs.h	253;"	d
CON_RMOTD	./structs.h	255;"	d
CRASH_FILE	./utils.h	106;"	d
CREATE	./utils.h	150;"	d
CREDITS_FILE	./db.h	73;"	d
CRYO_FACTOR	./objsave.c	25;"	d	file:
CRYPT	./utils.h	528;"	d
CRYPT	./utils.h	530;"	d
C_CMP	./screen.h	25;"	d
C_NRM	./screen.h	24;"	d
C_OFF	./screen.h	22;"	d
C_SPR	./screen.h	23;"	d
CastleGuard	./castle.c	/^SPECIAL(CastleGuard);$/;"	v
Crash_calculate_rent	./objsave.c	/^void Crash_calculate_rent(struct obj_data *obj, int *cost)$/;"	f
Crash_clean_file	./objsave.c	/^int Crash_clean_file(char *name)$/;"	f
Crash_crashsave	./objsave.c	/^void Crash_crashsave(struct char_data *ch)$/;"	f
Crash_cryosave	./objsave.c	/^void Crash_cryosave(struct char_data *ch, int cost)$/;"	f
Crash_delete_crashfile	./objsave.c	/^int Crash_delete_crashfile(struct char_data *ch)$/;"	f
Crash_delete_file	./objsave.c	/^int Crash_delete_file(char *name)$/;"	f
Crash_extract_expensive	./objsave.c	/^void Crash_extract_expensive(struct obj_data *obj)$/;"	f
Crash_extract_norent_eq	./objsave.c	/^void Crash_extract_norent_eq(struct char_data *ch)$/;"	f
Crash_extract_norents	./objsave.c	/^void Crash_extract_norents(struct obj_data *obj)$/;"	f
Crash_extract_objs	./objsave.c	/^void Crash_extract_objs(struct obj_data *obj)$/;"	f
Crash_idlesave	./objsave.c	/^void Crash_idlesave(struct char_data *ch)$/;"	f
Crash_is_unrentable	./objsave.c	/^int Crash_is_unrentable(struct obj_data *obj)$/;"	f
Crash_listrent	./objsave.c	/^void Crash_listrent(struct char_data *ch, char *name)$/;"	f
Crash_load	./objsave.c	/^int Crash_load(struct char_data *ch)$/;"	f
Crash_offer_rent	./objsave.c	/^int Crash_offer_rent(struct char_data *ch, struct char_data *recep,$/;"	f
Crash_rent_deadline	./objsave.c	/^void Crash_rent_deadline(struct char_data *ch, struct char_data *recep,$/;"	f
Crash_rentsave	./objsave.c	/^void Crash_rentsave(struct char_data *ch, int cost)$/;"	f
Crash_report_rent	./objsave.c	/^void Crash_report_rent(struct char_data *ch, struct char_data *recep,$/;"	f
Crash_report_unrentables	./objsave.c	/^int Crash_report_unrentables(struct char_data *ch, struct char_data *recep,$/;"	f
Crash_restore_weight	./objsave.c	/^void Crash_restore_weight(struct obj_data *obj)$/;"	f
Crash_save	./objsave.c	/^int Crash_save(struct obj_data *obj, FILE *fp, int location)$/;"	f
Crash_save_all	./objsave.c	/^void Crash_save_all(void)$/;"	f
Crash_write_rentcode	./objsave.c	/^int Crash_write_rentcode(struct char_data *ch, FILE *fl, struct rent_info *rent)$/;"	f
DATA_BLOCK_DATASIZE	./mail.h	75;"	d
DB_BOOT_HLP	./db.h	17;"	d
DB_BOOT_MOB	./db.h	13;"	d
DB_BOOT_OBJ	./db.h	14;"	d
DB_BOOT_SHP	./db.h	16;"	d
DB_BOOT_WLD	./db.h	12;"	d
DB_BOOT_ZON	./db.h	15;"	d
DEFAULT_STAFF_LVL	./spells.h	11;"	d
DEFAULT_WAND_LVL	./spells.h	12;"	d
DELETED_BLOCK	./mail.h	55;"	d
DFLT_DIR	./config.c	/^const char *DFLT_DIR = "lib";$/;"	v
DFLT_IP	./config.c	/^const char *DFLT_IP = NULL; \/* bind to all interfaces *\/$/;"	v
DFLT_PORT	./config.c	/^ush_int DFLT_PORT = 4000;$/;"	v
DM	./telnet.h	55;"	d
DO	./telnet.h	44;"	d
DONT	./telnet.h	43;"	d
DOOR_IS_CLOSED	./act.movement.c	431;"	d	file:
DOOR_IS_LOCKED	./act.movement.c	432;"	d	file:
DOOR_IS_OPEN	./act.movement.c	421;"	d	file:
DOOR_IS_OPENABLE	./act.movement.c	417;"	d	file:
DOOR_IS_PICKPROOF	./act.movement.c	427;"	d	file:
DOOR_IS_UNLOCKED	./act.movement.c	424;"	d	file:
DOOR_KEY	./act.movement.c	433;"	d	file:
DOWN	./structs.h	70;"	d
DP_C_LDOUBLE	./bsd-snprintf.c	151;"	d	file:
DP_C_LONG	./bsd-snprintf.c	150;"	d	file:
DP_C_LONG_LONG	./bsd-snprintf.c	152;"	d	file:
DP_C_SHORT	./bsd-snprintf.c	149;"	d	file:
DP_F_MINUS	./bsd-snprintf.c	140;"	d	file:
DP_F_NUM	./bsd-snprintf.c	143;"	d	file:
DP_F_PLUS	./bsd-snprintf.c	141;"	d	file:
DP_F_SPACE	./bsd-snprintf.c	142;"	d	file:
DP_F_UNSIGNED	./bsd-snprintf.c	146;"	d	file:
DP_F_UP	./bsd-snprintf.c	145;"	d	file:
DP_F_ZERO	./bsd-snprintf.c	144;"	d	file:
DP_S_CONV	./bsd-snprintf.c	136;"	d	file:
DP_S_DEFAULT	./bsd-snprintf.c	130;"	d	file:
DP_S_DONE	./bsd-snprintf.c	137;"	d	file:
DP_S_DOT	./bsd-snprintf.c	133;"	d	file:
DP_S_FLAGS	./bsd-snprintf.c	131;"	d	file:
DP_S_MAX	./bsd-snprintf.c	134;"	d	file:
DP_S_MIN	./bsd-snprintf.c	132;"	d	file:
DP_S_MOD	./bsd-snprintf.c	135;"	d	file:
DRUNK	./structs.h	415;"	d
DicknDavid	./castle.c	/^SPECIAL(DicknDavid);$/;"	v
EAST	./structs.h	66;"	d
EC	./telnet.h	50;"	d
EL	./telnet.h	49;"	d
ENCRYPT_CNT	./telnet.h	292;"	d
ENCRYPT_DEC_KEYID	./telnet.h	291;"	d
ENCRYPT_ENC_KEYID	./telnet.h	290;"	d
ENCRYPT_END	./telnet.h	287;"	d
ENCRYPT_IS	./telnet.h	283;"	d
ENCRYPT_NAME	./telnet.h	315;"	d
ENCRYPT_NAME_OK	./telnet.h	314;"	d
ENCRYPT_REPLY	./telnet.h	285;"	d
ENCRYPT_REQEND	./telnet.h	289;"	d
ENCRYPT_REQSTART	./telnet.h	288;"	d
ENCRYPT_START	./telnet.h	286;"	d
ENCRYPT_SUPPORT	./telnet.h	284;"	d
ENCTYPE_ANY	./telnet.h	294;"	d
ENCTYPE_CNT	./telnet.h	297;"	d
ENCTYPE_DES_CFB64	./telnet.h	295;"	d
ENCTYPE_DES_OFB64	./telnet.h	296;"	d
ENCTYPE_NAME	./telnet.h	318;"	d
ENCTYPE_NAME_OK	./telnet.h	317;"	d
END_OF	./shop.h	54;"	d
ENV_ESC	./telnet.h	239;"	d
ENV_USERVAR	./telnet.h	240;"	d
EOR	./telnet.h	58;"	d
ETEXT_FILE	./utils.h	107;"	d
EXDSCR_LENGTH	./structs.h	504;"	d
EXIT	./utils.h	477;"	d
EXITN	./act.movement.c	311;"	d	file:
EXIT_FLAGGED	./utils.h	224;"	d
EXP_MAX	./class.c	1706;"	d	file:
EX_CLOSED	./structs.h	95;"	d
EX_ISDOOR	./structs.h	94;"	d
EX_LOCKED	./structs.h	96;"	d
EX_PICKPROOF	./structs.h	97;"	d
FALSE	./config.c	21;"	d	file:
FALSE	./utils.h	507;"	d
FASTBOOT_FILE	./db.h	50;"	d
FASTBOOT_FILE	./db.h	54;"	d
FASTBOOT_FILE	./db.h	58;"	d
FD_CLR	./comm.c	171;"	d	file:
FD_CLR	./comm.c	175;"	d	file:
FD_ISSET	./comm.c	170;"	d	file:
FD_ISSET	./comm.c	174;"	d	file:
FD_SET	./comm.c	169;"	d	file:
FD_SET	./comm.c	173;"	d	file:
FD_SETSIZE	./sysdep.h	371;"	d
FD_ZERO	./comm.c	168;"	d	file:
FD_ZERO	./comm.c	172;"	d	file:
FIGHTING	./utils.h	308;"	d
FILENAME	./boards.h	40;"	d
FIND_ALL	./handler.h	76;"	d
FIND_ALLDOT	./handler.h	77;"	d
FIND_CHAR_ROOM	./handler.h	85;"	d
FIND_CHAR_WORLD	./handler.h	86;"	d
FIND_INDIV	./handler.h	75;"	d
FIND_OBJ_EQUIP	./handler.h	90;"	d
FIND_OBJ_INV	./handler.h	87;"	d
FIND_OBJ_ROOM	./handler.h	88;"	d
FIND_OBJ_WORLD	./handler.h	89;"	d
FULL	./structs.h	416;"	d
Free_Invalid_List	./ban.c	/^void Free_Invalid_List(void)$/;"	f
GA	./telnet.h	48;"	d
GARBAGE_SPACE	./structs.h	490;"	d
GET_AC	./utils.h	292;"	d
GET_ADD	./utils.h	284;"	d
GET_AGE	./utils.h	259;"	d
GET_ALIASES	./utils.h	325;"	d
GET_ALIGNMENT	./utils.h	311;"	d
GET_BAD_PWS	./utils.h	319;"	d
GET_BANK_GOLD	./utils.h	300;"	d
GET_CHA	./utils.h	289;"	d
GET_CLASS	./utils.h	277;"	d
GET_CON	./utils.h	288;"	d
GET_COND	./utils.h	313;"	d
GET_DAMROLL	./utils.h	302;"	d
GET_DEFAULT_POS	./utils.h	338;"	d
GET_DEX	./utils.h	285;"	d
GET_EQ	./utils.h	331;"	d
GET_EXP	./utils.h	291;"	d
GET_FREEZE_LEV	./utils.h	318;"	d
GET_GOLD	./utils.h	299;"	d
GET_HEIGHT	./utils.h	279;"	d
GET_HIT	./utils.h	293;"	d
GET_HITROLL	./utils.h	301;"	d
GET_HOME	./utils.h	278;"	d
GET_IDNUM	./utils.h	305;"	d
GET_INT	./utils.h	286;"	d
GET_INVIS_LEV	./utils.h	316;"	d
GET_LAST_OLC_MODE	./utils.h	324;"	d
GET_LAST_OLC_TARG	./utils.h	323;"	d
GET_LAST_TELL	./utils.h	326;"	d
GET_LEVEL	./utils.h	265;"	d
GET_LOADROOM	./utils.h	314;"	d
GET_MANA	./utils.h	297;"	d
GET_MAX_HIT	./utils.h	294;"	d
GET_MAX_MANA	./utils.h	298;"	d
GET_MAX_MOVE	./utils.h	296;"	d
GET_MOB_RNUM	./utils.h	334;"	d
GET_MOB_SPEC	./utils.h	333;"	d
GET_MOB_VNUM	./utils.h	335;"	d
GET_MOB_WAIT	./utils.h	363;"	d
GET_MOVE	./utils.h	295;"	d
GET_NAME	./utils.h	262;"	d
GET_OBJ_AFFECT	./utils.h	387;"	d
GET_OBJ_COST	./utils.h	385;"	d
GET_OBJ_EXTRA	./utils.h	388;"	d
GET_OBJ_RENT	./utils.h	386;"	d
GET_OBJ_RNUM	./utils.h	393;"	d
GET_OBJ_SPEC	./utils.h	396;"	d
GET_OBJ_TIMER	./utils.h	392;"	d
GET_OBJ_TYPE	./utils.h	384;"	d
GET_OBJ_VAL	./utils.h	390;"	d
GET_OBJ_VNUM	./utils.h	394;"	d
GET_OBJ_WEAR	./utils.h	389;"	d
GET_OBJ_WEIGHT	./utils.h	391;"	d
GET_PASSWD	./utils.h	266;"	d
GET_PC_NAME	./utils.h	261;"	d
GET_PFILEPOS	./utils.h	267;"	d
GET_POS	./utils.h	304;"	d
GET_PRACTICES	./utils.h	315;"	d
GET_REAL_LEVEL	./utils.h	273;"	d
GET_ROOM_SPEC	./utils.h	250;"	d
GET_ROOM_VNUM	./utils.h	248;"	d
GET_SAVE	./utils.h	310;"	d
GET_SEX	./utils.h	281;"	d
GET_SKILL	./utils.h	328;"	d
GET_STR	./utils.h	283;"	d
GET_TALK	./utils.h	320;"	d
GET_TITLE	./utils.h	264;"	d
GET_WAIT_STATE	./utils.h	365;"	d
GET_WAS_IN	./utils.h	258;"	d
GET_WEIGHT	./utils.h	280;"	d
GET_WIMP_LEV	./utils.h	317;"	d
GET_WIS	./utils.h	287;"	d
GREETINGS	./db.c	/^char *GREETINGS = NULL;		\/* opening credits screen	*\/$/;"	v
GREETINGS_FILE	./db.h	77;"	d
HANDBOOK_FILE	./db.h	84;"	d
HAS_RLIMIT	./sysdep.h	407;"	d
HAS_SPELL_ROUTINE	./utils.h	229;"	d
HAVE_ARPA_INET_H	./conf.h	92;"	d
HAVE_ARPA_TELNET_H	./conf.h	95;"	d
HAVE_ASSERT_H	./conf.h	98;"	d
HAVE_CRYPT_H	./conf.h	101;"	d
HAVE_ERRNO_H	./conf.h	104;"	d
HAVE_FCNTL_H	./conf.h	107;"	d
HAVE_GETTIMEOFDAY	./conf.h	50;"	d
HAVE_INET_ADDR	./conf.h	53;"	d
HAVE_INET_ATON	./conf.h	56;"	d
HAVE_LIMITS_H	./conf.h	110;"	d
HAVE_MCHECK_H	./conf.h	113;"	d
HAVE_MEMORY_H	./conf.h	116;"	d
HAVE_NETDB_H	./conf.h	122;"	d
HAVE_NETINET_IN_H	./conf.h	125;"	d
HAVE_SELECT	./conf.h	59;"	d
HAVE_SIGNAL_H	./conf.h	128;"	d
HAVE_SNPRINTF	./bsd-snprintf.c	101;"	d	file:
HAVE_SNPRINTF	./conf.h	62;"	d
HAVE_STRCASECMP	./conf.h	65;"	d
HAVE_STRDUP	./conf.h	68;"	d
HAVE_STRERROR	./conf.h	71;"	d
HAVE_STRINGS_H	./conf.h	134;"	d
HAVE_STRING_H	./conf.h	131;"	d
HAVE_STRNCASECMP	./conf.h	80;"	d
HAVE_STRSTR	./conf.h	86;"	d
HAVE_STRUCT_IN_ADDR	./conf.h	41;"	d
HAVE_SYS_FCNTL_H	./conf.h	137;"	d
HAVE_SYS_RESOURCE_H	./conf.h	140;"	d
HAVE_SYS_SELECT_H	./conf.h	143;"	d
HAVE_SYS_SOCKET_H	./conf.h	146;"	d
HAVE_SYS_STAT_H	./conf.h	149;"	d
HAVE_SYS_TIME_H	./conf.h	152;"	d
HAVE_SYS_TYPES_H	./conf.h	155;"	d
HAVE_SYS_UIO_H	./conf.h	158;"	d
HAVE_SYS_WAIT_H	./conf.h	11;"	d
HAVE_UNISTD_H	./conf.h	161;"	d
HAVE_VPRINTF	./conf.h	14;"	d
HAVE_VSNPRINTF	./bsd-snprintf.c	102;"	d	file:
HAVE_VSNPRINTF	./conf.h	89;"	d
HCONTROL_FILE	./db.h	96;"	d
HCONTROL_FORMAT	./house.c	/^const char *HCONTROL_FORMAT =$/;"	v
HEADER_BLOCK	./mail.h	53;"	d
HEADER_BLOCK_DATASIZE	./mail.h	71;"	d
HELP_PAGE_FILE	./db.h	78;"	d
HISTORY_SIZE	./structs.h	495;"	d
HLP_PREFIX	./db.h	71;"	d
HMHR	./utils.h	416;"	d
HOST_LENGTH	./structs.h	503;"	d
HOUSE_PRIVATE	./house.h	4;"	d
HSHR	./utils.h	414;"	d
HSSH	./utils.h	415;"	d
HUNTING	./utils.h	309;"	d
House_boot	./house.c	/^void House_boot(void)$/;"	f
House_can_enter	./house.c	/^int House_can_enter(struct char_data *ch, room_vnum house)$/;"	f
House_crashsave	./house.c	/^void House_crashsave(room_vnum vnum)$/;"	f
House_delete_file	./house.c	/^void House_delete_file(room_vnum vnum)$/;"	f
House_get_filename	./house.c	/^int House_get_filename(room_vnum vnum, char *filename, size_t maxlen)$/;"	f
House_list_guests	./house.c	/^void House_list_guests(struct char_data *ch, int i, int quiet)$/;"	f
House_listrent	./house.c	/^void House_listrent(struct char_data *ch, room_vnum vnum)$/;"	f
House_load	./house.c	/^int House_load(room_vnum vnum)$/;"	f
House_restore_weight	./house.c	/^void House_restore_weight(struct obj_data *obj)$/;"	f
House_save	./house.c	/^int House_save(struct obj_data *obj, FILE *fp)$/;"	f
House_save_all	./house.c	/^void House_save_all(void)$/;"	f
House_save_control	./house.c	/^void House_save_control(void)$/;"	f
IAC	./telnet.h	42;"	d
IDEA_FILE	./db.h	86;"	d
IDXTYPE	./structs.h	46;"	d
IDXTYPE	./structs.h	51;"	d
IMMLIST_FILE	./db.h	81;"	d
IMM_CAN_SEE	./utils.h	433;"	d
IMOTD_FILE	./db.h	76;"	d
INDEX_FILE	./db.h	64;"	d
INDEX_SIZE	./boards.h	15;"	d
INFO_FILE	./db.h	79;"	d
INVALID_SOCKET	./comm.c	70;"	d	file:
INVIS_OK	./utils.h	427;"	d
INVIS_OK_OBJ	./utils.h	446;"	d
IN_ROOM	./utils.h	257;"	d
IP	./telnet.h	53;"	d
ISNEWL	./utils.h	141;"	d
IS_AFFECTED	./utils.h	232;"	d
IS_CARRYING_N	./utils.h	307;"	d
IS_CARRYING_W	./utils.h	306;"	d
IS_CLERIC	./utils.h	488;"	d
IS_CLOSED	./graph.c	53;"	d	file:
IS_CORPSE	./utils.h	399;"	d
IS_DARK	./utils.h	244;"	d
IS_EVIL	./utils.h	356;"	d
IS_GOD	./shop.h	53;"	d
IS_GOOD	./utils.h	355;"	d
IS_LIGHT	./utils.h	245;"	d
IS_MAGIC_USER	./utils.h	486;"	d
IS_MARKED	./graph.c	51;"	d	file:
IS_MOB	./utils.h	216;"	d
IS_MOVE	./interpreter.h	18;"	d
IS_NEUTRAL	./utils.h	357;"	d
IS_NPC	./utils.h	215;"	d
IS_SET	./utils.h	184;"	d
IS_THIEF	./utils.h	490;"	d
IS_WARRIOR	./utils.h	492;"	d
IS_WEAPON	./fight.c	83;"	d	file:
ITEM_ANTI_CLERIC	./structs.h	351;"	d
ITEM_ANTI_EVIL	./structs.h	348;"	d
ITEM_ANTI_GOOD	./structs.h	347;"	d
ITEM_ANTI_MAGIC_USER	./structs.h	350;"	d
ITEM_ANTI_NEUTRAL	./structs.h	349;"	d
ITEM_ANTI_THIEF	./structs.h	352;"	d
ITEM_ANTI_WARRIOR	./structs.h	353;"	d
ITEM_ARMOR	./structs.h	302;"	d
ITEM_BLESS	./structs.h	346;"	d
ITEM_BOAT	./structs.h	315;"	d
ITEM_CONTAINER	./structs.h	308;"	d
ITEM_DRINKCON	./structs.h	310;"	d
ITEM_FIREWEAPON	./structs.h	299;"	d
ITEM_FOOD	./structs.h	312;"	d
ITEM_FOUNTAIN	./structs.h	316;"	d
ITEM_GLOW	./structs.h	338;"	d
ITEM_HUM	./structs.h	339;"	d
ITEM_INVISIBLE	./structs.h	343;"	d
ITEM_KEY	./structs.h	311;"	d
ITEM_LIGHT	./structs.h	294;"	d
ITEM_MAGIC	./structs.h	344;"	d
ITEM_MISSILE	./structs.h	300;"	d
ITEM_MONEY	./structs.h	313;"	d
ITEM_NODONATE	./structs.h	341;"	d
ITEM_NODROP	./structs.h	345;"	d
ITEM_NOINVIS	./structs.h	342;"	d
ITEM_NORENT	./structs.h	340;"	d
ITEM_NOSELL	./structs.h	354;"	d
ITEM_NOTE	./structs.h	309;"	d
ITEM_OTHER	./structs.h	305;"	d
ITEM_PEN	./structs.h	314;"	d
ITEM_POTION	./structs.h	303;"	d
ITEM_SCROLL	./structs.h	295;"	d
ITEM_STAFF	./structs.h	297;"	d
ITEM_TRAP	./structs.h	307;"	d
ITEM_TRASH	./structs.h	306;"	d
ITEM_TREASURE	./structs.h	301;"	d
ITEM_WAND	./structs.h	296;"	d
ITEM_WEAPON	./structs.h	298;"	d
ITEM_WEAR_ABOUT	./structs.h	330;"	d
ITEM_WEAR_ARMS	./structs.h	328;"	d
ITEM_WEAR_BODY	./structs.h	323;"	d
ITEM_WEAR_FEET	./structs.h	326;"	d
ITEM_WEAR_FINGER	./structs.h	321;"	d
ITEM_WEAR_HANDS	./structs.h	327;"	d
ITEM_WEAR_HEAD	./structs.h	324;"	d
ITEM_WEAR_HOLD	./structs.h	334;"	d
ITEM_WEAR_LEGS	./structs.h	325;"	d
ITEM_WEAR_NECK	./structs.h	322;"	d
ITEM_WEAR_SHIELD	./structs.h	329;"	d
ITEM_WEAR_TAKE	./structs.h	320;"	d
ITEM_WEAR_WAIST	./structs.h	331;"	d
ITEM_WEAR_WIELD	./structs.h	333;"	d
ITEM_WEAR_WRIST	./structs.h	332;"	d
ITEM_WORN	./structs.h	304;"	d
James	./castle.c	/^SPECIAL(James);$/;"	v
KBLU	./screen.h	15;"	d
KCYN	./screen.h	17;"	d
KGRN	./screen.h	13;"	d
KILLSCRIPT_FILE	./db.h	51;"	d
KILLSCRIPT_FILE	./db.h	55;"	d
KILLSCRIPT_FILE	./db.h	59;"	d
KMAG	./screen.h	16;"	d
KNRM	./screen.h	11;"	d
KNUL	./screen.h	19;"	d
KRED	./screen.h	12;"	d
KWHT	./screen.h	18;"	d
KYEL	./screen.h	14;"	d
LARGE_BUFSIZE	./structs.h	493;"	d
LAST_BLOCK	./mail.h	54;"	d
LEARNED	./spec_procs.c	117;"	d	file:
LEARNED_LEVEL	./spec_procs.c	109;"	d	file:
LFLOW_OFF	./telnet.h	153;"	d
LFLOW_ON	./telnet.h	154;"	d
LFLOW_RESTART_ANY	./telnet.h	155;"	d
LFLOW_RESTART_XON	./telnet.h	156;"	d
LIB_ETC	./db.h	24;"	d
LIB_ETC	./db.h	35;"	d
LIB_HOUSE	./db.h	28;"	d
LIB_HOUSE	./db.h	39;"	d
LIB_MISC	./db.h	23;"	d
LIB_MISC	./db.h	34;"	d
LIB_PLRALIAS	./db.h	27;"	d
LIB_PLRALIAS	./db.h	38;"	d
LIB_PLROBJS	./db.h	26;"	d
LIB_PLROBJS	./db.h	37;"	d
LIB_PLRTEXT	./db.h	25;"	d
LIB_PLRTEXT	./db.h	36;"	d
LIB_TEXT	./db.h	21;"	d
LIB_TEXT	./db.h	32;"	d
LIB_TEXT_HELP	./db.h	22;"	d
LIB_TEXT_HELP	./db.h	33;"	d
LIB_WORLD	./db.h	20;"	d
LIB_WORLD	./db.h	31;"	d
LIGHT_OK	./utils.h	424;"	d
LIQ_ALE	./structs.h	396;"	d
LIQ_BEER	./structs.h	394;"	d
LIQ_BLOOD	./structs.h	406;"	d
LIQ_CLEARWATER	./structs.h	408;"	d
LIQ_COFFE	./structs.h	405;"	d
LIQ_DARKALE	./structs.h	397;"	d
LIQ_FIREBRT	./structs.h	400;"	d
LIQ_LEMONADE	./structs.h	399;"	d
LIQ_LOCALSPC	./structs.h	401;"	d
LIQ_MILK	./structs.h	403;"	d
LIQ_SALTWATER	./structs.h	407;"	d
LIQ_SLIME	./structs.h	402;"	d
LIQ_TEA	./structs.h	404;"	d
LIQ_WATER	./structs.h	393;"	d
LIQ_WHISKY	./structs.h	398;"	d
LIQ_WINE	./structs.h	395;"	d
LIST_PRODUCE	./shop.h	65;"	d
LIST_ROOM	./shop.h	67;"	d
LIST_TRADE	./shop.h	66;"	d
LM_FORWARDMASK	./telnet.h	163;"	d
LM_MODE	./telnet.h	162;"	d
LM_SLC	./telnet.h	164;"	d
LOCK_DOOR	./act.movement.c	318;"	d	file:
LOC_INVENTORY	./objsave.c	27;"	d	file:
LOGNAME	./config.c	/^const char *LOGNAME = NULL;$/;"	v
LONG_STRING	./bsd-snprintf.c	706;"	d	file:
LOWER	./utils.h	138;"	d
LVL_FREEZE	./structs.h	461;"	d
LVL_GOD	./structs.h	457;"	d
LVL_GRGOD	./structs.h	456;"	d
LVL_IMMORT	./structs.h	458;"	d
LVL_IMPL	./structs.h	455;"	d
MAGIC_NUMBER	./structs.h	464;"	d
MAG_AFFECTS	./spells.h	22;"	d
MAG_ALTER_OBJS	./spells.h	25;"	d
MAG_AREAS	./spells.h	28;"	d
MAG_CREATIONS	./spells.h	30;"	d
MAG_DAMAGE	./spells.h	21;"	d
MAG_GROUPS	./spells.h	26;"	d
MAG_MANUAL	./spells.h	31;"	d
MAG_MASSES	./spells.h	27;"	d
MAG_POINTS	./spells.h	24;"	d
MAG_SUMMONS	./spells.h	29;"	d
MAG_UNAFFECTS	./spells.h	23;"	d
MAIL_FILE	./db.h	94;"	d
MANUAL_SPELL	./spells.h	216;"	d
MARK	./graph.c	49;"	d	file:
MAX	./bsd-snprintf.c	97;"	d	file:
MAX	./utils.c	/^int MAX(int a, int b)$/;"	f
MAX	./utils.h	58;"	d
MAXGAIN	./spec_procs.c	119;"	d	file:
MAX_AFFECT	./structs.h	507;"	d
MAX_BAG_ROWS	./objsave.c	28;"	d	file:
MAX_BOARD_MESSAGES	./boards.h	12;"	d
MAX_GUESTS	./house.h	2;"	d
MAX_HOUSES	./house.h	1;"	d
MAX_INPUT_LENGTH	./structs.h	497;"	d
MAX_INVALID_NAMES	./ban.c	243;"	d	file:
MAX_MAIL_SIZE	./mail.h	26;"	d
MAX_MESSAGES	./structs.h	499;"	d
MAX_MESSAGE_LENGTH	./boards.h	13;"	d
MAX_MOB_DESC	./olc.h	18;"	d
MAX_MOB_NAME	./olc.h	15;"	d
MAX_NAME_LENGTH	./structs.h	500;"	d
MAX_NOTE_LENGTH	./structs.h	509;"	d
MAX_OBJ_AFFECT	./structs.h	508;"	d
MAX_OBJ_DESC	./olc.h	19;"	d
MAX_OBJ_NAME	./olc.h	16;"	d
MAX_OPER	./shop.h	95;"	d
MAX_OUTSIDE_BANK	./shop.h	135;"	d
MAX_PER_PRAC	./spec_procs.c	110;"	d	file:
MAX_PROD	./shop.h	47;"	d
MAX_PROMPT_LENGTH	./structs.h	489;"	d
MAX_PWD_LENGTH	./structs.h	501;"	d
MAX_RAW_INPUT_LENGTH	./structs.h	498;"	d
MAX_ROOM_DESC	./olc.h	17;"	d
MAX_ROOM_NAME	./olc.h	14;"	d
MAX_SHOP_OBJ	./shop.h	49;"	d
MAX_SKILLS	./structs.h	506;"	d
MAX_SOCK_BUF	./structs.h	488;"	d
MAX_SPELLS	./spells.h	91;"	d
MAX_SPELL_AFFECTS	./magic.c	278;"	d	file:
MAX_STRING_LENGTH	./structs.h	496;"	d
MAX_TITLE_LENGTH	./structs.h	502;"	d
MAX_TONGUE	./structs.h	505;"	d
MAX_TRADE	./shop.h	46;"	d
MEMORY	./utils.h	339;"	d
MENU	./config.c	/^const char *MENU =$/;"	v
MESS_FILE	./db.h	89;"	d
MIN	./utils.c	/^int MIN(int a, int b)$/;"	f
MIN	./utils.h	62;"	d
MINDEX_FILE	./db.h	65;"	d
MINGAIN	./spec_procs.c	118;"	d	file:
MIN_MAIL_LEVEL	./mail.h	20;"	d
MIN_OUTSIDE_BANK	./shop.h	134;"	d
MIN_PER_PRAC	./spec_procs.c	111;"	d	file:
MISC	./act.wizard.c	2101;"	d	file:
MOB_AERIALSERVANT	./magic.c	721;"	d	file:
MOB_AGGRESSIVE	./structs.h	178;"	d
MOB_AGGR_EVIL	./structs.h	181;"	d
MOB_AGGR_GOOD	./structs.h	182;"	d
MOB_AGGR_NEUTRAL	./structs.h	183;"	d
MOB_AGGR_TO_ALIGN	./mobact.c	37;"	d	file:
MOB_AWARE	./structs.h	177;"	d
MOB_CLONE	./magic.c	719;"	d	file:
MOB_ELEMENTAL_BASE	./magic.c	718;"	d	file:
MOB_FLAGGED	./utils.h	219;"	d
MOB_FLAGS	./utils.h	204;"	d
MOB_GATE_I	./magic.c	713;"	d	file:
MOB_GATE_II	./magic.c	714;"	d	file:
MOB_GATE_III	./magic.c	715;"	d	file:
MOB_HELPER	./structs.h	185;"	d
MOB_ISNPC	./structs.h	176;"	d
MOB_MEMORY	./structs.h	184;"	d
MOB_MONSUM_I	./magic.c	710;"	d	file:
MOB_MONSUM_II	./magic.c	711;"	d	file:
MOB_MONSUM_III	./magic.c	712;"	d	file:
MOB_NOBASH	./structs.h	189;"	d
MOB_NOBLIND	./structs.h	190;"	d
MOB_NOCHARM	./structs.h	186;"	d
MOB_NOSLEEP	./structs.h	188;"	d
MOB_NOSUMMON	./structs.h	187;"	d
MOB_NOTDEADYET	./structs.h	191;"	d
MOB_PREFIX	./db.h	67;"	d
MOB_SCAVENGER	./structs.h	175;"	d
MOB_SENTINEL	./structs.h	174;"	d
MOB_SPEC	./structs.h	173;"	d
MOB_STAY_ZONE	./structs.h	179;"	d
MOB_WIMPY	./structs.h	180;"	d
MOB_ZOMBIE	./magic.c	720;"	d	file:
MODE_ACK	./telnet.h	168;"	d
MODE_ECHO	./telnet.h	176;"	d
MODE_EDIT	./telnet.h	166;"	d
MODE_FLOW	./telnet.h	175;"	d
MODE_FORCE	./telnet.h	179;"	d
MODE_INBIN	./telnet.h	177;"	d
MODE_LIT_ECHO	./telnet.h	170;"	d
MODE_MASK	./telnet.h	172;"	d
MODE_OUTBIN	./telnet.h	178;"	d
MODE_SOFT_TAB	./telnet.h	169;"	d
MODE_TRAPSIG	./telnet.h	167;"	d
MORT_CAN_SEE	./utils.h	431;"	d
MORT_CAN_SEE_OBJ	./utils.h	454;"	d
MOTD_FILE	./db.h	75;"	d
MSG_CANT_KILL_KEEPER	./shop.h	145;"	d
MSG_CLOSED_FOR_DAY	./shop.h	139;"	d
MSG_HEADING	./boards.h	44;"	d
MSG_LEVEL	./boards.h	46;"	d
MSG_NOT_OPEN_YET	./shop.h	137;"	d
MSG_NOT_REOPEN_YET	./shop.h	138;"	d
MSG_NO_SEE_CHAR	./shop.h	141;"	d
MSG_NO_SELL_ALIGN	./shop.h	142;"	d
MSG_NO_SELL_CLASS	./shop.h	143;"	d
MSG_NO_STEAL_HERE	./shop.h	140;"	d
MSG_NO_USED_WANDSTAFF	./shop.h	144;"	d
MSG_SLOTNUM	./boards.h	45;"	d
NEED_CLOSED	./act.movement.c	288;"	d	file:
NEED_LOCKED	./act.movement.c	290;"	d	file:
NEED_OPEN	./act.movement.c	287;"	d	file:
NEED_STRICMP_PROTO	./conf.h	308;"	d
NEED_STRLCPY_PROTO	./conf.h	311;"	d
NEED_STRNICMP_PROTO	./conf.h	317;"	d
NEED_UNLOCKED	./act.movement.c	289;"	d	file:
NEWEST_AT_TOP	./boards.c	60;"	d	file:
NEWS_FILE	./db.h	74;"	d
NEW_ENV_VALUE	./telnet.h	238;"	d
NEW_ENV_VAR	./telnet.h	237;"	d
NEW_MSG_INDEX	./boards.h	43;"	d
NO	./config.c	22;"	d	file:
NOBODY	./structs.h	49;"	d
NOBODY	./structs.h	54;"	d
NOEFFECT	./config.c	/^const char *NOEFFECT = "Nothing seems to happen.\\r\\n";$/;"	v
NOP	./telnet.h	56;"	d
NOPERSON	./config.c	/^const char *NOPERSON = "No-one by that name here.\\r\\n";$/;"	v
NORTH	./structs.h	65;"	d
NOTHING	./structs.h	48;"	d
NOTHING	./structs.h	53;"	d
NOTRADE_CLERIC	./shop.h	121;"	d
NOTRADE_EVIL	./shop.h	118;"	d
NOTRADE_GOOD	./shop.h	117;"	d
NOTRADE_MAGIC_USER	./shop.h	120;"	d
NOTRADE_NEUTRAL	./shop.h	119;"	d
NOTRADE_THIEF	./shop.h	122;"	d
NOTRADE_WARRIOR	./shop.h	123;"	d
NOWHERE	./structs.h	47;"	d
NOWHERE	./structs.h	52;"	d
NPC	./act.wizard.c	2098;"	d	file:
NRM	./utils.h	102;"	d
NSLC	./telnet.h	200;"	d
NTELOPTS	./telnet.h	125;"	d
NULL	./utils.h	503;"	d
NUMBER	./act.wizard.c	2103;"	d	file:
NUM_CLASSES	./structs.h	123;"	d
NUM_OF_BOARDS	./boards.h	11;"	d
NUM_OF_DIRS	./structs.h	463;"	d
NUM_RESERVED_DESCS	./comm.h	11;"	d
NUM_TOKENS	./interpreter.c	731;"	d	file:
NUM_WEARS	./structs.h	287;"	d
OBJAFF_FLAGGED	./utils.h	225;"	d
OBJECT_DEAD	./shop.h	58;"	d
OBJECT_NOTOK	./shop.h	59;"	d
OBJECT_NOVAL	./shop.h	61;"	d
OBJECT_OK	./shop.h	60;"	d
OBJN	./utils.h	473;"	d
OBJS	./utils.h	470;"	d
OBJVAL_FLAGGED	./utils.h	226;"	d
OBJWEAR_FLAGGED	./utils.h	227;"	d
OBJ_FLAGGED	./utils.h	228;"	d
OBJ_PREFIX	./db.h	68;"	d
OFF	./utils.h	100;"	d
OK	./config.c	/^const char *OK = "Okay.\\r\\n";$/;"	v
OLC_ALIASES	./olc.h	11;"	d
OLC_COPY	./olc.h	8;"	d
OLC_DESC	./olc.h	10;"	d
OLC_MOB	./olc.h	5;"	d
OLC_NAME	./olc.h	9;"	d
OLC_OBJ	./olc.h	6;"	d
OLC_REPEAT	./olc.h	3;"	d
OLC_ROOM	./olc.h	4;"	d
OLC_SET	./olc.h	1;"	d
OLC_SHOW	./olc.h	2;"	d
OLC_USAGE	./olc.c	34;"	d	file:
OLD_ENV_VALUE	./telnet.h	236;"	d
OLD_ENV_VAR	./telnet.h	235;"	d
ONOFF	./utils.h	136;"	d
OPEN_DOOR	./act.movement.c	312;"	d	file:
OPER_AND	./shop.h	93;"	d
OPER_CLOSE_PAREN	./shop.h	91;"	d
OPER_NOT	./shop.h	94;"	d
OPER_OPEN_PAREN	./shop.h	90;"	d
OPER_OR	./shop.h	92;"	d
OPT_USEC	./structs.h	474;"	d
OUTSIDE	./utils.h	495;"	d
O_NONBLOCK	./comm.c	2040;"	d	file:
Obj_from_store	./objsave.c	/^struct obj_data *Obj_from_store(struct obj_file_elem object, int *location)$/;"	f
Obj_to_store	./objsave.c	/^int Obj_to_store(struct obj_data *obj, FILE *fl, int location)$/;"	f
PADDING0	./structs.h	/^   byte PADDING0;		\/* used to be spells_to_learn		*\/$/;"	m	struct:player_special_data_saved
PAGE_LENGTH	./comm.h	40;"	d
PAGE_WIDTH	./comm.h	41;"	d
PASSES_PER_SEC	./structs.h	475;"	d
PATH_MAX	./sysdep.h	352;"	d
PAUSE_FILE	./db.h	52;"	d
PAUSE_FILE	./db.h	56;"	d
PAUSE_FILE	./db.h	60;"	d
PC	./act.wizard.c	2097;"	d	file:
PERS	./utils.h	468;"	d
PET_PRICE	./spec_procs.c	642;"	d	file:
PLAYER_FILE	./db.h	93;"	d
PLR_CRASH	./structs.h	159;"	d
PLR_CRYO	./structs.h	168;"	d
PLR_DELETED	./structs.h	163;"	d
PLR_DONTSET	./structs.h	156;"	d
PLR_FLAGGED	./utils.h	220;"	d
PLR_FLAGS	./utils.h	205;"	d
PLR_FROZEN	./structs.h	155;"	d
PLR_INVSTART	./structs.h	167;"	d
PLR_KILLER	./structs.h	153;"	d
PLR_LOADROOM	./structs.h	164;"	d
PLR_MAILING	./structs.h	158;"	d
PLR_NODELETE	./structs.h	166;"	d
PLR_NOSHOUT	./structs.h	161;"	d
PLR_NOTDEADYET	./structs.h	169;"	d
PLR_NOTITLE	./structs.h	162;"	d
PLR_NOWIZLIST	./structs.h	165;"	d
PLR_SITEOK	./structs.h	160;"	d
PLR_THIEF	./structs.h	154;"	d
PLR_TOG_CHK	./utils.h	234;"	d
PLR_WRITING	./structs.h	157;"	d
POLICIES_FILE	./db.h	83;"	d
POOFIN	./utils.h	321;"	d
POOFOUT	./utils.h	322;"	d
POSIX	./sysdep.h	181;"	d
POSIX	./sysdep.h	188;"	d
POSIX	./sysdep.h	193;"	d
POSIX_NONBLOCK_BROKEN	./sysdep.h	197;"	d
POS_DEAD	./structs.h	141;"	d
POS_FIGHTING	./structs.h	148;"	d
POS_INCAP	./structs.h	143;"	d
POS_MORTALLYW	./structs.h	142;"	d
POS_RESTING	./structs.h	146;"	d
POS_SITTING	./structs.h	147;"	d
POS_SLEEPING	./structs.h	145;"	d
POS_STANDING	./structs.h	149;"	d
POS_STUNNED	./structs.h	144;"	d
PRAC_TYPE	./spec_procs.c	112;"	d	file:
PRF_AUTOEXIT	./structs.h	202;"	d
PRF_BRIEF	./structs.h	195;"	d
PRF_COLOR_1	./structs.h	208;"	d
PRF_COLOR_2	./structs.h	209;"	d
PRF_COMPACT	./structs.h	196;"	d
PRF_DEAF	./structs.h	197;"	d
PRF_DISPAUTO	./structs.h	217;"	d
PRF_DISPHP	./structs.h	199;"	d
PRF_DISPMANA	./structs.h	200;"	d
PRF_DISPMOVE	./structs.h	201;"	d
PRF_FLAGGED	./utils.h	222;"	d
PRF_FLAGS	./utils.h	206;"	d
PRF_HOLYLIGHT	./structs.h	207;"	d
PRF_LOG1	./structs.h	211;"	d
PRF_LOG2	./structs.h	212;"	d
PRF_NOAUCT	./structs.h	213;"	d
PRF_NOGOSS	./structs.h	214;"	d
PRF_NOGRATZ	./structs.h	215;"	d
PRF_NOHASSLE	./structs.h	203;"	d
PRF_NOREPEAT	./structs.h	206;"	d
PRF_NOTELL	./structs.h	198;"	d
PRF_NOWIZ	./structs.h	210;"	d
PRF_QUEST	./structs.h	204;"	d
PRF_ROOMFLAGS	./structs.h	216;"	d
PRF_SUMMONABLE	./structs.h	205;"	d
PRF_TOG_CHK	./act.other.c	845;"	d	file:
PRF_TOG_CHK	./utils.h	235;"	d
PULSE_AUTOSAVE	./structs.h	481;"	d
PULSE_IDLEPWD	./structs.h	482;"	d
PULSE_MOBILE	./structs.h	479;"	d
PULSE_SANITY	./structs.h	483;"	d
PULSE_TIMESAVE	./structs.h	485;"	d
PULSE_USAGE	./structs.h	484;"	d
PULSE_VIOLENCE	./structs.h	480;"	d
PULSE_ZONE	./structs.h	478;"	d
QBLU	./screen.h	44;"	d
QCYN	./screen.h	46;"	d
QGRN	./screen.h	42;"	d
QMAG	./screen.h	45;"	d
QNRM	./screen.h	40;"	d
QRED	./screen.h	41;"	d
QWHT	./screen.h	47;"	d
QYEL	./screen.h	43;"	d
RANGE	./act.wizard.c	2109;"	d	file:
RANGE	./db.c	1218;"	d	file:
RANGE	./db.c	1280;"	d	file:
READ_LVL	./boards.h	37;"	d
READ_SIZE	./utils.h	19;"	d
REAL	./db.h	136;"	d
RECON	./interpreter.c	1145;"	d	file:
RECREATE	./utils.h	156;"	d
REMOVE_BIT	./utils.h	186;"	d
REMOVE_FROM_LIST	./utils.h	169;"	d
REMOVE_LVL	./boards.h	39;"	d
RENT_CRASH	./structs.h	436;"	d
RENT_CRYO	./structs.h	438;"	d
RENT_FACTOR	./objsave.c	24;"	d	file:
RENT_FORCED	./structs.h	439;"	d
RENT_RENTED	./structs.h	437;"	d
RENT_TIMEDOUT	./structs.h	440;"	d
RENT_UNDEF	./structs.h	435;"	d
RETSIGTYPE	./conf.h	20;"	d
RLIMIT_NOFILE	./sysdep.h	409;"	d
RL_SEC	./structs.h	476;"	d
ROOM_ATRIUM	./structs.h	88;"	d
ROOM_BFS_MARK	./structs.h	90;"	d
ROOM_DARK	./structs.h	75;"	d
ROOM_DEATH	./structs.h	76;"	d
ROOM_FLAGGED	./utils.h	223;"	d
ROOM_FLAGS	./utils.h	208;"	d
ROOM_GODROOM	./structs.h	85;"	d
ROOM_HOUSE	./structs.h	86;"	d
ROOM_HOUSE_CRASH	./structs.h	87;"	d
ROOM_INDOORS	./structs.h	78;"	d
ROOM_NOMAGIC	./structs.h	82;"	d
ROOM_NOMOB	./structs.h	77;"	d
ROOM_NOTRACK	./structs.h	81;"	d
ROOM_OLC	./structs.h	89;"	d
ROOM_PEACEFUL	./structs.h	79;"	d
ROOM_PRIVATE	./structs.h	84;"	d
ROOM_SOUNDPROOF	./structs.h	80;"	d
ROOM_TUNNEL	./structs.h	83;"	d
Read_Invalid_List	./ban.c	/^void Read_Invalid_List(void)$/;"	f
SANA	./utils.h	419;"	d
SAVING_BREATH	./spells.h	152;"	d
SAVING_PARA	./spells.h	149;"	d
SAVING_PETRI	./spells.h	151;"	d
SAVING_ROD	./spells.h	150;"	d
SAVING_SPELL	./spells.h	153;"	d
SB	./telnet.h	47;"	d
SCMD_ASK	./interpreter.h	134;"	d
SCMD_AUCTION	./interpreter.h	140;"	d
SCMD_AUTOEXIT	./interpreter.h	120;"	d
SCMD_BRIEF	./interpreter.h	107;"	d
SCMD_BUG	./interpreter.h	166;"	d
SCMD_CLEAR	./interpreter.h	101;"	d
SCMD_CLOSE	./interpreter.h	207;"	d
SCMD_COMMANDS	./interpreter.h	156;"	d
SCMD_COMPACT	./interpreter.h	108;"	d
SCMD_CREDITS	./interpreter.h	93;"	d
SCMD_DATE	./interpreter.h	152;"	d
SCMD_DEAF	./interpreter.h	111;"	d
SCMD_DONATE	./interpreter.h	163;"	d
SCMD_DOWN	./interpreter.h	88;"	d
SCMD_DRINK	./interpreter.h	193;"	d
SCMD_DROP	./interpreter.h	161;"	d
SCMD_EAST	./interpreter.h	84;"	d
SCMD_EAT	./interpreter.h	191;"	d
SCMD_ECHO	./interpreter.h	202;"	d
SCMD_EMOTE	./interpreter.h	203;"	d
SCMD_FILL	./interpreter.h	180;"	d
SCMD_FREEZE	./interpreter.h	128;"	d
SCMD_GOSSIP	./interpreter.h	139;"	d
SCMD_GRATZ	./interpreter.h	141;"	d
SCMD_HANDBOOK	./interpreter.h	92;"	d
SCMD_HIT	./interpreter.h	187;"	d
SCMD_HOLLER	./interpreter.h	137;"	d
SCMD_HOLYLIGHT	./interpreter.h	118;"	d
SCMD_IDEA	./interpreter.h	168;"	d
SCMD_IMMLIST	./interpreter.h	98;"	d
SCMD_IMOTD	./interpreter.h	100;"	d
SCMD_INFO	./interpreter.h	91;"	d
SCMD_JUNK	./interpreter.h	162;"	d
SCMD_LOCK	./interpreter.h	209;"	d
SCMD_LOOK	./interpreter.h	171;"	d
SCMD_MOTD	./interpreter.h	99;"	d
SCMD_MURDER	./interpreter.h	188;"	d
SCMD_NEWS	./interpreter.h	94;"	d
SCMD_NOAUCTION	./interpreter.h	110;"	d
SCMD_NOGOSSIP	./interpreter.h	112;"	d
SCMD_NOGRATZ	./interpreter.h	113;"	d
SCMD_NOHASSLE	./interpreter.h	106;"	d
SCMD_NOREPEAT	./interpreter.h	117;"	d
SCMD_NORTH	./interpreter.h	83;"	d
SCMD_NOSUMMON	./interpreter.h	105;"	d
SCMD_NOTELL	./interpreter.h	109;"	d
SCMD_NOTITLE	./interpreter.h	126;"	d
SCMD_NOWIZ	./interpreter.h	114;"	d
SCMD_OPEN	./interpreter.h	206;"	d
SCMD_PARDON	./interpreter.h	125;"	d
SCMD_PICK	./interpreter.h	210;"	d
SCMD_POLICIES	./interpreter.h	96;"	d
SCMD_POOFIN	./interpreter.h	183;"	d
SCMD_POOFOUT	./interpreter.h	184;"	d
SCMD_POUR	./interpreter.h	179;"	d
SCMD_QECHO	./interpreter.h	176;"	d
SCMD_QSAY	./interpreter.h	175;"	d
SCMD_QUAFF	./interpreter.h	198;"	d
SCMD_QUEST	./interpreter.h	115;"	d
SCMD_QUI	./interpreter.h	148;"	d
SCMD_QUIT	./interpreter.h	149;"	d
SCMD_READ	./interpreter.h	172;"	d
SCMD_RECITE	./interpreter.h	199;"	d
SCMD_REROLL	./interpreter.h	124;"	d
SCMD_ROOMFLAGS	./interpreter.h	116;"	d
SCMD_SHOUT	./interpreter.h	138;"	d
SCMD_SHUTDOW	./interpreter.h	144;"	d
SCMD_SHUTDOWN	./interpreter.h	145;"	d
SCMD_SIP	./interpreter.h	194;"	d
SCMD_SLOWNS	./interpreter.h	119;"	d
SCMD_SOCIALS	./interpreter.h	157;"	d
SCMD_SOUTH	./interpreter.h	85;"	d
SCMD_SQUELCH	./interpreter.h	127;"	d
SCMD_TASTE	./interpreter.h	192;"	d
SCMD_THAW	./interpreter.h	129;"	d
SCMD_TRACK	./interpreter.h	121;"	d
SCMD_TYPO	./interpreter.h	167;"	d
SCMD_UNAFFECT	./interpreter.h	130;"	d
SCMD_UNLOCK	./interpreter.h	208;"	d
SCMD_UP	./interpreter.h	87;"	d
SCMD_UPTIME	./interpreter.h	153;"	d
SCMD_USE	./interpreter.h	197;"	d
SCMD_VERSION	./interpreter.h	97;"	d
SCMD_WEST	./interpreter.h	86;"	d
SCMD_WHISPER	./interpreter.h	133;"	d
SCMD_WHOAMI	./interpreter.h	102;"	d
SCMD_WIZHELP	./interpreter.h	158;"	d
SCMD_WIZLIST	./interpreter.h	95;"	d
SE	./telnet.h	57;"	d
SECS_PER_MUD_DAY	./utils.h	121;"	d
SECS_PER_MUD_HOUR	./utils.h	120;"	d
SECS_PER_MUD_MONTH	./utils.h	122;"	d
SECS_PER_MUD_YEAR	./utils.h	123;"	d
SECS_PER_REAL_DAY	./utils.h	128;"	d
SECS_PER_REAL_HOUR	./utils.h	127;"	d
SECS_PER_REAL_MIN	./utils.h	126;"	d
SECS_PER_REAL_YEAR	./utils.h	129;"	d
SECT	./utils.h	241;"	d
SECT_CITY	./structs.h	102;"	d
SECT_FIELD	./structs.h	103;"	d
SECT_FLYING	./structs.h	109;"	d
SECT_FOREST	./structs.h	104;"	d
SECT_HILLS	./structs.h	105;"	d
SECT_INSIDE	./structs.h	101;"	d
SECT_MOUNTAIN	./structs.h	106;"	d
SECT_UNDERWATER	./structs.h	110;"	d
SECT_WATER_NOSWIM	./structs.h	108;"	d
SECT_WATER_SWIM	./structs.h	107;"	d
SEEK_CUR	./utils.h	517;"	d
SEEK_END	./utils.h	518;"	d
SEEK_SET	./utils.h	516;"	d
SELF	./utils.h	436;"	d
SENDOK	./comm.c	2375;"	d	file:
SET_BIT	./utils.h	185;"	d
SET_OR_REMOVE	./act.wizard.c	2105;"	d	file:
SET_SKILL	./utils.h	329;"	d
SEX_FEMALE	./structs.h	137;"	d
SEX_MALE	./structs.h	136;"	d
SEX_NEUTRAL	./structs.h	135;"	d
SHOP_BANK	./shop.h	108;"	d
SHOP_BITVECTOR	./shop.h	110;"	d
SHOP_BROKE_TEMPER	./shop.h	109;"	d
SHOP_BUYPROFIT	./shop.h	113;"	d
SHOP_BUYTYPE	./shop.h	105;"	d
SHOP_BUYWORD	./shop.h	106;"	d
SHOP_CLOSE1	./shop.h	101;"	d
SHOP_CLOSE2	./shop.h	103;"	d
SHOP_FUNC	./shop.h	115;"	d
SHOP_KEEPER	./shop.h	99;"	d
SHOP_KILL_CHARS	./shop.h	130;"	d
SHOP_NUM	./shop.h	98;"	d
SHOP_OPEN1	./shop.h	100;"	d
SHOP_OPEN2	./shop.h	102;"	d
SHOP_PRODUCT	./shop.h	107;"	d
SHOP_ROOM	./shop.h	104;"	d
SHOP_SELLPROFIT	./shop.h	114;"	d
SHOP_SORT	./shop.h	112;"	d
SHOP_TRADE_WITH	./shop.h	111;"	d
SHOP_USES_BANK	./shop.h	131;"	d
SHOW_OBJ_ACTION	./act.informative.c	96;"	d	file:
SHOW_OBJ_LONG	./act.informative.c	94;"	d	file:
SHOW_OBJ_SHORT	./act.informative.c	95;"	d	file:
SHP_PREFIX	./db.h	70;"	d
SIGALRM	./comm.c	22;"	d	file:
SIGPIPE	./comm.c	21;"	d	file:
SINFO	./spell_parser.c	25;"	d	file:
SKILL	./class.c	137;"	d	file:
SKILL_BACKSTAB	./spells.h	94;"	d
SKILL_BASH	./spells.h	95;"	d
SKILL_HIDE	./spells.h	96;"	d
SKILL_KICK	./spells.h	97;"	d
SKILL_PICK_LOCK	./spells.h	98;"	d
SKILL_RESCUE	./spells.h	100;"	d
SKILL_SNEAK	./spells.h	101;"	d
SKILL_STEAL	./spells.h	102;"	d
SKILL_TRACK	./spells.h	103;"	d
SKY_CLOUDLESS	./structs.h	428;"	d
SKY_CLOUDY	./structs.h	429;"	d
SKY_LIGHTNING	./structs.h	431;"	d
SKY_RAINING	./structs.h	430;"	d
SLASH	./db.h	29;"	d
SLASH	./db.h	40;"	d
SLC_ABORT	./telnet.h	187;"	d
SLC_ACK	./telnet.h	231;"	d
SLC_AO	./telnet.h	184;"	d
SLC_AYT	./telnet.h	185;"	d
SLC_BRK	./telnet.h	182;"	d
SLC_CANTCHANGE	./telnet.h	222;"	d
SLC_DEFAULT	./telnet.h	224;"	d
SLC_EC	./telnet.h	190;"	d
SLC_EL	./telnet.h	191;"	d
SLC_EOF	./telnet.h	188;"	d
SLC_EOR	./telnet.h	186;"	d
SLC_EW	./telnet.h	192;"	d
SLC_FLAGS	./telnet.h	228;"	d
SLC_FLUSHIN	./telnet.h	232;"	d
SLC_FLUSHOUT	./telnet.h	233;"	d
SLC_FORW1	./telnet.h	197;"	d
SLC_FORW2	./telnet.h	198;"	d
SLC_FUNC	./telnet.h	227;"	d
SLC_IP	./telnet.h	183;"	d
SLC_LEVELBITS	./telnet.h	225;"	d
SLC_LNEXT	./telnet.h	194;"	d
SLC_NAME	./telnet.h	219;"	d
SLC_NAMELIST	./telnet.h	206;"	d
SLC_NAMES	./telnet.h	215;"	d
SLC_NAME_OK	./telnet.h	218;"	d
SLC_NOSUPPORT	./telnet.h	221;"	d
SLC_RP	./telnet.h	193;"	d
SLC_SUSP	./telnet.h	189;"	d
SLC_SYNCH	./telnet.h	181;"	d
SLC_VALUE	./telnet.h	229;"	d
SLC_VARIABLE	./telnet.h	223;"	d
SLC_XOFF	./telnet.h	196;"	d
SLC_XON	./telnet.h	195;"	d
SMALL_BUFSIZE	./structs.h	491;"	d
SOCMESS_FILE	./db.h	90;"	d
SOUTH	./structs.h	67;"	d
SPECIAL	./boards.c	/^SPECIAL(gen_board)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(CastleGuard)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(DicknDavid)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(James)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(cleaning)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(jerry)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(king_welmar)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(peter)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(tim)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(tom)$/;"	f
SPECIAL	./castle.c	/^SPECIAL(training_master)$/;"	f
SPECIAL	./mail.c	/^SPECIAL(postmaster)$/;"	f
SPECIAL	./objsave.c	/^SPECIAL(cryogenicist)$/;"	f
SPECIAL	./objsave.c	/^SPECIAL(receptionist)$/;"	f
SPECIAL	./shop.c	/^SPECIAL(shop_keeper)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(bank)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(cityguard)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(dump)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(fido)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(guild)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(guild_guard)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(janitor)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(magic_user)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(mayor)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(pet_shops)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(puff)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(snake)$/;"	f
SPECIAL	./spec_procs.c	/^SPECIAL(thief)$/;"	f
SPECIAL	./structs.h	57;"	d
SPELL	./class.c	136;"	d	file:
SPELL_ACID_BREATH	./spells.h	119;"	d
SPELL_ANIMATE_DEAD	./spells.h	83;"	d
SPELL_ARMOR	./spells.h	39;"	d
SPELL_BLESS	./spells.h	41;"	d
SPELL_BLINDNESS	./spells.h	42;"	d
SPELL_BURNING_HANDS	./spells.h	43;"	d
SPELL_CALL_LIGHTNING	./spells.h	44;"	d
SPELL_CHARM	./spells.h	45;"	d
SPELL_CHILL_TOUCH	./spells.h	46;"	d
SPELL_CLONE	./spells.h	47;"	d
SPELL_COLOR_SPRAY	./spells.h	48;"	d
SPELL_CONTROL_WEATHER	./spells.h	49;"	d
SPELL_CREATE_FOOD	./spells.h	50;"	d
SPELL_CREATE_WATER	./spells.h	51;"	d
SPELL_CURE_BLIND	./spells.h	52;"	d
SPELL_CURE_CRITIC	./spells.h	53;"	d
SPELL_CURE_LIGHT	./spells.h	54;"	d
SPELL_CURSE	./spells.h	55;"	d
SPELL_DETECT_ALIGN	./spells.h	56;"	d
SPELL_DETECT_INVIS	./spells.h	57;"	d
SPELL_DETECT_MAGIC	./spells.h	58;"	d
SPELL_DETECT_POISON	./spells.h	59;"	d
SPELL_DISPEL_EVIL	./spells.h	60;"	d
SPELL_DISPEL_GOOD	./spells.h	84;"	d
SPELL_EARTHQUAKE	./spells.h	61;"	d
SPELL_ENCHANT_WEAPON	./spells.h	62;"	d
SPELL_ENERGY_DRAIN	./spells.h	63;"	d
SPELL_FIREBALL	./spells.h	64;"	d
SPELL_FIRE_BREATH	./spells.h	116;"	d
SPELL_FROST_BREATH	./spells.h	118;"	d
SPELL_GAS_BREATH	./spells.h	117;"	d
SPELL_GROUP_ARMOR	./spells.h	85;"	d
SPELL_GROUP_HEAL	./spells.h	86;"	d
SPELL_GROUP_RECALL	./spells.h	87;"	d
SPELL_HARM	./spells.h	65;"	d
SPELL_HEAL	./spells.h	66;"	d
SPELL_IDENTIFY	./spells.h	115;"	d
SPELL_INFRAVISION	./spells.h	88;"	d
SPELL_INVISIBLE	./spells.h	67;"	d
SPELL_LIGHTNING_BOLT	./spells.h	68;"	d
SPELL_LIGHTNING_BREATH	./spells.h	120;"	d
SPELL_LOCATE_OBJECT	./spells.h	69;"	d
SPELL_MAGIC_MISSILE	./spells.h	70;"	d
SPELL_POISON	./spells.h	71;"	d
SPELL_PROT_FROM_EVIL	./spells.h	72;"	d
SPELL_REMOVE_CURSE	./spells.h	73;"	d
SPELL_REMOVE_POISON	./spells.h	81;"	d
SPELL_RESERVED_DBC	./spells.h	35;"	d
SPELL_ROUTINES	./utils.h	209;"	d
SPELL_SANCTUARY	./spells.h	74;"	d
SPELL_SENSE_LIFE	./spells.h	82;"	d
SPELL_SHOCKING_GRASP	./spells.h	75;"	d
SPELL_SLEEP	./spells.h	76;"	d
SPELL_STRENGTH	./spells.h	77;"	d
SPELL_SUMMON	./spells.h	78;"	d
SPELL_TELEPORT	./spells.h	40;"	d
SPELL_TYPE_POTION	./spells.h	198;"	d
SPELL_TYPE_SCROLL	./spells.h	201;"	d
SPELL_TYPE_SPELL	./spells.h	197;"	d
SPELL_TYPE_STAFF	./spells.h	200;"	d
SPELL_TYPE_WAND	./spells.h	199;"	d
SPELL_VENTRILOQUATE	./spells.h	79;"	d
SPELL_WATERWALK	./spells.h	89;"	d
SPELL_WORD_OF_RECALL	./spells.h	80;"	d
SPLSKL	./spec_procs.c	120;"	d	file:
STAMP_PRICE	./mail.h	23;"	d
START_MESSG	./config.c	/^const char *START_MESSG =$/;"	v
STATE	./utils.h	371;"	d
STDC_HEADERS	./conf.h	26;"	d
STDERR_FILENO	./sysdep.h	416;"	d
STDOUT_FILENO	./sysdep.h	421;"	d
STRENGTH_APPLY_INDEX	./utils.h	341;"	d
SUF_ALIAS	./db.h	47;"	d
SUF_OBJS	./db.h	45;"	d
SUF_TEXT	./db.h	46;"	d
SUMMON_FAIL	./spells.c	103;"	d	file:
SUN_DARK	./structs.h	421;"	d
SUN_LIGHT	./structs.h	423;"	d
SUN_RISE	./structs.h	422;"	d
SUN_SET	./structs.h	424;"	d
SUSP	./telnet.h	60;"	d
SYNCH	./telnet.h	63;"	d
S_DATA	./shop.h	85;"	d
S_LEN	./shop.h	86;"	d
TAR_CHAR_ROOM	./spells.h	157;"	d
TAR_CHAR_WORLD	./spells.h	158;"	d
TAR_FIGHT_SELF	./spells.h	159;"	d
TAR_FIGHT_VICT	./spells.h	160;"	d
TAR_IGNORE	./spells.h	156;"	d
TAR_NOT_SELF	./spells.h	162;"	d
TAR_OBJ_EQUIP	./spells.h	166;"	d
TAR_OBJ_INV	./spells.h	163;"	d
TAR_OBJ_ROOM	./spells.h	164;"	d
TAR_OBJ_WORLD	./spells.h	165;"	d
TAR_SELF_ONLY	./spells.h	161;"	d
TELCMD	./telnet.h	79;"	d
TELCMD_FIRST	./telnet.h	75;"	d
TELCMD_LAST	./telnet.h	76;"	d
TELCMD_OK	./telnet.h	77;"	d
TELOPT	./telnet.h	143;"	d
TELOPT_3270REGIME	./telnet.h	111;"	d
TELOPT_AUTHENTICATION	./telnet.h	119;"	d
TELOPT_BINARY	./telnet.h	82;"	d
TELOPT_BM	./telnet.h	101;"	d
TELOPT_DET	./telnet.h	102;"	d
TELOPT_ECHO	./telnet.h	83;"	d
TELOPT_ENCRYPT	./telnet.h	120;"	d
TELOPT_EOR	./telnet.h	107;"	d
TELOPT_EXOPL	./telnet.h	122;"	d
TELOPT_FIRST	./telnet.h	140;"	d
TELOPT_LAST	./telnet.h	141;"	d
TELOPT_LFLOW	./telnet.h	115;"	d
TELOPT_LINEMODE	./telnet.h	116;"	d
TELOPT_LOGOUT	./telnet.h	100;"	d
TELOPT_NAMS	./telnet.h	86;"	d
TELOPT_NAOCRD	./telnet.h	92;"	d
TELOPT_NAOFFD	./telnet.h	95;"	d
TELOPT_NAOHTD	./telnet.h	94;"	d
TELOPT_NAOHTS	./telnet.h	93;"	d
TELOPT_NAOL	./telnet.h	90;"	d
TELOPT_NAOLFD	./telnet.h	98;"	d
TELOPT_NAOP	./telnet.h	91;"	d
TELOPT_NAOVTD	./telnet.h	97;"	d
TELOPT_NAOVTS	./telnet.h	96;"	d
TELOPT_NAWS	./telnet.h	113;"	d
TELOPT_NEW_ENVIRON	./telnet.h	121;"	d
TELOPT_OK	./telnet.h	142;"	d
TELOPT_OLD_ENVIRON	./telnet.h	118;"	d
TELOPT_OUTMRK	./telnet.h	109;"	d
TELOPT_RCP	./telnet.h	84;"	d
TELOPT_RCTE	./telnet.h	89;"	d
TELOPT_SGA	./telnet.h	85;"	d
TELOPT_SNDLOC	./telnet.h	105;"	d
TELOPT_STATUS	./telnet.h	87;"	d
TELOPT_SUPDUP	./telnet.h	103;"	d
TELOPT_SUPDUPOUTPUT	./telnet.h	104;"	d
TELOPT_TM	./telnet.h	88;"	d
TELOPT_TSPEED	./telnet.h	114;"	d
TELOPT_TTYLOC	./telnet.h	110;"	d
TELOPT_TTYPE	./telnet.h	106;"	d
TELOPT_TUID	./telnet.h	108;"	d
TELOPT_X3PAD	./telnet.h	112;"	d
TELOPT_XASCII	./telnet.h	99;"	d
TELOPT_XDISPLOC	./telnet.h	117;"	d
TELQUAL_INFO	./telnet.h	149;"	d
TELQUAL_IS	./telnet.h	147;"	d
TELQUAL_NAME	./telnet.h	151;"	d
TELQUAL_REPLY	./telnet.h	150;"	d
TELQUAL_SEND	./telnet.h	148;"	d
THIRST	./structs.h	417;"	d
TIME_FILE	./db.h	97;"	d
TIME_WITH_SYS_TIME	./conf.h	29;"	d
TOGGLE_BIT	./utils.h	187;"	d
TOGGLE_LOCK	./act.movement.c	324;"	d	file:
TOG_OFF	./act.other.c	842;"	d	file:
TOG_ON	./act.other.c	843;"	d	file:
TOP_SPELL_DEFINE	./spells.h	122;"	d
TOROOM	./graph.c	52;"	d	file:
TOROOM	./house.h	30;"	d
TO_CHAR	./comm.h	29;"	d
TO_NOTVICT	./comm.h	28;"	d
TO_ROOM	./comm.h	26;"	d
TO_SLEEP	./comm.h	30;"	d
TO_VICT	./comm.h	27;"	d
TRADE_NOCLERIC	./shop.h	75;"	d
TRADE_NOEVIL	./shop.h	72;"	d
TRADE_NOGOOD	./shop.h	71;"	d
TRADE_NOMAGIC_USER	./shop.h	74;"	d
TRADE_NONEUTRAL	./shop.h	73;"	d
TRADE_NOTHIEF	./shop.h	76;"	d
TRADE_NOWARRIOR	./shop.h	77;"	d
TRUE	./config.c	19;"	d	file:
TRUE	./utils.h	511;"	d
TYPE_BITE	./spells.h	132;"	d
TYPE_BLAST	./spells.h	140;"	d
TYPE_BLUDGEON	./spells.h	133;"	d
TYPE_CLAW	./spells.h	136;"	d
TYPE_CRUSH	./spells.h	134;"	d
TYPE_HIT	./spells.h	128;"	d
TYPE_MAUL	./spells.h	137;"	d
TYPE_PIERCE	./spells.h	139;"	d
TYPE_POUND	./spells.h	135;"	d
TYPE_PUNCH	./spells.h	141;"	d
TYPE_SLASH	./spells.h	131;"	d
TYPE_STAB	./spells.h	142;"	d
TYPE_STING	./spells.h	129;"	d
TYPE_SUFFERING	./spells.h	145;"	d
TYPE_THRASH	./spells.h	138;"	d
TYPE_UNDEFINED	./spells.h	34;"	d
TYPE_WHIP	./spells.h	130;"	d
TYPO_FILE	./db.h	87;"	d
UNLOCK_DOOR	./act.movement.c	321;"	d	file:
UNMARK	./graph.c	50;"	d	file:
UNSWITCH	./interpreter.c	1147;"	d	file:
UP	./structs.h	69;"	d
UPPER	./utils.h	139;"	d
USERS_FORMAT	./act.informative.c	1102;"	d	file:
USE_AUTOEQ	./structs.h	30;"	d
USURP	./interpreter.c	1146;"	d	file:
VALID_EDGE	./graph.c	/^int VALID_EDGE(room_rnum x, int y)$/;"	f
VALID_OBJ_RNUM	./utils.h	381;"	d
VALID_ROOM_RNUM	./utils.h	247;"	d
VANISH	./act.item.c	444;"	d	file:
VERSION3_TAG	./shop.h	48;"	d
VIRTUAL	./db.h	137;"	d
Valid_Name	./ban.c	/^int Valid_Name(char *newname)$/;"	f
WAIT_STATE	./utils.h	361;"	d
WEAR_ABOUT	./structs.h	280;"	d
WEAR_ARMS	./structs.h	278;"	d
WEAR_BODY	./structs.h	273;"	d
WEAR_FEET	./structs.h	276;"	d
WEAR_FINGER_L	./structs.h	270;"	d
WEAR_FINGER_R	./structs.h	269;"	d
WEAR_HANDS	./structs.h	277;"	d
WEAR_HEAD	./structs.h	274;"	d
WEAR_HOLD	./structs.h	285;"	d
WEAR_LEGS	./structs.h	275;"	d
WEAR_LIGHT	./structs.h	268;"	d
WEAR_NECK_1	./structs.h	271;"	d
WEAR_NECK_2	./structs.h	272;"	d
WEAR_SHIELD	./structs.h	279;"	d
WEAR_WAIST	./structs.h	281;"	d
WEAR_WIELD	./structs.h	284;"	d
WEAR_WRIST_L	./structs.h	283;"	d
WEAR_WRIST_R	./structs.h	282;"	d
WELC_MESSG	./config.c	/^const char *WELC_MESSG =$/;"	v
WEST	./structs.h	68;"	d
WHO_FORMAT	./act.informative.c	955;"	d	file:
WILL	./telnet.h	46;"	d
WILL_BANK_MONEY	./shop.h	128;"	d
WILL_START_FIGHT	./shop.h	127;"	d
WIZLIST_FILE	./db.h	80;"	d
WLD_PREFIX	./db.h	66;"	d
WONT	./telnet.h	45;"	d
WRITE_LVL	./boards.h	38;"	d
XNAME_FILE	./db.h	91;"	d
YES	./config.c	20;"	d	file:
YESNO	./utils.h	135;"	d
Z	./db.c	1549;"	d	file:
Z	./db.c	1651;"	d	file:
ZCMD	./db.c	1050;"	d	file:
ZONE_ERROR	./db.c	1957;"	d	file:
ZON_PREFIX	./db.h	69;"	d
ZO_DEAD	./db.c	1878;"	d	file:
Z_KINGS_C	./castle.c	31;"	d	file:
_ARPA_TELNET_H	./telnet.h	37;"	d
_BSD_SNPRINTF_H	./bsd-snprintf.h	41;"	d
_CIRCLEMUD	./structs.h	20;"	d
_POSIX_C_SOURCE	./sysdep.h	293;"	d
_POSIX_C_SOURCE	./sysdep.h	295;"	d
__ACT_OTHER_C__	./act.other.c	11;"	d	file:
__COMM_C__	./comm.c	11;"	d	file:
__CONFIG_C__	./config.c	11;"	d	file:
__DB_C__	./db.c	11;"	d	file:
__INTERPRETER_C__	./interpreter.c	11;"	d	file:
__attribute__	./sysdep.h	339;"	d
_clrlevel	./screen.h	26;"	d
_parse_name	./interpreter.c	/^int _parse_name(char *arg, char *name)$/;"	f
_write_one_node	./ban.c	/^void _write_one_node(FILE *fp, struct ban_list_element *node)$/;"	f
a	./random.c	48;"	d	file:
a_type	./structs.h	/^   int	a_type;			\/* Attack type				*\/$/;"	m	struct:message_list
abilities	./structs.h	/^   struct char_ability_data abilities;$/;"	m	struct:char_file_u	typeref:struct:char_file_u::char_ability_data
abs_val	./bsd-snprintf.c	155;"	d	file:
account	./structs.h	/^   int	account;$/;"	m	struct:rent_info
act	./comm.c	/^void act(const char *str, int hide_invisible, struct char_data *ch,$/;"	f
act	./structs.h	/^   long \/*bitvector_t*\/ act;	\/* act flag for NPC's; player flag for PC's *\/$/;"	m	struct:char_special_data_saved
act_nr	./act.social.c	/^  int act_nr;$/;"	m	struct:social_messg	file:
action_bits	./constants.c	/^const char *action_bits[] = {$/;"	v
action_bits_count	./constants.c	/^	action_bits_count = sizeof(action_bits) \/ sizeof(action_bits[0]) - 1,$/;"	v
action_description	./structs.h	/^   char	*action_description;      \/* What to write when used          *\/$/;"	m	struct:obj_data
add_follower	./utils.c	/^void add_follower(struct char_data *ch, struct char_data *leader)$/;"	f
add_to_list	./shop.c	/^int add_to_list(struct shop_buy_data *list, int type, int *len, int *val)$/;"	f
advance_level	./class.c	/^void advance_level(struct char_data *ch)$/;"	f
aff_abils	./structs.h	/^   struct char_ability_data aff_abils;	 \/* Abils with spells\/stones\/etc  *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_ability_data
affect_from_char	./handler.c	/^void affect_from_char(struct char_data *ch, int type)$/;"	f
affect_join	./handler.c	/^void affect_join(struct char_data *ch, struct affected_type *af,$/;"	f
affect_modify	./handler.c	/^void affect_modify(struct char_data *ch, byte loc, sbyte mod, $/;"	f
affect_remove	./handler.c	/^void affect_remove(struct char_data *ch, struct affected_type *af)$/;"	f
affect_to_char	./handler.c	/^void affect_to_char(struct char_data *ch, struct affected_type *af)$/;"	f
affect_total	./handler.c	/^void affect_total(struct char_data *ch)$/;"	f
affect_update	./magic.c	/^void affect_update(void)$/;"	f
affected	./structs.h	/^   struct affected_type *affected;       \/* affected by what spells       *\/$/;"	m	struct:char_data	typeref:struct:char_data::affected_type
affected	./structs.h	/^   struct affected_type affected[MAX_AFFECT];$/;"	m	struct:char_file_u	typeref:struct:char_file_u::affected_type
affected	./structs.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];  \/* affects *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::obj_affected_type
affected	./structs.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];$/;"	m	struct:obj_file_elem	typeref:struct:obj_file_elem::obj_affected_type
affected_bits	./constants.c	/^const char *affected_bits[] =$/;"	v
affected_bits_count	./constants.c	/^	affected_bits_count = sizeof(affected_bits) \/ sizeof(affected_bits[0]) - 1,$/;"	v
affected_by	./structs.h	/^   long \/*bitvector_t*\/	affected_by;$/;"	m	struct:char_special_data_saved
affected_by_spell	./handler.c	/^bool affected_by_spell(struct char_data *ch, int type)$/;"	f
affected_type	./structs.h	/^struct affected_type {$/;"	s
age	./db.h	/^   int	age;                \/* current age of this zone (minutes) *\/$/;"	m	struct:zone_data
age	./utils.c	/^struct time_info_data *age(struct char_data *ch)$/;"	f
aggressive_mob_on_a_leash	./mobact.c	/^bool aggressive_mob_on_a_leash(struct char_data *slave, struct char_data *master, struct char_data *attack)$/;"	f
alias	./interpreter.h	/^  char *alias;$/;"	m	struct:alias_data
alias_data	./interpreter.h	/^struct alias_data {$/;"	s
aliased	./structs.h	/^   int aliased;$/;"	m	struct:txt_block
aliases	./structs.h	/^   struct alias_data *aliases;	\/* Character's aliases			*\/$/;"	m	struct:player_special_data	typeref:struct:player_special_data::alias_data
alignment	./structs.h	/^   int	alignment;		\/* +-1000 for alignments                *\/$/;"	m	struct:char_special_data_saved
another_hour	./weather.c	/^void another_hour(int mode)$/;"	f
any_one_arg	./interpreter.c	/^char *any_one_arg(char *argument, char *first_arg)$/;"	f
appear	./fight.c	/^void appear(struct char_data *ch)$/;"	f
apply_ac	./handler.c	/^int apply_ac(struct char_data *ch, int eq_pos)$/;"	f
apply_saving_throw	./structs.h	/^   sh_int apply_saving_throw[5]; \/* Saving throw (Bonuses)		*\/$/;"	m	struct:char_special_data_saved
apply_types	./constants.c	/^const char *apply_types[] = {$/;"	v
arg1	./db.h	/^   int	arg1;		\/*                                      *\/$/;"	m	struct:reset_com
arg2	./db.h	/^   int	arg2;		\/* Arguments to the command             *\/$/;"	m	struct:reset_com
arg3	./db.h	/^   int	arg3;		\/*                                      *\/$/;"	m	struct:reset_com
argument_interpreter	./interpreter.h	37;"	d
armor	./structs.h	/^   sh_int armor;        \/* Internal -100..100, external -10..10 AC *\/$/;"	m	struct:char_point_data
asciiflag_conv	./db.c	/^bitvector_t asciiflag_conv(char *flag)$/;"	f
assert	./sysdep.h	241;"	d
assign_kings_castle	./castle.c	/^void assign_kings_castle(void)$/;"	f
assign_mobiles	./spec_assign.c	/^void assign_mobiles(void)$/;"	f
assign_objects	./spec_assign.c	/^void assign_objects(void)$/;"	f
assign_rooms	./spec_assign.c	/^void assign_rooms(void)$/;"	f
assign_the_shopkeepers	./shop.c	/^void assign_the_shopkeepers(void)$/;"	f
atrium	./house.h	/^   room_vnum atrium;		\/* vnum of atrium		*\/$/;"	m	struct:house_control_rec
attack_hit_text	./fight.c	/^struct attack_hit_type attack_hit_text[] =$/;"	v	typeref:struct:attack_hit_type
attack_hit_type	./spells.h	/^struct attack_hit_type {$/;"	s
attack_type	./structs.h	/^   byte	attack_type;        \/* The Attack Type Bitvector for NPC's     *\/$/;"	m	struct:mob_special_data
attacker_msg	./structs.h	/^   char	*attacker_msg;  \/* message to attacker *\/$/;"	m	struct:msg_type
authtype_names	./telnet.h	/^char *authtype_names[] = {$/;"	v
auto_equip	./objsave.c	/^void auto_equip(struct char_data *ch, struct obj_data *obj, int location)$/;"	f
auto_save	./config.c	/^int auto_save = YES;$/;"	v
autosave_time	./config.c	/^int autosave_time = 5;$/;"	v
background	./db.c	/^char *background = NULL;	\/* background story		 *\/$/;"	v
backstab_mult	./class.c	/^int backstab_mult(int level)$/;"	f
bad_pws	./structs.h	/^   byte	bad_pws;		\/* number of bad pw attemps this login	*\/$/;"	m	struct:descriptor_data
bad_pws	./structs.h	/^   ubyte bad_pws;		\/* number of bad password attemps	*\/$/;"	m	struct:player_special_data_saved
ban_list	./ban.c	/^struct ban_list_element *ban_list = NULL;$/;"	v	typeref:struct:ban_list_element
ban_list_element	./db.h	/^struct ban_list_element {$/;"	s
ban_types	./ban.c	/^const char *ban_types[] = {$/;"	v
bank	./spec_assign.c	/^SPECIAL(bank);$/;"	v
bank	./spec_procs.c	/^SPECIAL(bank);$/;"	v
bankAccount	./shop.h	/^   int	 bankAccount;		\/* Store all gold over 15000 (disabled)	*\/$/;"	m	struct:shop_data
bank_gold	./structs.h	/^   int	bank_gold;	\/* Gold the char has in a bank account	   *\/$/;"	m	struct:char_point_data
banzaii	./castle.c	/^int banzaii(struct char_data *ch)$/;"	f
basic_mud_log	./utils.c	/^void basic_mud_log(const char *format, ...)$/;"	f
basic_mud_vlog	./utils.c	/^void basic_mud_vlog(const char *format, va_list args)$/;"	f
bfs_clear_queue	./graph.c	/^void bfs_clear_queue(void)$/;"	f
bfs_dequeue	./graph.c	/^void bfs_dequeue(void)$/;"	f
bfs_enqueue	./graph.c	/^void bfs_enqueue(room_rnum room, int dir)$/;"	f
bfs_queue_struct	./graph.c	/^struct bfs_queue_struct {$/;"	s	file:
birth	./structs.h	/^   time_t birth;    \/* This represents the characters age                *\/$/;"	m	struct:time_data
birth	./structs.h	/^   time_t birth;   \/* Time of birth of character     *\/$/;"	m	struct:char_file_u
bitvector	./shop.h	/^   bitvector_t	 bitvector;	\/* Can attack? Use bank? Cast here?	*\/$/;"	m	struct:shop_data
bitvector	./structs.h	/^   long \/*bitvector_t*\/	bitvector;	\/* To set chars bits                *\/$/;"	m	struct:obj_flag_data
bitvector	./structs.h	/^   long \/*bitvector_t*\/	bitvector; \/* Tells which bits to set (AFF_XXX) *\/$/;"	m	struct:affected_type
bitvector	./structs.h	/^   long \/*bitvector_t*\/	bitvector;$/;"	m	struct:obj_file_elem
bitvector_t	./structs.h	/^typedef unsigned long int	bitvector_t;$/;"	t
block_type	./mail.h	/^   long	block_type;		\/* -1 if header block, -2 if last data block$/;"	m	struct:data_block_type_d
block_type	./mail.h	/^   long	block_type;		\/* is this a header or data block?	*\/$/;"	m	struct:header_block_type_d
block_way	./castle.c	/^int block_way(struct char_data *ch, int cmd, char *arg, room_vnum iIn_room,$/;"	f
board_info	./boards.c	/^struct board_info_type board_info[NUM_OF_BOARDS] = {$/;"	v	typeref:struct:board_info_type
board_info_type	./boards.h	/^struct board_info_type {$/;"	s
board_msginfo	./boards.h	/^struct board_msginfo {$/;"	s
bonus	./structs.h	/^   byte bonus;       \/* how many practices player gains per lev *\/$/;"	m	struct:wis_app_type
bool	./structs.h	/^typedef char			bool;$/;"	t
boot_db	./db.c	/^void boot_db(void)$/;"	f
boot_social_messages	./act.social.c	/^void boot_social_messages(void)$/;"	f
boot_the_shops	./shop.c	/^void boot_the_shops(FILE *shop_f, char *filename, int rec_count)$/;"	f
boot_time	./db.c	/^time_t boot_time = 0;		\/* time of mud boot		 *\/$/;"	v
boot_world	./db.c	/^void boot_world(void)$/;"	f
bot	./db.h	/^   room_vnum bot;           \/* starting room number for this zone *\/$/;"	m	struct:zone_data
buf_largecount	./comm.c	/^int buf_largecount = 0;		\/* # of large buffers which exist *\/$/;"	v
buf_overflows	./comm.c	/^int buf_overflows = 0;		\/* # of overflows of output *\/$/;"	v
buf_switches	./comm.c	/^int buf_switches = 0;		\/* # of switches from small to large buf *\/$/;"	v
bufpool	./comm.c	/^struct txt_block *bufpool = 0;	\/* pool of large output buffers *\/$/;"	v	typeref:struct:txt_block
bufptr	./structs.h	/^   int  bufptr;			\/* ptr to end of current output		*\/$/;"	m	struct:descriptor_data
bufspace	./structs.h	/^   int	bufspace;		\/* space left in the output buffer	*\/$/;"	m	struct:descriptor_data
build_player_index	./db.c	/^void build_player_index(void)$/;"	f
built_on	./house.h	/^   time_t built_on;		\/* date this house was built	*\/$/;"	m	struct:house_control_rec
buy_price	./shop.c	/^int buy_price(struct obj_data *obj, int shop_nr, struct char_data *keeper, struct char_data *buyer)$/;"	f
byte	./structs.h	/^typedef signed char			byte;$/;"	t
call_magic	./spell_parser.c	/^int call_magic(struct char_data *caster, struct char_data *cvict,$/;"	f
can_modify	./olc.c	/^int can_modify(struct char_data *ch, int vnum)$/;"	f
can_take_obj	./act.item.c	/^int can_take_obj(struct char_data *ch, struct obj_data *obj)$/;"	f
carried_by	./structs.h	/^   struct char_data *carried_by;  \/* Carried by :NULL in room\/conta   *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::char_data
carry_items	./structs.h	/^   byte carry_items;		\/* Number of items carried		*\/$/;"	m	struct:char_special_data
carry_w	./structs.h	/^   sh_int carry_w;  \/* Maximum weight that can be carrried *\/$/;"	m	struct:str_app_type
carry_weight	./structs.h	/^   int	carry_weight;		\/* Carried weight			*\/$/;"	m	struct:char_special_data
carrying	./structs.h	/^   struct obj_data *carrying;            \/* Head of list                  *\/$/;"	m	struct:char_data	typeref:struct:char_data::obj_data
cast_spell	./spell_parser.c	/^int cast_spell(struct char_data *ch, struct char_data *tch,$/;"	f
castle_cleaner	./castle.c	/^int castle_cleaner(struct char_data *ch, int cmd, int gripe)$/;"	f
castle_mob_spec	./castle.c	/^void castle_mob_spec(mob_vnum mobnum, SPECIAL(*specproc))$/;"	f
castle_real_room	./castle.c	/^room_rnum castle_real_room(room_vnum roomoffset)$/;"	f
castle_twin_proc	./castle.c	/^int castle_twin_proc(struct char_data *ch, int cmd, char *arg, int ctlnum, const char *twinname)$/;"	f
castle_virtual	./castle.c	/^mob_vnum castle_virtual(mob_vnum offset)$/;"	f
cha	./structs.h	/^   sbyte cha;$/;"	m	struct:char_ability_data
change	./structs.h	/^   int	change;	\/* How fast and what way does it change. *\/$/;"	m	struct:weather_data
change_alignment	./fight.c	/^void change_alignment(struct char_data *ch, struct char_data *victim)$/;"	f
char_ability_data	./structs.h	/^struct char_ability_data {$/;"	s
char_auto	./act.social.c	/^  char *char_auto;$/;"	m	struct:social_messg	file:
char_data	./structs.h	/^struct char_data {$/;"	s
char_file_u	./structs.h	/^struct char_file_u {$/;"	s
char_found	./act.social.c	/^  char *char_found;		\/* if NULL, read no further, ignore args *\/$/;"	m	struct:social_messg	file:
char_from_room	./handler.c	/^void char_from_room(struct char_data *ch)$/;"	f
char_no_arg	./act.social.c	/^  char *char_no_arg;$/;"	m	struct:social_messg	file:
char_player_data	./structs.h	/^struct char_player_data {$/;"	s
char_point_data	./structs.h	/^struct char_point_data {$/;"	s
char_special_data	./structs.h	/^struct char_special_data {$/;"	s
char_special_data_saved	./structs.h	/^struct char_special_data_saved {$/;"	s
char_specials	./structs.h	/^   struct char_special_data char_specials;	\/* PC\/NPC specials	  *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_special_data
char_specials_saved	./structs.h	/^   struct char_special_data_saved char_specials_saved;$/;"	m	struct:char_file_u	typeref:struct:char_file_u::char_special_data_saved
char_to_int	./bsd-snprintf.c	154;"	d	file:
char_to_room	./handler.c	/^void char_to_room(struct char_data *ch, room_rnum room)$/;"	f
char_to_store	./db.c	/^void char_to_store(struct char_data *ch, struct char_file_u *st)$/;"	f
character	./structs.h	/^   struct char_data *character;	\/* linked to char			*\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::char_data
character_list	./db.c	/^struct char_data *character_list = NULL;	\/* global linked list of$/;"	v	typeref:struct:char_data
chclass	./structs.h	/^   byte chclass;       \/* PC \/ NPC's class		       *\/$/;"	m	struct:char_player_data
chclass	./structs.h	/^   byte chclass;$/;"	m	struct:char_file_u
chdir	./sysdep.h	355;"	d
check_bitvector_names	./db.c	/^int check_bitvector_names(bitvector_t bits, size_t namecount, const char *whatami, const char *whatbits)$/;"	f
check_idle_passwords	./comm.c	/^void check_idle_passwords(void)$/;"	f
check_idling	./limits.c	/^void check_idling(struct char_data *ch)$/;"	f
check_killer	./fight.c	/^void check_killer(struct char_data *ch, struct char_data *vict)$/;"	f
check_object	./db.c	/^int check_object(struct obj_data *obj)$/;"	f
check_object_level	./db.c	/^int check_object_level(struct obj_data *obj, int val)$/;"	f
check_object_spell_number	./db.c	/^int check_object_spell_number(struct obj_data *obj, int val)$/;"	f
check_start_rooms	./db.c	/^void check_start_rooms(void)$/;"	f
checkpointing	./comm.c	/^RETSIGTYPE checkpointing(int sig)$/;"	f
circle_follow	./utils.c	/^bool circle_follow(struct char_data *ch, struct char_data *victim)$/;"	f
circle_random	./random.c	/^unsigned long circle_random(void)$/;"	f
circle_reboot	./comm.c	/^int circle_reboot = 0;		\/* reboot the game after a shutdown *\/$/;"	v
circle_restrict	./db.c	/^int circle_restrict = 0;	\/* level of game restriction	 *\/$/;"	v
circle_shutdown	./comm.c	/^int circle_shutdown = 0;	\/* clean shutdown *\/$/;"	v
circle_sleep	./comm.c	/^void circle_sleep(struct timeval *timeout)$/;"	f
circle_srandom	./random.c	/^void circle_srandom(unsigned long initial_seed)$/;"	f
circlemud_version	./constants.c	/^cpp_extern const char *circlemud_version =$/;"	v
cityguard	./spec_assign.c	/^SPECIAL(cityguard);$/;"	v
cityguard	./spec_procs.c	/^SPECIAL(cityguard);$/;"	v
class_abbrevs	./class.c	/^const char *class_abbrevs[] = {$/;"	v
class_menu	./class.c	/^const char *class_menu =$/;"	v
cleaning	./castle.c	/^SPECIAL(cleaning);$/;"	v
clearMemory	./mobact.c	/^void clearMemory(struct char_data *ch)$/;"	f
clear_char	./db.c	/^void clear_char(struct char_data *ch)$/;"	f
clear_free_list	./mail.c	/^void clear_free_list(void)$/;"	f
clear_object	./db.c	/^void clear_object(struct obj_data *obj)$/;"	f
close1	./shop.h	/^   int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close2	./shop.h	/^   int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close_socket	./comm.c	/^void close_socket(struct descriptor_data *d)$/;"	f
clr	./screen.h	28;"	d
cmd	./act.wizard.c	/^    const char *cmd;$/;"	m	struct:set_struct	file:
cmd	./db.h	/^   struct reset_com *cmd;   \/* command table for reset	          *\/$/;"	m	struct:zone_data	typeref:struct:zone_data::reset_com
cmd_door	./act.movement.c	/^const char *cmd_door[] =$/;"	v
cmd_emote	./shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_info	./interpreter.c	/^cpp_extern const struct command_info cmd_info[] = {$/;"	v	typeref:struct:command_info
cmd_puke	./shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_say	./shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_slap	./shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_sort_info	./act.informative.c	/^int *cmd_sort_info;$/;"	v
cmd_tell	./shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
color_liquid	./constants.c	/^const char *color_liquid[] =$/;"	v
combat_list	./fight.c	/^struct char_data *combat_list = NULL;	\/* head of l-list of fighting chars *\/$/;"	v	typeref:struct:char_data
command	./db.h	/^   char	command;   \/* current command                      *\/$/;"	m	struct:reset_com
command	./interpreter.h	/^   const char *command;$/;"	m	struct:command_info
command_info	./interpreter.h	/^struct command_info {$/;"	s
command_interpreter	./interpreter.c	/^void command_interpreter(struct char_data *ch, char *argument)$/;"	f
command_pointer	./interpreter.h	/^   void	(*command_pointer)$/;"	m	struct:command_info
compare_spells	./spec_procs.c	/^int compare_spells(const void *x, const void *y)$/;"	f
compute_armor_class	./fight.c	/^int compute_armor_class(struct char_data *ch)$/;"	f
compute_thaco	./fight.c	/^int compute_thaco(struct char_data *ch, struct char_data *victim)$/;"	f
con	./structs.h	/^   sbyte con;$/;"	m	struct:char_ability_data
con_app	./constants.c	/^cpp_extern const struct con_app_type con_app[] = {$/;"	v	typeref:struct:con_app_type
con_app_type	./structs.h	/^struct con_app_type {$/;"	s
conditions	./structs.h	/^   sbyte conditions[3];         \/* Drunk, full, thirsty			*\/$/;"	m	struct:player_special_data_saved
connected	./structs.h	/^   int	connected;		\/* mode of 'connectedness'		*\/$/;"	m	struct:descriptor_data
connected_types	./constants.c	/^const char *connected_types[] = {$/;"	v
container_bits	./constants.c	/^const char *container_bits[] = {$/;"	v
contains	./structs.h	/^   struct obj_data *contains;     \/* Contains objects                 *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::obj_data
contents	./structs.h	/^   struct obj_data *contents;   \/* List of items in room              *\/$/;"	m	struct:room_data	typeref:struct:room_data::obj_data
core_dump	./utils.h	39;"	d
core_dump_real	./utils.c	/^void core_dump_real(const char *who, int line)$/;"	f
cost	./structs.h	/^   int	cost;		\/* Value when sold (gp.)            *\/$/;"	m	struct:obj_flag_data
cost_per_day	./structs.h	/^   int	cost_per_day;	\/* Cost to keep pr. real day        *\/$/;"	m	struct:obj_flag_data
count_alias_records	./db.c	/^int count_alias_records(FILE *fl)$/;"	f
count_hash_records	./db.c	/^int count_hash_records(FILE *fl)$/;"	f
count_pages	./modify.c	/^int count_pages(char *str)$/;"	f
cpp_extern	./sysdep.h	400;"	d
cpp_extern	./sysdep.h	402;"	d
crash_file_timeout	./config.c	/^int crash_file_timeout = 10;$/;"	v
create_char	./db.c	/^struct char_data *create_char(void)$/;"	f
create_entry	./db.c	/^int create_entry(char *name)$/;"	f
create_money	./handler.c	/^struct obj_data *create_money(int amount)$/;"	f
create_obj	./db.c	/^struct obj_data *create_obj(void)$/;"	f
credits	./db.c	/^char *credits = NULL;		\/* game credits			 *\/$/;"	v
cryogenicist	./objsave.c	/^SPECIAL(cryogenicist);$/;"	v
cryogenicist	./spec_assign.c	/^SPECIAL(cryogenicist);$/;"	v
ctypes	./act.informative.c	/^const char *ctypes[] = {$/;"	v
customer_string	./shop.c	/^char *customer_string(int shop_nr, int detailed)$/;"	f
dam_message	./fight.c	/^void dam_message(int dam, struct char_data *ch, struct char_data *victim,$/;"	f
damage	./fight.c	/^int damage(struct char_data *ch, struct char_data *victim, int dam, int attacktype)$/;"	f
damnodice	./structs.h	/^   byte damnodice;          \/* The number of damage dice's	       *\/$/;"	m	struct:mob_special_data
damroll	./structs.h	/^   sbyte damroll;       \/* Any bonus or penalty to the damage roll *\/$/;"	m	struct:char_point_data
damsizedice	./structs.h	/^   byte damsizedice;        \/* The size of the damage dice's           *\/$/;"	m	struct:mob_special_data
data	./shop.h	/^   int data[100];$/;"	m	struct:stack_data
data_block_type	./mail.h	/^typedef struct data_block_type_d data_block_type;$/;"	t	typeref:struct:data_block_type_d
data_block_type_d	./mail.h	/^struct data_block_type_d {$/;"	s
date	./db.h	/^   time_t date;$/;"	m	struct:ban_list_element
day	./structs.h	/^   int hours, day, month;$/;"	m	struct:time_info_data
death_cry	./fight.c	/^void death_cry(struct char_data *ch)$/;"	f
default_pos	./structs.h	/^   byte default_pos;        \/* Default position for NPC                *\/$/;"	m	struct:mob_special_data
defensive	./structs.h	/^   sh_int defensive;$/;"	m	struct:dex_app_type
delete_aliases	./alias.c	/^void delete_aliases(const char *charname)$/;"	f
delete_doubledollar	./interpreter.c	/^char *delete_doubledollar(char *string)$/;"	f
desc	./structs.h	/^   struct descriptor_data *desc;         \/* NULL for mobiles              *\/$/;"	m	struct:char_data	typeref:struct:char_data::descriptor_data
desc_num	./structs.h	/^   int	desc_num;		\/* unique num assigned to desc		*\/$/;"	m	struct:descriptor_data
description	./structs.h	/^   char	*description;		  \/* When in room                     *\/$/;"	m	struct:obj_data
description	./structs.h	/^   char	*description;             \/* What to see                      *\/$/;"	m	struct:extra_descr_data
description	./structs.h	/^   char	*description;           \/* Shown when entered                 *\/$/;"	m	struct:room_data
description	./structs.h	/^   char	*description;  \/* Extra descriptions                   *\/$/;"	m	struct:char_player_data
description	./structs.h	/^   char	description[EXDSCR_LENGTH];$/;"	m	struct:char_file_u
descriptor	./structs.h	/^   socket_t	descriptor;	\/* file descriptor for socket		*\/$/;"	m	struct:descriptor_data
descriptor_data	./structs.h	/^struct descriptor_data {$/;"	s
descriptor_list	./comm.c	/^struct descriptor_data *descriptor_list = NULL;		\/* master desc list *\/$/;"	v	typeref:struct:descriptor_data
destroy_db	./db.c	/^void destroy_db(void)$/;"	f
destroy_shops	./shop.c	/^void destroy_shops(void)$/;"	f
dex	./structs.h	/^   sbyte dex;$/;"	m	struct:char_ability_data
dex_app	./constants.c	/^cpp_extern const struct dex_app_type dex_app[] = {$/;"	v	typeref:struct:dex_app_type
dex_app_skill	./constants.c	/^cpp_extern const struct dex_skill_type dex_app_skill[] = {$/;"	v	typeref:struct:dex_skill_type
dex_app_type	./structs.h	/^struct dex_app_type {$/;"	s
dex_skill_type	./structs.h	/^struct dex_skill_type {$/;"	s
diag_char_to_char	./act.informative.c	/^void diag_char_to_char(struct char_data *i, struct char_data *ch)$/;"	f
dice	./utils.c	/^int dice(int num, int size)$/;"	f
die	./fight.c	/^void die(struct char_data *ch)$/;"	f
die_follower	./utils.c	/^void die_follower(struct char_data *ch)$/;"	f
die_msg	./structs.h	/^   struct msg_type die_msg;	\/* messages when death			*\/$/;"	m	struct:message_type	typeref:struct:message_type::msg_type
dir	./graph.c	/^  char dir;$/;"	m	struct:bfs_queue_struct	file:
dir_option	./structs.h	/^   struct room_direction_data *dir_option[NUM_OF_DIRS]; \/* Directions *\/$/;"	m	struct:room_data	typeref:struct:room_data::room_direction_data
direction	./structs.h	/^  int direction;$/;"	m	struct:guild_info_type
dirs	./constants.c	/^const char *dirs[] =$/;"	v
discrete_load	./db.c	/^void discrete_load(FILE *fl, int mode, char *filename)$/;"	f
do_action	./act.informative.c	/^ACMD(do_action);$/;"	v
do_action	./act.social.c	/^ACMD(do_action);$/;"	v
do_action	./interpreter.c	/^ACMD(do_action);$/;"	v
do_action	./mobact.c	/^ACMD(do_action);$/;"	v
do_action	./objsave.c	/^ACMD(do_action);$/;"	v
do_action	./shop.c	/^ACMD(do_action);$/;"	v
do_action	./spec_procs.c	/^ACMD(do_action);$/;"	v
do_advance	./act.wizard.c	/^ACMD(do_advance);$/;"	v
do_advance	./interpreter.c	/^ACMD(do_advance);$/;"	v
do_alias	./interpreter.c	/^ACMD(do_alias);$/;"	v
do_assist	./act.offensive.c	/^ACMD(do_assist);$/;"	v
do_assist	./interpreter.c	/^ACMD(do_assist);$/;"	v
do_at	./act.wizard.c	/^ACMD(do_at);$/;"	v
do_at	./interpreter.c	/^ACMD(do_at);$/;"	v
do_auto_exits	./act.informative.c	/^void do_auto_exits(struct char_data *ch)$/;"	f
do_backstab	./act.offensive.c	/^ACMD(do_backstab);$/;"	v
do_backstab	./interpreter.c	/^ACMD(do_backstab);$/;"	v
do_ban	./ban.c	/^ACMD(do_ban);$/;"	v
do_ban	./interpreter.c	/^ACMD(do_ban);$/;"	v
do_bash	./act.offensive.c	/^ACMD(do_bash);$/;"	v
do_bash	./interpreter.c	/^ACMD(do_bash);$/;"	v
do_cast	./interpreter.c	/^ACMD(do_cast);$/;"	v
do_cast	./spell_parser.c	/^ACMD(do_cast);$/;"	v
do_color	./act.informative.c	/^ACMD(do_color);$/;"	v
do_color	./interpreter.c	/^ACMD(do_color);$/;"	v
do_commands	./act.informative.c	/^ACMD(do_commands);$/;"	v
do_commands	./interpreter.c	/^ACMD(do_commands);$/;"	v
do_consider	./act.informative.c	/^ACMD(do_consider);$/;"	v
do_consider	./interpreter.c	/^ACMD(do_consider);$/;"	v
do_credits	./interpreter.c	/^ACMD(do_credits);$/;"	v
do_date	./act.wizard.c	/^ACMD(do_date);$/;"	v
do_date	./interpreter.c	/^ACMD(do_date);$/;"	v
do_dc	./act.wizard.c	/^ACMD(do_dc);$/;"	v
do_dc	./interpreter.c	/^ACMD(do_dc);$/;"	v
do_diagnose	./act.informative.c	/^ACMD(do_diagnose);$/;"	v
do_diagnose	./interpreter.c	/^ACMD(do_diagnose);$/;"	v
do_display	./act.other.c	/^ACMD(do_display);$/;"	v
do_display	./interpreter.c	/^ACMD(do_display);$/;"	v
do_doorcmd	./act.movement.c	/^void do_doorcmd(struct char_data *ch, struct obj_data *obj, int door, int scmd)$/;"	f
do_drink	./act.item.c	/^ACMD(do_drink);$/;"	v
do_drink	./interpreter.c	/^ACMD(do_drink);$/;"	v
do_drop	./act.item.c	/^ACMD(do_drop);$/;"	v
do_drop	./interpreter.c	/^ACMD(do_drop);$/;"	v
do_drop	./spec_procs.c	/^ACMD(do_drop);$/;"	v
do_eat	./act.item.c	/^ACMD(do_eat);$/;"	v
do_eat	./interpreter.c	/^ACMD(do_eat);$/;"	v
do_echo	./act.wizard.c	/^ACMD(do_echo);$/;"	v
do_echo	./interpreter.c	/^ACMD(do_echo);$/;"	v
do_echo	./shop.c	/^ACMD(do_echo);$/;"	v
do_enter	./act.movement.c	/^ACMD(do_enter);$/;"	v
do_enter	./interpreter.c	/^ACMD(do_enter);$/;"	v
do_equipment	./act.informative.c	/^ACMD(do_equipment);$/;"	v
do_equipment	./interpreter.c	/^ACMD(do_equipment);$/;"	v
do_examine	./act.informative.c	/^ACMD(do_examine);$/;"	v
do_examine	./interpreter.c	/^ACMD(do_examine);$/;"	v
do_exit	./interpreter.c	/^ACMD(do_exit);$/;"	v
do_exits	./act.informative.c	/^ACMD(do_exits);$/;"	v
do_exits	./interpreter.c	/^ACMD(do_exits);$/;"	v
do_flee	./act.offensive.c	/^ACMD(do_flee);$/;"	v
do_flee	./fight.c	/^ACMD(do_flee);$/;"	v
do_flee	./interpreter.c	/^ACMD(do_flee);$/;"	v
do_follow	./act.movement.c	/^ACMD(do_follow);$/;"	v
do_follow	./castle.c	/^ACMD(do_follow);$/;"	v
do_follow	./interpreter.c	/^ACMD(do_follow);$/;"	v
do_force	./act.wizard.c	/^ACMD(do_force);$/;"	v
do_force	./interpreter.c	/^ACMD(do_force);$/;"	v
do_gecho	./act.wizard.c	/^ACMD(do_gecho);$/;"	v
do_gecho	./interpreter.c	/^ACMD(do_gecho);$/;"	v
do_gen_comm	./act.comm.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	./act.other.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	./interpreter.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_door	./act.movement.c	/^ACMD(do_gen_door);$/;"	v
do_gen_door	./castle.c	/^ACMD(do_gen_door);$/;"	v
do_gen_door	./interpreter.c	/^ACMD(do_gen_door);$/;"	v
do_gen_door	./spec_procs.c	/^ACMD(do_gen_door);$/;"	v
do_gen_ps	./act.informative.c	/^ACMD(do_gen_ps);$/;"	v
do_gen_ps	./interpreter.c	/^ACMD(do_gen_ps);$/;"	v
do_gen_tog	./act.other.c	/^ACMD(do_gen_tog);$/;"	v
do_gen_tog	./interpreter.c	/^ACMD(do_gen_tog);$/;"	v
do_gen_write	./act.other.c	/^ACMD(do_gen_write);$/;"	v
do_gen_write	./interpreter.c	/^ACMD(do_gen_write);$/;"	v
do_get	./act.item.c	/^ACMD(do_get);$/;"	v
do_get	./interpreter.c	/^ACMD(do_get);$/;"	v
do_get	./mobact.c	/^ACMD(do_get);$/;"	v
do_give	./act.item.c	/^ACMD(do_give);$/;"	v
do_give	./interpreter.c	/^ACMD(do_give);$/;"	v
do_gold	./act.informative.c	/^ACMD(do_gold);$/;"	v
do_gold	./interpreter.c	/^ACMD(do_gold);$/;"	v
do_goto	./act.wizard.c	/^ACMD(do_goto);$/;"	v
do_goto	./interpreter.c	/^ACMD(do_goto);$/;"	v
do_grab	./act.item.c	/^ACMD(do_grab);$/;"	v
do_grab	./interpreter.c	/^ACMD(do_grab);$/;"	v
do_group	./act.other.c	/^ACMD(do_group);$/;"	v
do_group	./interpreter.c	/^ACMD(do_group);$/;"	v
do_gsay	./act.comm.c	/^ACMD(do_gsay);$/;"	v
do_gsay	./interpreter.c	/^ACMD(do_gsay);$/;"	v
do_hcontrol	./house.c	/^ACMD(do_hcontrol);$/;"	v
do_hcontrol	./interpreter.c	/^ACMD(do_hcontrol);$/;"	v
do_help	./act.informative.c	/^ACMD(do_help);$/;"	v
do_help	./interpreter.c	/^ACMD(do_help);$/;"	v
do_hide	./act.other.c	/^ACMD(do_hide);$/;"	v
do_hide	./interpreter.c	/^ACMD(do_hide);$/;"	v
do_hit	./act.offensive.c	/^ACMD(do_hit);$/;"	v
do_hit	./interpreter.c	/^ACMD(do_hit);$/;"	v
do_house	./house.c	/^ACMD(do_house);$/;"	v
do_house	./interpreter.c	/^ACMD(do_house);$/;"	v
do_insult	./act.informative.c	/^ACMD(do_insult);$/;"	v
do_insult	./act.social.c	/^ACMD(do_insult);$/;"	v
do_insult	./interpreter.c	/^ACMD(do_insult);$/;"	v
do_inventory	./act.informative.c	/^ACMD(do_inventory);$/;"	v
do_inventory	./interpreter.c	/^ACMD(do_inventory);$/;"	v
do_invis	./act.wizard.c	/^ACMD(do_invis);$/;"	v
do_invis	./interpreter.c	/^ACMD(do_invis);$/;"	v
do_kick	./act.offensive.c	/^ACMD(do_kick);$/;"	v
do_kick	./interpreter.c	/^ACMD(do_kick);$/;"	v
do_kill	./act.offensive.c	/^ACMD(do_kill);$/;"	v
do_kill	./interpreter.c	/^ACMD(do_kill);$/;"	v
do_last	./act.wizard.c	/^ACMD(do_last);$/;"	v
do_last	./interpreter.c	/^ACMD(do_last);$/;"	v
do_leave	./act.movement.c	/^ACMD(do_leave);$/;"	v
do_leave	./interpreter.c	/^ACMD(do_leave);$/;"	v
do_levels	./act.informative.c	/^ACMD(do_levels);$/;"	v
do_levels	./interpreter.c	/^ACMD(do_levels);$/;"	v
do_load	./act.wizard.c	/^ACMD(do_load);$/;"	v
do_load	./interpreter.c	/^ACMD(do_load);$/;"	v
do_look	./act.informative.c	/^ACMD(do_look);$/;"	v
do_look	./interpreter.c	/^ACMD(do_look);$/;"	v
do_move	./interpreter.h	/^ACMD(do_move);$/;"	v
do_not_buy	./shop.h	/^   char	*do_not_buy;		\/* If keeper dosn't buy such things	*\/$/;"	m	struct:shop_data
do_not_here	./act.other.c	/^ACMD(do_not_here);$/;"	v
do_not_here	./interpreter.c	/^ACMD(do_not_here);$/;"	v
do_npc_rescue	./castle.c	/^int do_npc_rescue(struct char_data *ch_hero, struct char_data *ch_victim)$/;"	f
do_olc	./interpreter.c	/^ACMD(do_olc);$/;"	v
do_olc	./olc.c	/^ACMD(do_olc);$/;"	v
do_order	./act.offensive.c	/^ACMD(do_order);$/;"	v
do_order	./interpreter.c	/^ACMD(do_order);$/;"	v
do_page	./act.comm.c	/^ACMD(do_page);$/;"	v
do_page	./interpreter.c	/^ACMD(do_page);$/;"	v
do_poofset	./act.wizard.c	/^ACMD(do_poofset);$/;"	v
do_poofset	./interpreter.c	/^ACMD(do_poofset);$/;"	v
do_pour	./act.item.c	/^ACMD(do_pour);$/;"	v
do_pour	./interpreter.c	/^ACMD(do_pour);$/;"	v
do_practice	./act.other.c	/^ACMD(do_practice);$/;"	v
do_practice	./interpreter.c	/^ACMD(do_practice);$/;"	v
do_purge	./act.wizard.c	/^ACMD(do_purge);$/;"	v
do_purge	./interpreter.c	/^ACMD(do_purge);$/;"	v
do_put	./act.item.c	/^ACMD(do_put);$/;"	v
do_put	./interpreter.c	/^ACMD(do_put);$/;"	v
do_qcomm	./act.comm.c	/^ACMD(do_qcomm);$/;"	v
do_qcomm	./interpreter.c	/^ACMD(do_qcomm);$/;"	v
do_quit	./act.other.c	/^ACMD(do_quit);$/;"	v
do_quit	./interpreter.c	/^ACMD(do_quit);$/;"	v
do_reboot	./db.c	/^ACMD(do_reboot);$/;"	v
do_reboot	./interpreter.c	/^ACMD(do_reboot);$/;"	v
do_remove	./act.item.c	/^ACMD(do_remove);$/;"	v
do_remove	./interpreter.c	/^ACMD(do_remove);$/;"	v
do_reply	./act.comm.c	/^ACMD(do_reply);$/;"	v
do_reply	./interpreter.c	/^ACMD(do_reply);$/;"	v
do_report	./act.other.c	/^ACMD(do_report);$/;"	v
do_report	./interpreter.c	/^ACMD(do_report);$/;"	v
do_rescue	./act.offensive.c	/^ACMD(do_rescue);$/;"	v
do_rescue	./interpreter.c	/^ACMD(do_rescue);$/;"	v
do_rest	./act.movement.c	/^ACMD(do_rest);$/;"	v
do_rest	./interpreter.c	/^ACMD(do_rest);$/;"	v
do_restore	./act.wizard.c	/^ACMD(do_restore);$/;"	v
do_restore	./interpreter.c	/^ACMD(do_restore);$/;"	v
do_return	./act.wizard.c	/^ACMD(do_return);$/;"	v
do_return	./handler.c	/^ACMD(do_return);$/;"	v
do_return	./interpreter.c	/^ACMD(do_return);$/;"	v
do_save	./act.other.c	/^ACMD(do_save);$/;"	v
do_save	./interpreter.c	/^ACMD(do_save);$/;"	v
do_say	./act.comm.c	/^ACMD(do_say);$/;"	v
do_say	./graph.c	/^ACMD(do_say);$/;"	v
do_say	./interpreter.c	/^ACMD(do_say);$/;"	v
do_say	./shop.c	/^ACMD(do_say);$/;"	v
do_say	./spec_procs.c	/^ACMD(do_say);$/;"	v
do_score	./act.informative.c	/^ACMD(do_score);$/;"	v
do_score	./interpreter.c	/^ACMD(do_score);$/;"	v
do_send	./act.wizard.c	/^ACMD(do_send);$/;"	v
do_send	./interpreter.c	/^ACMD(do_send);$/;"	v
do_set	./act.wizard.c	/^ACMD(do_set);$/;"	v
do_set	./interpreter.c	/^ACMD(do_set);$/;"	v
do_show	./act.wizard.c	/^ACMD(do_show);$/;"	v
do_show	./interpreter.c	/^ACMD(do_show);$/;"	v
do_shutdown	./act.wizard.c	/^ACMD(do_shutdown);$/;"	v
do_shutdown	./interpreter.c	/^ACMD(do_shutdown);$/;"	v
do_simple_move	./act.movement.c	/^int do_simple_move(struct char_data *ch, int dir, int need_specials_check)$/;"	f
do_sit	./act.movement.c	/^ACMD(do_sit);$/;"	v
do_sit	./interpreter.c	/^ACMD(do_sit);$/;"	v
do_skillset	./interpreter.c	/^ACMD(do_skillset);$/;"	v
do_skillset	./modify.c	/^ACMD(do_skillset);$/;"	v
do_sleep	./act.movement.c	/^ACMD(do_sleep);$/;"	v
do_sleep	./interpreter.c	/^ACMD(do_sleep);$/;"	v
do_sneak	./act.other.c	/^ACMD(do_sneak);$/;"	v
do_sneak	./interpreter.c	/^ACMD(do_sneak);$/;"	v
do_snoop	./act.wizard.c	/^ACMD(do_snoop);$/;"	v
do_snoop	./interpreter.c	/^ACMD(do_snoop);$/;"	v
do_spec_comm	./act.comm.c	/^ACMD(do_spec_comm);$/;"	v
do_spec_comm	./interpreter.c	/^ACMD(do_spec_comm);$/;"	v
do_split	./act.other.c	/^ACMD(do_split);$/;"	v
do_split	./interpreter.c	/^ACMD(do_split);$/;"	v
do_stand	./act.movement.c	/^ACMD(do_stand);$/;"	v
do_stand	./interpreter.c	/^ACMD(do_stand);$/;"	v
do_start	./class.c	/^void do_start(struct char_data *ch)$/;"	f
do_stat	./act.wizard.c	/^ACMD(do_stat);$/;"	v
do_stat	./interpreter.c	/^ACMD(do_stat);$/;"	v
do_stat_character	./act.wizard.c	/^void do_stat_character(struct char_data *ch, struct char_data *k)$/;"	f
do_stat_object	./act.wizard.c	/^void do_stat_object(struct char_data *ch, struct obj_data *j)$/;"	f
do_stat_room	./act.wizard.c	/^void do_stat_room(struct char_data *ch)$/;"	f
do_steal	./act.other.c	/^ACMD(do_steal);$/;"	v
do_steal	./interpreter.c	/^ACMD(do_steal);$/;"	v
do_switch	./act.wizard.c	/^ACMD(do_switch);$/;"	v
do_switch	./interpreter.c	/^ACMD(do_switch);$/;"	v
do_syslog	./act.wizard.c	/^ACMD(do_syslog);$/;"	v
do_syslog	./interpreter.c	/^ACMD(do_syslog);$/;"	v
do_teleport	./act.wizard.c	/^ACMD(do_teleport);$/;"	v
do_teleport	./interpreter.c	/^ACMD(do_teleport);$/;"	v
do_tell	./act.comm.c	/^ACMD(do_tell);$/;"	v
do_tell	./interpreter.c	/^ACMD(do_tell);$/;"	v
do_tell	./objsave.c	/^ACMD(do_tell);$/;"	v
do_tell	./shop.c	/^ACMD(do_tell);$/;"	v
do_time	./act.informative.c	/^ACMD(do_time);$/;"	v
do_time	./interpreter.c	/^ACMD(do_time);$/;"	v
do_title	./act.other.c	/^ACMD(do_title);$/;"	v
do_title	./interpreter.c	/^ACMD(do_title);$/;"	v
do_toggle	./act.informative.c	/^ACMD(do_toggle);$/;"	v
do_toggle	./interpreter.c	/^ACMD(do_toggle);$/;"	v
do_track	./graph.c	/^ACMD(do_track);$/;"	v
do_track	./interpreter.c	/^ACMD(do_track);$/;"	v
do_trans	./act.wizard.c	/^ACMD(do_trans);$/;"	v
do_trans	./interpreter.c	/^ACMD(do_trans);$/;"	v
do_unban	./ban.c	/^ACMD(do_unban);$/;"	v
do_unban	./interpreter.c	/^ACMD(do_unban);$/;"	v
do_ungroup	./act.other.c	/^ACMD(do_ungroup);$/;"	v
do_ungroup	./interpreter.c	/^ACMD(do_ungroup);$/;"	v
do_use	./act.other.c	/^ACMD(do_use);$/;"	v
do_use	./interpreter.c	/^ACMD(do_use);$/;"	v
do_users	./act.informative.c	/^ACMD(do_users);$/;"	v
do_users	./interpreter.c	/^ACMD(do_users);$/;"	v
do_visible	./act.other.c	/^ACMD(do_visible);$/;"	v
do_visible	./interpreter.c	/^ACMD(do_visible);$/;"	v
do_vnum	./act.wizard.c	/^ACMD(do_vnum);$/;"	v
do_vnum	./interpreter.c	/^ACMD(do_vnum);$/;"	v
do_vstat	./act.wizard.c	/^ACMD(do_vstat);$/;"	v
do_vstat	./interpreter.c	/^ACMD(do_vstat);$/;"	v
do_wake	./act.movement.c	/^ACMD(do_wake);$/;"	v
do_wake	./interpreter.c	/^ACMD(do_wake);$/;"	v
do_wear	./act.item.c	/^ACMD(do_wear);$/;"	v
do_wear	./interpreter.c	/^ACMD(do_wear);$/;"	v
do_weather	./act.informative.c	/^ACMD(do_weather);$/;"	v
do_weather	./interpreter.c	/^ACMD(do_weather);$/;"	v
do_where	./act.informative.c	/^ACMD(do_where);$/;"	v
do_where	./interpreter.c	/^ACMD(do_where);$/;"	v
do_who	./act.informative.c	/^ACMD(do_who);$/;"	v
do_who	./interpreter.c	/^ACMD(do_who);$/;"	v
do_wield	./act.item.c	/^ACMD(do_wield);$/;"	v
do_wield	./interpreter.c	/^ACMD(do_wield);$/;"	v
do_wimpy	./act.other.c	/^ACMD(do_wimpy);$/;"	v
do_wimpy	./interpreter.c	/^ACMD(do_wimpy);$/;"	v
do_wizlock	./act.wizard.c	/^ACMD(do_wizlock);$/;"	v
do_wizlock	./interpreter.c	/^ACMD(do_wizlock);$/;"	v
do_wiznet	./act.wizard.c	/^ACMD(do_wiznet);$/;"	v
do_wiznet	./interpreter.c	/^ACMD(do_wiznet);$/;"	v
do_wizutil	./act.wizard.c	/^ACMD(do_wizutil);$/;"	v
do_wizutil	./interpreter.c	/^ACMD(do_wizutil);$/;"	v
do_write	./act.comm.c	/^ACMD(do_write);$/;"	v
do_write	./interpreter.c	/^ACMD(do_write);$/;"	v
do_zreset	./act.wizard.c	/^ACMD(do_zreset);$/;"	v
do_zreset	./interpreter.c	/^ACMD(do_zreset);$/;"	v
donation_room_1	./config.c	/^room_vnum donation_room_1 = 3063;$/;"	v
donation_room_2	./config.c	/^room_vnum donation_room_2 = NOWHERE;	\/* unused - room for expansion *\/$/;"	v
donation_room_3	./config.c	/^room_vnum donation_room_3 = NOWHERE;	\/* unused - room for expansion *\/$/;"	v
dopr	./bsd-snprintf.c	/^dopr(char *buffer, size_t maxlen, const char *format, va_list args)$/;"	f	file:
dopr_outch	./bsd-snprintf.c	/^dopr_outch(char *buffer, size_t *currlen, size_t maxlen, char c)$/;"	f	file:
drink_aff	./constants.c	/^int drink_aff[][3] = {$/;"	v
drinknames	./constants.c	/^const char *drinknames[] =$/;"	v
drinks	./constants.c	/^const char *drinks[] =$/;"	v
dts_are_dumps	./config.c	/^int dts_are_dumps = YES;$/;"	v
dummy_mob	./db.c	/^struct player_special_data dummy_mob;	\/* dummy spec area for mobs	*\/$/;"	v	typeref:struct:player_special_data
dump	./spec_assign.c	/^SPECIAL(dump);$/;"	v
dump	./spec_procs.c	/^SPECIAL(dump);$/;"	v
duplicate	./db.h	/^   int duplicate;$/;"	m	struct:help_index_element
duration	./structs.h	/^   sh_int duration;      \/* For how long its effects will last      *\/$/;"	m	struct:affected_type
echo_off	./comm.c	/^void echo_off(struct descriptor_data *d)$/;"	f
echo_on	./comm.c	/^void echo_on(struct descriptor_data *d)$/;"	f
emergency_unban	./comm.c	/^byte emergency_unban;		\/* signal: SIGUSR2 *\/$/;"	v
encrypt_names	./telnet.h	/^char *encrypt_names[] = {$/;"	v
enctype_names	./telnet.h	/^char *enctype_names[] = {$/;"	v
end_read_list	./shop.c	/^int end_read_list(struct shop_buy_data *list, int len, int error)$/;"	f
entry	./db.h	/^   char *entry;$/;"	m	struct:help_index_element
equip_char	./handler.c	/^void equip_char(struct char_data *ch, struct obj_data *obj, int pos)$/;"	f
equipment	./structs.h	/^   struct obj_data *equipment[NUM_WEARS];\/* Equipment array               *\/$/;"	m	struct:char_data	typeref:struct:char_data::obj_data
equipment_types	./constants.c	/^const char *equipment_types[] = {$/;"	v
evaluate_expression	./shop.c	/^int evaluate_expression(struct obj_data *obj, char *expr)$/;"	f
evaluate_operation	./shop.c	/^void evaluate_operation(struct stack_data *ops, struct stack_data *vals)$/;"	f
ex_description	./structs.h	/^   struct extra_descr_data *ex_description; \/* extra descriptions     *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::extra_descr_data
ex_description	./structs.h	/^   struct extra_descr_data *ex_description; \/* for examine\/look       *\/$/;"	m	struct:room_data	typeref:struct:room_data::extra_descr_data
exit_bits	./constants.c	/^const char *exit_bits[] = {$/;"	v
exit_info	./structs.h	/^   sh_int \/*bitvector_t*\/ exit_info;	\/* Exit info			*\/$/;"	m	struct:room_direction_data
exit_num	./house.h	/^   sh_int exit_num;		\/* direction of house's exit	*\/$/;"	m	struct:house_control_rec
exp	./structs.h	/^   int	exp;            \/* The experience of the player            *\/$/;"	m	struct:char_point_data
extra_bits	./constants.c	/^const char *extra_bits[] = {$/;"	v
extra_bits_count	./constants.c	/^	extra_bits_count = sizeof(extra_bits) \/ sizeof(extra_bits[0]) - 1,$/;"	v
extra_descr_data	./structs.h	/^struct extra_descr_data {$/;"	s
extra_flags	./structs.h	/^   int \/*bitvector_t*\/	extra_flags;	\/* If it hums, glows, etc.	    *\/$/;"	m	struct:obj_flag_data
extra_flags	./structs.h	/^   int \/*bitvector_t*\/	extra_flags;$/;"	m	struct:obj_file_elem
extract_char	./handler.c	/^void extract_char(struct char_data *ch)$/;"	f
extract_char_final	./handler.c	/^void extract_char_final(struct char_data *ch)$/;"	f
extract_obj	./handler.c	/^void extract_obj(struct obj_data *obj)$/;"	f
extract_pending_chars	./handler.c	/^void extract_pending_chars(void)$/;"	f
extractions_pending	./handler.c	/^int extractions_pending = 0;$/;"	v
fido	./spec_assign.c	/^SPECIAL(fido);$/;"	v
fido	./spec_procs.c	/^SPECIAL(fido);$/;"	v
fight_messages	./db.c	/^struct message_list fight_messages[MAX_MESSAGES];	\/* fighting messages	 *\/$/;"	v	typeref:struct:message_list
fighting	./structs.h	/^   struct char_data *fighting;	\/* Opponent				*\/$/;"	m	struct:char_special_data	typeref:struct:char_special_data::char_data
file_end_pos	./mail.c	/^long file_end_pos = 0;			\/* length of file *\/$/;"	v
file_to_string	./db.c	/^int file_to_string(const char *name, char *buf)$/;"	f
file_to_string_alloc	./db.c	/^int file_to_string_alloc(const char *name, char **buf)$/;"	f
filename	./boards.h	/^   char	filename[50];	\/* file to save this board to *\/$/;"	m	struct:board_info_type
fill	./interpreter.c	/^const char *fill[] =$/;"	v
fill_word	./interpreter.c	/^int fill_word(char *argument)$/;"	f
find_action	./act.social.c	/^int find_action(int cmd)$/;"	f
find_alias	./interpreter.c	/^struct alias_data *find_alias(struct alias_data *alias_list, char *str)$/;"	f
find_all_dots	./handler.c	/^int find_all_dots(char *arg)$/;"	f
find_board	./boards.c	/^int find_board(struct char_data *ch)$/;"	f
find_char_in_index	./mail.c	/^mail_index_type *find_char_in_index(long searchee)$/;"	f
find_class_bitvector	./class.c	/^bitvector_t find_class_bitvector(const char *arg)$/;"	f
find_command	./interpreter.c	/^int find_command(const char *command)$/;"	f
find_door	./act.movement.c	/^int find_door(struct char_data *ch, const char *type, char *dir, const char *cmdname)$/;"	f
find_eq_pos	./act.item.c	/^int find_eq_pos(struct char_data *ch, struct obj_data *obj, char *arg)$/;"	f
find_exdesc	./act.informative.c	/^char *find_exdesc(char *word, struct extra_descr_data *list)$/;"	f
find_first_step	./graph.c	/^int find_first_step(room_rnum src, room_rnum target)$/;"	f
find_guard	./castle.c	/^struct char_data *find_guard(struct char_data *chAtChar)$/;"	f
find_house	./house.c	/^int find_house(room_vnum vnum)$/;"	f
find_npc_by_name	./castle.c	/^struct char_data *find_npc_by_name(struct char_data *chAtChar,$/;"	f
find_oper_num	./shop.c	/^int find_oper_num(char token)$/;"	f
find_skill_num	./spell_parser.c	/^int find_skill_num(char *name)$/;"	f
find_slot	./boards.c	/^int find_slot(void)$/;"	f
find_target_room	./act.wizard.c	/^room_rnum find_target_room(struct char_data *ch, char *rawroomstr)$/;"	f
flags_door	./act.movement.c	/^const int flags_door[] =$/;"	v
flush_queues	./comm.c	/^void flush_queues(struct descriptor_data *d)$/;"	f
fmtfp	./bsd-snprintf.c	/^fmtfp(char *buffer, size_t *currlen, size_t maxlen, long double fvalue, $/;"	f	file:
fmtint	./bsd-snprintf.c	/^fmtint(char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtstr	./bsd-snprintf.c	/^fmtstr(char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fname	./handler.c	/^char *fname(const char *namelist)$/;"	f
follow_type	./structs.h	/^struct follow_type {$/;"	s
follower	./structs.h	/^   struct char_data *follower;$/;"	m	struct:follow_type	typeref:struct:follow_type::char_data
followers	./structs.h	/^   struct follow_type *followers;        \/* List of chars followers       *\/$/;"	m	struct:char_data	typeref:struct:char_data::follow_type
forget	./mobact.c	/^void forget(struct char_data *ch, struct char_data *victim)$/;"	f
fread_action	./act.social.c	/^char *fread_action(FILE *fl, int nr)$/;"	f
fread_string	./db.c	/^char *fread_string(FILE *fl, const char *error)$/;"	f
free_alias	./interpreter.c	/^void free_alias(struct alias_data *a)$/;"	f
free_char	./db.c	/^void free_char(struct char_data *ch)$/;"	f
free_extra_descriptions	./db.c	/^void free_extra_descriptions(struct extra_descr_data *edesc)$/;"	f
free_help	./db.c	/^void free_help(void)$/;"	f
free_list	./mail.c	/^position_list_type *free_list = NULL;	\/* list of free positions in file *\/$/;"	v
free_messages	./fight.c	/^void free_messages(void)$/;"	f
free_messages_type	./fight.c	/^void free_messages_type(struct msg_type *msg)$/;"	f
free_obj	./db.c	/^void free_obj(struct obj_data *obj)$/;"	f
free_player_index	./db.c	/^void free_player_index(void)$/;"	f
free_rent	./config.c	/^int free_rent = YES;$/;"	v
free_social_messages	./act.social.c	/^void free_social_messages(void)$/;"	f
free_text_files	./db.c	/^void free_text_files(void)$/;"	f
freeze_level	./structs.h	/^   byte freeze_level;		\/* Level of god who froze char, if any	*\/$/;"	m	struct:player_special_data_saved
from	./mail.h	/^   long from;			\/* idnum of the mail's sender		*\/$/;"	m	struct:header_data_type
frozen_start_room	./config.c	/^room_vnum frozen_start_room = 1202;$/;"	v
fry_victim	./castle.c	/^void fry_victim(struct char_data *ch)$/;"	f
fullness	./constants.c	/^const char *fullness[] =$/;"	v
func	./shop.h	/^   SPECIAL (*func);		\/* Secondary spec_proc for shopkeeper	*\/$/;"	m	struct:shop_data
func	./structs.h	/^   SPECIAL(*func);$/;"	m	struct:index_data
func	./structs.h	/^   SPECIAL(*func);$/;"	m	struct:room_data
gain_condition	./limits.c	/^void gain_condition(struct char_data *ch, int condition, int value)$/;"	f
gain_exp	./limits.c	/^void gain_exp(struct char_data *ch, int gain)$/;"	f
gain_exp_regardless	./limits.c	/^void gain_exp_regardless(struct char_data *ch, int gain)$/;"	f
game_loop	./comm.c	/^void game_loop(socket_t mother_desc)$/;"	f
gen_board	./boards.c	/^SPECIAL(gen_board);$/;"	v
gen_board	./spec_assign.c	/^SPECIAL(gen_board);$/;"	v
gen_receptionist	./objsave.c	/^int gen_receptionist(struct char_data *ch, struct char_data *recep,$/;"	f
genders	./constants.c	/^const char *genders[] =$/;"	v
general_description	./structs.h	/^   char	*general_description;       \/* When look DIR.			*\/$/;"	m	struct:room_direction_data
generic_find	./handler.c	/^int generic_find(char *arg, bitvector_t bitvector, struct char_data *ch,$/;"	f
get_bind_addr	./comm.c	/^struct in_addr *get_bind_addr()$/;"	f
get_char_num	./handler.c	/^struct char_data *get_char_num(mob_rnum nr)$/;"	f
get_char_room	./handler.c	/^struct char_data *get_char_room(char *name, int *number, room_rnum room)$/;"	f
get_char_room_vis	./handler.c	/^struct char_data *get_char_room_vis(struct char_data *ch, char *name, int *number)$/;"	f
get_char_vis	./handler.c	/^struct char_data *get_char_vis(struct char_data *ch, char *name, int *number, int where)$/;"	f
get_char_world_vis	./handler.c	/^struct char_data *get_char_world_vis(struct char_data *ch, char *name, int *number)$/;"	f
get_check_money	./act.item.c	/^void get_check_money(struct char_data *ch, struct obj_data *obj)$/;"	f
get_filename	./utils.c	/^int get_filename(char *filename, size_t fbufsize, int mode, const char *orig_name)$/;"	f
get_from_container	./act.item.c	/^void get_from_container(struct char_data *ch, struct obj_data *cont,$/;"	f
get_from_q	./comm.c	/^int get_from_q(struct txt_q *queue, char *dest, int *aliased)$/;"	f
get_from_room	./act.item.c	/^void get_from_room(struct char_data *ch, char *arg, int howmany)$/;"	f
get_hash_obj_vis	./shop.c	/^struct obj_data *get_hash_obj_vis(struct char_data *ch, char *name,$/;"	f
get_id_by_name	./db.c	/^long get_id_by_name(const char *name)$/;"	f
get_line	./utils.c	/^int get_line(FILE *fl, char *buf)$/;"	f
get_max_players	./comm.c	/^int get_max_players(void)$/;"	f
get_name_by_id	./db.c	/^char *get_name_by_id(long id)$/;"	f
get_number	./handler.c	/^int get_number(char **name)$/;"	f
get_obj_in_equip_vis	./handler.c	/^struct obj_data *get_obj_in_equip_vis(struct char_data *ch, char *arg, int *number, struct obj_data *equipment[])$/;"	f
get_obj_in_list_num	./handler.c	/^struct obj_data *get_obj_in_list_num(int num, struct obj_data *list)$/;"	f
get_obj_in_list_vis	./handler.c	/^struct obj_data *get_obj_in_list_vis(struct char_data *ch, char *name, int *number, struct obj_data *list)$/;"	f
get_obj_num	./handler.c	/^struct obj_data *get_obj_num(obj_rnum nr)$/;"	f
get_obj_pos_in_equip_vis	./handler.c	/^int get_obj_pos_in_equip_vis(struct char_data *ch, char *arg, int *number, struct obj_data *equipment[])$/;"	f
get_obj_vis	./handler.c	/^struct obj_data *get_obj_vis(struct char_data *ch, char *name, int *number)$/;"	f
get_one_line	./db.c	/^void get_one_line(FILE *fl, char *buf)$/;"	f
get_player_vis	./handler.c	/^struct char_data *get_player_vis(struct char_data *ch, char *name, int *number, int inroom)$/;"	f
get_ptable_by_name	./db.c	/^long get_ptable_by_name(const char *name)$/;"	f
get_purchase_obj	./shop.c	/^struct obj_data *get_purchase_obj(struct char_data *ch, char *arg,$/;"	f
get_selling_obj	./shop.c	/^struct obj_data *get_selling_obj(struct char_data *ch, char *name, struct char_data *keeper, int shop_nr, int msg)$/;"	f
get_slide_obj_vis	./shop.c	/^struct obj_data *get_slide_obj_vis(struct char_data *ch, char *name,$/;"	f
get_victim	./castle.c	/^struct char_data *get_victim(struct char_data *chAtChar)$/;"	f
gettimeofday	./comm.c	/^void gettimeofday(struct timeval *t, struct timezone *dummy)$/;"	f
give_find_vict	./act.item.c	/^struct char_data *give_find_vict(struct char_data *ch, char *arg)$/;"	f
god_msg	./structs.h	/^   struct msg_type god_msg;	\/* messages when hit on god		*\/$/;"	m	struct:message_type	typeref:struct:message_type::msg_type
gold	./structs.h	/^   int	gold;           \/* Money carried                           *\/$/;"	m	struct:char_point_data
gold	./structs.h	/^   int	gold;$/;"	m	struct:rent_info
graf	./limits.c	/^int graf(int grafage, int p0, int p1, int p2, int p3, int p4, int p5, int p6)$/;"	f
group_gain	./fight.c	/^void group_gain(struct char_data *ch, struct char_data *victim)$/;"	f
guests	./house.h	/^   long guests[MAX_GUESTS];	\/* idnums of house's guests	*\/$/;"	m	struct:house_control_rec
guild	./castle.c	/^SPECIAL(guild);$/;"	v
guild	./spec_assign.c	/^SPECIAL(guild);$/;"	v
guild	./spec_procs.c	/^SPECIAL(guild);$/;"	v
guild_guard	./spec_assign.c	/^SPECIAL(guild_guard);$/;"	v
guild_guard	./spec_procs.c	/^SPECIAL(guild_guard);$/;"	v
guild_info	./class.c	/^struct guild_info_type guild_info[] = {$/;"	v	typeref:struct:guild_info_type
guild_info_type	./structs.h	/^struct guild_info_type {$/;"	s
guild_room	./structs.h	/^  room_vnum guild_room;$/;"	m	struct:guild_info_type
half_chop	./interpreter.c	/^void half_chop(char *string, char *arg1, char *arg2)$/;"	f
handbook	./db.c	/^char *handbook = NULL;		\/* handbook for new immortals	 *\/$/;"	v
has_boat	./act.movement.c	/^int has_boat(struct char_data *ch)$/;"	f
has_key	./act.movement.c	/^int has_key(struct char_data *ch, obj_vnum key)$/;"	f
has_mail	./mail.c	/^int has_mail(long recipient)$/;"	f
has_prompt	./structs.h	/^   int	has_prompt;		\/* is the user at a prompt?             *\/$/;"	m	struct:descriptor_data
hcontrol_build_house	./house.c	/^void hcontrol_build_house(struct char_data *ch, char *arg)$/;"	f
hcontrol_destroy_house	./house.c	/^void hcontrol_destroy_house(struct char_data *ch, char *arg)$/;"	f
hcontrol_list_houses	./house.c	/^void hcontrol_list_houses(struct char_data *ch)$/;"	f
hcontrol_pay_house	./house.c	/^void hcontrol_pay_house(struct char_data *ch, char *arg)$/;"	f
head	./db.h	/^   struct reset_q_element *head;$/;"	m	struct:reset_q_type	typeref:struct:reset_q_type::reset_q_element
head	./structs.h	/^   struct txt_block *head;$/;"	m	struct:txt_q	typeref:struct:txt_q::txt_block
header_block_type	./mail.h	/^typedef struct header_block_type_d header_block_type;$/;"	t	typeref:struct:header_block_type_d
header_block_type_d	./mail.h	/^struct header_block_type_d {$/;"	s
header_data	./mail.h	/^   struct header_data_type header_data;	\/* other header data		*\/$/;"	m	struct:header_block_type_d	typeref:struct:header_block_type_d::header_data_type
header_data_type	./mail.h	/^struct header_data_type {$/;"	s
heading	./boards.h	/^   char	*heading;     \/* pointer to message's heading *\/$/;"	m	struct:board_msginfo
heading_len	./boards.h	/^   int	heading_len;  \/* size of header (for file write) *\/$/;"	m	struct:board_msginfo
heartbeat	./comm.c	/^void heartbeat(int pulse)$/;"	f
height	./structs.h	/^   ubyte height;       \/* PC \/ NPC's height                    *\/$/;"	m	struct:char_player_data
height	./structs.h	/^   ubyte height;$/;"	m	struct:char_file_u
help	./db.c	/^char *help = NULL;		\/* help screen			 *\/$/;"	v
help_index_element	./db.h	/^struct help_index_element {$/;"	s
help_table	./db.c	/^struct help_index_element *help_table = 0;	\/* the help table	 *\/$/;"	v	typeref:struct:help_index_element
hide	./act.social.c	/^  int hide;$/;"	m	struct:social_messg	file:
hide	./structs.h	/^   sh_int hide;$/;"	m	struct:dex_skill_type
history	./structs.h	/^   char **history;		\/* History of commands, for ! mostly.	*\/$/;"	m	struct:descriptor_data
history_pos	./structs.h	/^   int	history_pos;		\/* Circular array position.		*\/$/;"	m	struct:descriptor_data
hit	./fight.c	/^void hit(struct char_data *ch, struct char_data *victim, int type)$/;"	f
hit	./structs.h	/^   sh_int hit;$/;"	m	struct:char_point_data
hit_gain	./limits.c	/^int hit_gain(struct char_data *ch)$/;"	f
hit_msg	./structs.h	/^   struct msg_type hit_msg;	\/* messages when hit			*\/$/;"	m	struct:message_type	typeref:struct:message_type::msg_type
hitp	./structs.h	/^   sh_int hitp;$/;"	m	struct:con_app_type
hitroll	./structs.h	/^   sbyte hitroll;       \/* Any bonus or penalty to the hit roll    *\/$/;"	m	struct:char_point_data
holler_move_cost	./config.c	/^int holler_move_cost = 20;$/;"	v
hometown	./structs.h	/^   sh_int hometown;    \/* PC s Hometown (zone)                 *\/$/;"	m	struct:char_player_data
hometown	./structs.h	/^   sh_int hometown;$/;"	m	struct:char_file_u
host	./structs.h	/^   char	host[HOST_LENGTH+1];	\/* hostname				*\/$/;"	m	struct:descriptor_data
host	./structs.h	/^   char host[HOST_LENGTH+1];	\/* host of last logon *\/$/;"	m	struct:char_file_u
hours	./structs.h	/^   int hours, day, month;$/;"	m	struct:time_info_data
house_control	./house.c	/^struct house_control_rec house_control[MAX_HOUSES];$/;"	v	typeref:struct:house_control_rec
house_control_rec	./house.h	/^struct house_control_rec {$/;"	s
how_good	./spec_procs.c	/^const char *how_good(int percent)$/;"	f
hsort	./db.c	/^int hsort(const void *a, const void *b)$/;"	f
hunt_victim	./graph.c	/^void hunt_victim(struct char_data *ch)$/;"	f
hunting	./structs.h	/^   struct char_data *hunting;	\/* Char hunted by this char		*\/$/;"	m	struct:char_special_data	typeref:struct:char_special_data::char_data
hupsig	./comm.c	/^RETSIGTYPE hupsig(int sig)$/;"	f
id	./db.h	/^   long id;$/;"	m	struct:player_index_element
id	./structs.h	/^   long	id;$/;"	m	struct:memory_rec_struct
idle_max_level	./config.c	/^int idle_max_level = LVL_GOD;$/;"	v
idle_rent_time	./config.c	/^int idle_rent_time = 48;$/;"	v
idle_tics	./structs.h	/^   byte idle_tics;		\/* tics idle at password prompt		*\/$/;"	m	struct:descriptor_data
idle_void	./config.c	/^int idle_void = 8;$/;"	v
idnum	./structs.h	/^   long	idnum;			\/* player's idnum; -1 for mobiles	*\/$/;"	m	struct:char_special_data_saved
if_flag	./db.h	/^   bool if_flag;	\/* if TRUE: exe only if preceding exe'd *\/$/;"	m	struct:reset_com
immlist	./db.c	/^char *immlist = NULL;		\/* list of peon gods		 *\/$/;"	v
immort_level_ok	./config.c	/^int immort_level_ok = 0;$/;"	v
immort_start_room	./config.c	/^room_vnum immort_start_room = 1204;$/;"	v
imotd	./db.c	/^char *imotd = NULL;		\/* message of the day - immorts *\/$/;"	v
in_addr	./sysdep.h	/^struct in_addr {$/;"	s
in_obj	./structs.h	/^   struct obj_data *in_obj;       \/* In what object NULL when none    *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::obj_data
in_room	./shop.h	/^   room_vnum *in_room;		\/* Where is the shop?			*\/$/;"	m	struct:shop_data
in_room	./structs.h	/^   room_rnum in_room;		\/* In what room -1 when conta\/carr	*\/$/;"	m	struct:obj_data
in_room	./structs.h	/^   room_rnum in_room;                    \/* Location (real room number)	  *\/$/;"	m	struct:char_data
inbuf	./structs.h	/^   char	inbuf[MAX_RAW_INPUT_LENGTH];  \/* buffer for raw input		*\/$/;"	m	struct:descriptor_data
index_boot	./db.c	/^void index_boot(int mode)$/;"	f
index_data	./structs.h	/^struct index_data {$/;"	s
index_mail	./mail.c	/^void index_mail(long id_to_index, long pos)$/;"	f
info	./db.c	/^char *info = NULL;		\/* info page			 *\/$/;"	v
init_boards	./boards.c	/^void init_boards(void)$/;"	f
init_char	./db.c	/^void init_char(struct char_data *ch)$/;"	f
init_game	./comm.c	/^void init_game(ush_int port)$/;"	f
init_socket	./comm.c	/^socket_t init_socket(ush_int port)$/;"	f
init_spell_levels	./class.c	/^void init_spell_levels(void)$/;"	f
input	./structs.h	/^   struct txt_q input;		\/* q of unprocessed input		*\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::txt_q
int_app	./constants.c	/^cpp_extern const struct int_app_type int_app[] = {$/;"	v	typeref:struct:int_app_type
int_app_type	./structs.h	/^struct int_app_type {$/;"	s
intel	./structs.h	/^   sbyte intel;$/;"	m	struct:char_ability_data
interpret_espec	./db.c	/^void interpret_espec(const char *keyword, const char *value, int i, int nr)$/;"	f
invalid_align	./handler.c	/^int invalid_align(struct char_data *ch, struct obj_data *obj)$/;"	f
invalid_class	./class.c	/^int invalid_class(struct char_data *ch, struct obj_data *obj)$/;"	f
invalid_list	./ban.c	/^char *invalid_list[MAX_INVALID_NAMES];$/;"	v
invis_level	./structs.h	/^   sh_int invis_level;		\/* level of invisibility		*\/$/;"	m	struct:player_special_data_saved
is_abbrev	./interpreter.c	/^int is_abbrev(const char *arg1, const char *arg2)$/;"	f
is_empty	./db.c	/^int is_empty(zone_rnum zone_nr)$/;"	f
is_number	./interpreter.c	/^int is_number(const char *str)$/;"	f
is_ok	./shop.c	/^int is_ok(struct char_data *keeper, struct char_data *ch, int shop_nr)$/;"	f
is_ok_char	./shop.c	/^int is_ok_char(struct char_data *keeper, struct char_data *ch, int shop_nr)$/;"	f
is_open	./shop.c	/^int is_open(struct char_data *keeper, int shop_nr, int msg)$/;"	f
is_tell_ok	./act.comm.c	/^int is_tell_ok(struct char_data *ch, struct char_data *vict)$/;"	f
is_trash	./castle.c	/^int is_trash(struct obj_data *i)$/;"	f
isascii	./sysdep.h	343;"	d
isbanned	./ban.c	/^int isbanned(char *hostname)$/;"	f
isname	./handler.c	/^int isname(const char *str, const char *namelist)$/;"	f
item_number	./structs.h	/^   obj_vnum item_number;	\/* Where in data-base			*\/$/;"	m	struct:obj_data
item_number	./structs.h	/^   obj_vnum item_number;$/;"	m	struct:obj_file_elem
item_types	./constants.c	/^const char *item_types[] = {$/;"	v
janitor	./spec_assign.c	/^SPECIAL(janitor);$/;"	v
janitor	./spec_procs.c	/^SPECIAL(janitor);$/;"	v
jerry	./castle.c	/^SPECIAL(jerry);$/;"	v
keeper	./shop.h	/^   mob_rnum	 keeper;	\/* The mobile who owns the shop (rnum)	*\/$/;"	m	struct:shop_data
key	./structs.h	/^   obj_vnum key;		\/* Key's number (-1 for no key)		*\/$/;"	m	struct:room_direction_data
keyword	./db.h	/^   char	*keyword;$/;"	m	struct:help_index_element
keyword	./structs.h	/^   char	*keyword;		\/* for open\/close			*\/$/;"	m	struct:room_direction_data
keyword	./structs.h	/^   char	*keyword;                 \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data
keywords	./shop.h	/^   char *keywords;$/;"	m	struct:shop_buy_data
king_welmar	./castle.c	/^SPECIAL(king_welmar);$/;"	v
large_outbuf	./structs.h	/^   struct txt_block *large_outbuf; \/* ptr to large buffer, if we need it *\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::txt_block
last_input	./structs.h	/^   char	last_input[MAX_INPUT_LENGTH]; \/* the last input			*\/$/;"	m	struct:descriptor_data
last_logon	./structs.h	/^   time_t last_logon;		\/* Time (in secs) of last logon *\/$/;"	m	struct:char_file_u
last_olc_mode	./structs.h	/^   int last_olc_mode;		\/* olc control				*\/$/;"	m	struct:player_special_data
last_olc_targ	./structs.h	/^   void *last_olc_targ;		\/* olc control				*\/$/;"	m	struct:player_special_data
last_payment	./house.h	/^   time_t last_payment;		\/* date of last house payment   *\/$/;"	m	struct:house_control_rec
last_tell	./structs.h	/^   long last_tell;		\/* idnum of last tell from		*\/$/;"	m	struct:player_special_data
lastsort	./shop.h	/^   int	 lastsort;		\/* How many items are sorted in inven?	*\/$/;"	m	struct:shop_data
learn	./structs.h	/^   byte learn;       \/* how many % a player learns a spell\/skill *\/$/;"	m	struct:int_app_type
len	./shop.h	/^   int len;$/;"	m	struct:stack_data
length	./modify.c	/^int length[] =$/;"	v
level	./act.wizard.c	/^    const char level;$/;"	m	struct:set_struct	file:
level	./boards.h	/^   int	level;        \/* level of poster *\/$/;"	m	struct:board_msginfo
level	./structs.h	/^   byte level;         \/* PC \/ NPC's level                     *\/$/;"	m	struct:char_player_data
level	./structs.h	/^   byte level;$/;"	m	struct:char_file_u
level_can_shout	./config.c	/^int level_can_shout = 1;$/;"	v
level_exp	./class.c	/^int level_exp(int chclass, int level)$/;"	f
lifespan	./db.h	/^   int	lifespan;           \/* how long between resets (minutes)  *\/$/;"	m	struct:zone_data
light	./structs.h	/^   byte light;                  \/* Number of lightsources in room     *\/$/;"	m	struct:room_data
line	./db.h	/^   int line;		\/* line number this command appears on  *\/$/;"	m	struct:reset_com
list_all_shops	./shop.c	/^void list_all_shops(struct char_data *ch)$/;"	f
list_char_to_char	./act.informative.c	/^void list_char_to_char(struct char_data *list, struct char_data *ch)$/;"	f
list_detailed_shop	./shop.c	/^void list_detailed_shop(struct char_data *ch, int shop_nr)$/;"	f
list_obj_to_char	./act.informative.c	/^void list_obj_to_char(struct obj_data *list, struct char_data *ch, int mode, int show)$/;"	f
list_object	./shop.c	/^char *list_object(struct obj_data *obj, int cnt, int aindex, int shop_nr, struct char_data *keeper, struct char_data *ch)$/;"	f
list_one_char	./act.informative.c	/^void list_one_char(struct char_data *i, struct char_data *ch)$/;"	f
list_skills	./spec_procs.c	/^void list_skills(struct char_data *ch)$/;"	f
list_start	./mail.h	/^   position_list_type *list_start;	\/* list of mail positions	*\/$/;"	m	struct:mail_index_type_d
list_top	./act.social.c	/^static int list_top = -1;$/;"	v	file:
load_banned	./ban.c	/^void load_banned(void)$/;"	f
load_char	./db.c	/^int load_char(const char *name, struct char_file_u *char_element)$/;"	f
load_help	./db.c	/^void load_help(FILE *fl)$/;"	f
load_into_inventory	./config.c	/^int load_into_inventory = NO;$/;"	v
load_messages	./fight.c	/^void load_messages(void)$/;"	f
load_room	./structs.h	/^   room_vnum load_room;		\/* Which room to place char in		*\/$/;"	m	struct:player_special_data_saved
load_zones	./db.c	/^void load_zones(FILE *fl, char *zonename)$/;"	f
location	./structs.h	/^   byte location;        \/* Tells which ability to change(APPLY_XXX)*\/$/;"	m	struct:affected_type
location	./structs.h	/^   byte location;      \/* Which ability to change (APPLY_XXX) *\/$/;"	m	struct:obj_affected_type
location	./structs.h	/^   sh_int location;$/;"	m	struct:obj_file_elem
log	./utils.h	17;"	d
log_death_trap	./utils.c	/^void log_death_trap(struct char_data *ch)$/;"	f
log_zone_error	./db.c	/^void log_zone_error(zone_rnum zone, int cmd_no, const char *message)$/;"	f
logfile	./comm.c	/^FILE *logfile = NULL;		\/* Where to send the log messages. *\/$/;"	v
login_time	./structs.h	/^   time_t login_time;		\/* when the person connected		*\/$/;"	m	struct:descriptor_data
logon	./structs.h	/^   time_t logon;    \/* Time of the last logon (used to calculate played) *\/$/;"	m	struct:time_data
logtypes	./act.wizard.c	/^const char *logtypes[] = {$/;"	v
long_descr	./structs.h	/^   char	*long_descr;   \/* for 'look'			       *\/$/;"	m	struct:char_player_data
look_at_char	./act.informative.c	/^void look_at_char(struct char_data *i, struct char_data *ch)$/;"	f
look_at_room	./act.informative.c	/^void look_at_room(struct char_data *ch, int ignore_brief)$/;"	f
look_at_target	./act.informative.c	/^void look_at_target(struct char_data *ch, char *arg)$/;"	f
look_in_direction	./act.informative.c	/^void look_in_direction(struct char_data *ch, int dir)$/;"	f
look_in_obj	./act.informative.c	/^void look_in_obj(struct char_data *ch, char *arg)$/;"	f
m	./random.c	45;"	d	file:
mag_affects	./magic.c	/^void mag_affects(int level, struct char_data *ch, struct char_data *victim,$/;"	f
mag_alter_objs	./magic.c	/^void mag_alter_objs(int level, struct char_data *ch, struct obj_data *obj,$/;"	f
mag_areas	./magic.c	/^void mag_areas(int level, struct char_data *ch, int spellnum, int savetype)$/;"	f
mag_assign_spells	./spell_parser.c	/^void mag_assign_spells(void)$/;"	f
mag_creations	./magic.c	/^void mag_creations(int level, struct char_data *ch, int spellnum)$/;"	f
mag_damage	./magic.c	/^int mag_damage(int level, struct char_data *ch, struct char_data *victim,$/;"	f
mag_groups	./magic.c	/^void mag_groups(int level, struct char_data *ch, int spellnum, int savetype)$/;"	f
mag_manacost	./spell_parser.c	/^int mag_manacost(struct char_data *ch, int spellnum)$/;"	f
mag_masses	./magic.c	/^void mag_masses(int level, struct char_data *ch, int spellnum, int savetype)$/;"	f
mag_materials	./magic.c	/^int mag_materials(struct char_data *ch, int item0, int item1, int item2,$/;"	f
mag_objectmagic	./spell_parser.c	/^void mag_objectmagic(struct char_data *ch, struct obj_data *obj,$/;"	f
mag_points	./magic.c	/^void mag_points(int level, struct char_data *ch, struct char_data *victim,$/;"	f
mag_savingthrow	./magic.c	/^int mag_savingthrow(struct char_data *ch, int type, int modifier)$/;"	f
mag_summon_fail_msgs	./magic.c	/^const char *mag_summon_fail_msgs[] = {$/;"	v
mag_summon_msgs	./magic.c	/^const char *mag_summon_msgs[] = {$/;"	v
mag_summons	./magic.c	/^void mag_summons(int level, struct char_data *ch, struct obj_data *obj,$/;"	f
mag_unaffects	./magic.c	/^void mag_unaffects(int level, struct char_data *ch, struct char_data *victim,$/;"	f
magic_user	./spec_assign.c	/^SPECIAL(magic_user);$/;"	v
magic_user	./spec_procs.c	/^SPECIAL(magic_user);$/;"	v
mail_index	./mail.c	/^mail_index_type *mail_index = NULL;	\/* list of recs in the mail file  *\/$/;"	v
mail_index_type	./mail.h	/^typedef struct mail_index_type_d mail_index_type;$/;"	t	typeref:struct:mail_index_type_d
mail_index_type_d	./mail.h	/^struct mail_index_type_d {$/;"	s
mail_recip_ok	./mail.c	/^int mail_recip_ok(const char *name)$/;"	f
mail_time	./mail.h	/^   time_t mail_time;		\/* when was the letter mailed?		*\/$/;"	m	struct:header_data_type
mail_to	./structs.h	/^   long	mail_to;		\/* name for mail system			*\/$/;"	m	struct:descriptor_data
main	./bsd-snprintf.c	/^main(void)$/;"	f
main	./comm.c	/^int main(int argc, char **argv)$/;"	f
make_corpse	./fight.c	/^void make_corpse(struct char_data *ch)$/;"	f
make_prompt	./comm.c	/^char *make_prompt(struct descriptor_data *d)$/;"	f
mana	./structs.h	/^   sh_int mana;$/;"	m	struct:char_point_data
mana_change	./spells.h	/^   int mana_change;	\/* Change in mana used by spell from lev to lev *\/$/;"	m	struct:spell_info_type
mana_gain	./limits.c	/^int mana_gain(struct char_data *ch)$/;"	f
mana_max	./spells.h	/^   int mana_max;	\/* Max amount of mana used by a spell (lowest lev) *\/$/;"	m	struct:spell_info_type
mana_min	./spells.h	/^   int mana_min;	\/* Min amount of mana used by a spell (highest lev) *\/$/;"	m	struct:spell_info_type
master	./structs.h	/^   struct char_data *master;             \/* Who is char following?        *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_data
max_bad_pws	./config.c	/^int max_bad_pws = 3;$/;"	v
max_exp_gain	./config.c	/^int max_exp_gain = 100000;	\/* max gainable per kill *\/$/;"	v
max_exp_loss	./config.c	/^int max_exp_loss = 500000;	\/* max losable per death *\/$/;"	v
max_filesize	./config.c	/^int max_filesize = 50000;$/;"	v
max_hit	./structs.h	/^   sh_int max_hit;      \/* Max hit for PC\/NPC                      *\/$/;"	m	struct:char_point_data
max_mana	./structs.h	/^   sh_int max_mana;     \/* Max mana for PC\/NPC			   *\/$/;"	m	struct:char_point_data
max_move	./structs.h	/^   sh_int max_move;     \/* Max move for PC\/NPC                     *\/$/;"	m	struct:char_point_data
max_npc_corpse_time	./config.c	/^int max_npc_corpse_time = 5;$/;"	v
max_obj_save	./config.c	/^int max_obj_save = 30;$/;"	v
max_pc_corpse_time	./config.c	/^int max_pc_corpse_time = 10;$/;"	v
max_players	./comm.c	/^int max_players = 0;		\/* max descriptors available *\/$/;"	v
max_playing	./config.c	/^int max_playing = 300;$/;"	v
max_str	./structs.h	/^   size_t max_str;	        \/*		-			*\/$/;"	m	struct:descriptor_data
mayor	./spec_assign.c	/^SPECIAL(mayor);$/;"	v
mayor	./spec_procs.c	/^SPECIAL(mayor);$/;"	v
member_of_royal_guard	./castle.c	/^int member_of_royal_guard(struct char_data *chChar)$/;"	f
member_of_staff	./castle.c	/^int member_of_staff(struct char_data *chChar)$/;"	f
memory	./structs.h	/^   memory_rec *memory;	    \/* List of attackers to remember	       *\/$/;"	m	struct:mob_special_data
memory_rec	./structs.h	/^typedef struct memory_rec_struct memory_rec;$/;"	t	typeref:struct:memory_rec_struct
memory_rec_struct	./structs.h	/^struct memory_rec_struct {$/;"	s
message_buy	./shop.h	/^   char	*message_buy;		\/* Message when player buys item	*\/$/;"	m	struct:shop_data
message_len	./boards.h	/^   int	message_len;  \/* size of message text (for file write) *\/$/;"	m	struct:board_msginfo
message_list	./structs.h	/^struct message_list {$/;"	s
message_sell	./shop.h	/^   char	*message_sell;		\/* Message when player sells item	*\/$/;"	m	struct:shop_data
message_type	./structs.h	/^struct message_type {$/;"	s
min_level	./spells.h	/^   int min_level[NUM_CLASSES];$/;"	m	struct:spell_info_type
min_position	./spells.h	/^   byte min_position;	\/* Position for caster	 *\/$/;"	m	struct:spell_info_type
min_rent_cost	./config.c	/^int min_rent_cost = 100;$/;"	v
min_victim_position	./act.social.c	/^  int min_victim_position;	\/* Position of victim *\/$/;"	m	struct:social_messg	file:
min_wizlist_lev	./config.c	/^int min_wizlist_lev = LVL_GOD;$/;"	v
mini_mud	./db.c	/^int mini_mud = 0;		\/* mini-mud mode?		 *\/$/;"	v
minimum_level	./interpreter.h	/^   sh_int minimum_level;$/;"	m	struct:command_info
minimum_position	./interpreter.h	/^   byte minimum_position;$/;"	m	struct:command_info
miss_att	./structs.h	/^   sh_int miss_att;$/;"	m	struct:dex_app_type
miss_msg	./structs.h	/^   struct msg_type miss_msg;	\/* messages when miss			*\/$/;"	m	struct:message_type	typeref:struct:message_type::msg_type
missing_cash1	./shop.h	/^   char	*missing_cash1;		\/* Message if keeper hasn't got cash	*\/$/;"	m	struct:shop_data
missing_cash2	./shop.h	/^   char	*missing_cash2;		\/* Message if player hasn't got cash	*\/$/;"	m	struct:shop_data
mob_index	./db.c	/^struct index_data *mob_index;	\/* index table for mobile file	 *\/$/;"	v	typeref:struct:index_data
mob_proto	./db.c	/^struct char_data *mob_proto;	\/* prototypes for mobs		 *\/$/;"	v	typeref:struct:char_data
mob_rnum	./structs.h	/^typedef IDXTYPE mob_rnum;$/;"	t
mob_special_data	./structs.h	/^struct mob_special_data {$/;"	s
mob_specials	./structs.h	/^   struct mob_special_data mob_specials;	\/* NPC specials		  *\/$/;"	m	struct:char_data	typeref:struct:char_data::mob_special_data
mob_vnum	./structs.h	/^typedef IDXTYPE mob_vnum;$/;"	t
mobile_activity	./mobact.c	/^void mobile_activity(void)$/;"	f
mode	./house.h	/^   int mode;			\/* mode of ownership		*\/$/;"	m	struct:house_control_rec
modifier	./structs.h	/^   sbyte modifier;       \/* This is added to apropriate ability     *\/$/;"	m	struct:affected_type
modifier	./structs.h	/^   sbyte modifier;     \/* How much it changes by              *\/$/;"	m	struct:obj_affected_type
money_desc	./handler.c	/^const char *money_desc(int amount)$/;"	f
month	./structs.h	/^   int hours, day, month;$/;"	m	struct:time_info_data
month_name	./constants.c	/^const char *month_name[] = {$/;"	v
mortal_start_room	./config.c	/^room_vnum mortal_start_room = 3001;$/;"	v
motd	./db.c	/^char *motd = NULL;		\/* message of the day - mortals *\/$/;"	v
move	./structs.h	/^   sh_int move;$/;"	m	struct:char_point_data
move_gain	./limits.c	/^int move_gain(struct char_data *ch)$/;"	f
movement_loss	./constants.c	/^int movement_loss[] =$/;"	v
msg	./structs.h	/^   struct message_type *msg;	\/* List of messages.			*\/$/;"	m	struct:message_list	typeref:struct:message_list::message_type
msg_index	./boards.c	/^struct board_msginfo msg_index[NUM_OF_BOARDS][MAX_BOARD_MESSAGES];$/;"	v	typeref:struct:board_msginfo
msg_storage	./boards.c	/^char *msg_storage[INDEX_SIZE];$/;"	v
msg_storage_taken	./boards.c	/^int msg_storage_taken[INDEX_SIZE];$/;"	v
msg_type	./structs.h	/^struct msg_type {$/;"	s
mud_time_passed	./utils.c	/^struct time_info_data *mud_time_passed(time_t t2, time_t t1)$/;"	f
mud_time_to_secs	./utils.c	/^time_t mud_time_to_secs(struct time_info_data *now)$/;"	f
mudlog	./utils.c	/^void mudlog(int type, int level, int file, const char *str, ...)$/;"	f
my_signal	./comm.c	/^sigfunc *my_signal(int signo, sigfunc *func)$/;"	f
my_signal	./comm.c	2121;"	d	file:
name	./db.h	/^   char	*name;		    \/* name of this zone                  *\/$/;"	m	struct:zone_data
name	./db.h	/^   char	*name;$/;"	m	struct:player_index_element
name	./db.h	/^   char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:ban_list_element
name	./spells.h	/^   const char *name;	\/* Input size not limited. Originates from string constants. *\/$/;"	m	struct:spell_info_type
name	./structs.h	/^   char	*name;	       \/* PC \/ NPC s name (kill ...  )         *\/$/;"	m	struct:char_player_data
name	./structs.h	/^   char	*name;                    \/* Title of object :get etc.        *\/$/;"	m	struct:obj_data
name	./structs.h	/^   char	*name;                  \/* Rooms name 'You are ...'           *\/$/;"	m	struct:room_data
name	./structs.h	/^   char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:char_file_u
name_from_drinkcon	./act.item.c	/^void name_from_drinkcon(struct obj_data *obj)$/;"	f
name_to_drinkcon	./act.item.c	/^void name_to_drinkcon(struct obj_data *obj, int type)$/;"	f
nameserver_is_slow	./config.c	/^int nameserver_is_slow = NO;$/;"	v
nanny	./interpreter.c	/^void nanny(struct descriptor_data *d, char *arg)$/;"	f
net_cost_per_diem	./structs.h	/^   int	net_cost_per_diem;$/;"	m	struct:rent_info
new_descriptor	./comm.c	/^int new_descriptor(socket_t s)$/;"	f
news	./db.c	/^char *news = NULL;		\/* mud news			 *\/$/;"	v
news	./spell_parser.c	/^  const char *news;$/;"	m	struct:syllable	file:
next	./db.h	/^   struct ban_list_element *next;$/;"	m	struct:ban_list_element	typeref:struct:ban_list_element::ban_list_element
next	./db.h	/^   struct reset_q_element *next;$/;"	m	struct:reset_q_element	typeref:struct:reset_q_element::reset_q_element
next	./graph.c	/^  struct bfs_queue_struct *next;$/;"	m	struct:bfs_queue_struct	typeref:struct:bfs_queue_struct::bfs_queue_struct	file:
next	./interpreter.h	/^  struct alias_data *next;$/;"	m	struct:alias_data	typeref:struct:alias_data::alias_data
next	./mail.h	/^   struct mail_index_type_d *next;	\/* link to next one		*\/$/;"	m	struct:mail_index_type_d	typeref:struct:mail_index_type_d::mail_index_type_d
next	./mail.h	/^   struct position_list_type_d *next;$/;"	m	struct:position_list_type_d	typeref:struct:position_list_type_d::position_list_type_d
next	./structs.h	/^   struct affected_type *next;$/;"	m	struct:affected_type	typeref:struct:affected_type::affected_type
next	./structs.h	/^   struct char_data *next;             \/* For either monster or ppl-list  *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_data
next	./structs.h	/^   struct descriptor_data *next; \/* link to next descriptor		*\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::descriptor_data
next	./structs.h	/^   struct extra_descr_data *next; \/* Next in list                     *\/$/;"	m	struct:extra_descr_data	typeref:struct:extra_descr_data::extra_descr_data
next	./structs.h	/^   struct follow_type *next;$/;"	m	struct:follow_type	typeref:struct:follow_type::follow_type
next	./structs.h	/^   struct memory_rec_struct *next;$/;"	m	struct:memory_rec_struct	typeref:struct:memory_rec_struct::memory_rec_struct
next	./structs.h	/^   struct message_type *next;	\/* to next messages of this kind.	*\/$/;"	m	struct:message_type	typeref:struct:message_type::message_type
next	./structs.h	/^   struct obj_data *next;         \/* For the object list              *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::obj_data
next	./structs.h	/^   struct txt_block *next;$/;"	m	struct:txt_block	typeref:struct:txt_block::txt_block
next_block	./mail.h	/^   long	next_block;		\/* if header block, link to next block	*\/$/;"	m	struct:header_data_type
next_combat_list	./fight.c	/^struct char_data *next_combat_list = NULL;$/;"	v	typeref:struct:char_data
next_content	./structs.h	/^   struct obj_data *next_content; \/* For 'contains' lists             *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::obj_data
next_fighting	./structs.h	/^   struct char_data *next_fighting;    \/* For fighting list               *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_data
next_in_room	./structs.h	/^   struct char_data *next_in_room;     \/* For room->people - list         *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_data
next_page	./modify.c	/^char *next_page(char *str)$/;"	f
nitems	./structs.h	/^   int	nitems;$/;"	m	struct:rent_info
no_mail	./db.c	/^int no_mail = 0;		\/* mail disabled?		 *\/$/;"	v
no_rent_check	./db.c	/^int no_rent_check = 0;		\/* skip rent check on boot?	 *\/$/;"	v
no_specials	./comm.c	/^int no_specials = 0;		\/* Suppress ass. of special routines *\/$/;"	v
no_such_item1	./shop.h	/^   char	*no_such_item1;		\/* Message if keeper hasn't got an item	*\/$/;"	m	struct:shop_data
no_such_item2	./shop.h	/^   char	*no_such_item2;		\/* Message if player hasn't got an item	*\/$/;"	m	struct:shop_data
nonblock	./comm.c	/^void nonblock(socket_t s)$/;"	f
not_found	./act.social.c	/^  char *not_found;$/;"	m	struct:social_messg	file:
npc_class_types	./constants.c	/^const char *npc_class_types[] = {$/;"	v
npc_steal	./spec_procs.c	/^void npc_steal(struct char_data *ch, struct char_data *victim)$/;"	f
nr	./structs.h	/^   mob_rnum nr;                          \/* Mob's rnum			  *\/$/;"	m	struct:char_data
null_time	./comm.c	/^struct timeval null_time;	\/* zero-valued time structure *\/$/;"	v	typeref:struct:timeval
num_followers_charmed	./utils.c	/^int num_followers_charmed(struct char_data *ch)$/;"	f
num_invalid	./ban.c	/^int num_invalid = 0;$/;"	v
num_of_guests	./house.h	/^   int num_of_guests;		\/* how many guests for house	*\/$/;"	m	struct:house_control_rec
num_of_houses	./house.c	/^int num_of_houses = 0;$/;"	v
num_of_msgs	./boards.c	/^int num_of_msgs[NUM_OF_BOARDS];$/;"	v
num_pc_in_room	./utils.c	/^int num_pc_in_room(struct room_data *room)$/;"	f
number	./db.h	/^   zone_vnum number;	    \/* virtual number of this zone	  *\/$/;"	m	struct:zone_data
number	./structs.h	/^   int		number;	\/* number of existing units of this mob\/obj	*\/$/;"	m	struct:index_data
number	./structs.h	/^   room_vnum number;		\/* Rooms number	(vnum)		      *\/$/;"	m	struct:room_data
number_of_attacks	./structs.h	/^   int	number_of_attacks;	\/* How many attack messages to chose from. *\/$/;"	m	struct:message_list
obj_affected_type	./structs.h	/^struct obj_affected_type {$/;"	s
obj_data	./structs.h	/^struct obj_data {$/;"	s
obj_file_elem	./structs.h	/^struct obj_file_elem {$/;"	s
obj_flag_data	./structs.h	/^struct obj_flag_data {$/;"	s
obj_flags	./structs.h	/^   struct obj_flag_data obj_flags;\/* Object information               *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::obj_flag_data
obj_from_char	./handler.c	/^void obj_from_char(struct obj_data *object)$/;"	f
obj_from_obj	./handler.c	/^void obj_from_obj(struct obj_data *obj)$/;"	f
obj_from_room	./handler.c	/^void obj_from_room(struct obj_data *object)$/;"	f
obj_index	./db.c	/^struct index_data *obj_index;	\/* index table for object file	 *\/$/;"	v	typeref:struct:index_data
obj_proto	./db.c	/^struct obj_data *obj_proto;	\/* prototypes for objs		 *\/$/;"	v	typeref:struct:obj_data
obj_rnum	./structs.h	/^typedef IDXTYPE obj_rnum;$/;"	t
obj_to_char	./handler.c	/^void obj_to_char(struct obj_data *object, struct char_data *ch)$/;"	f
obj_to_obj	./handler.c	/^void obj_to_obj(struct obj_data *obj, struct obj_data *obj_to)$/;"	f
obj_to_room	./handler.c	/^void obj_to_room(struct obj_data *object, room_rnum room)$/;"	f
obj_vnum	./structs.h	/^typedef IDXTYPE obj_vnum;$/;"	t
object_list	./db.c	/^struct obj_data *object_list = NULL;	\/* global linked list of objs	 *\/$/;"	v	typeref:struct:obj_data
object_list_new_owner	./handler.c	/^void object_list_new_owner(struct obj_data *list, struct char_data *ch)$/;"	f
ok_damage_shopkeeper	./shop.c	/^int ok_damage_shopkeeper(struct char_data *ch, struct char_data *victim)$/;"	f
ok_pick	./act.movement.c	/^int ok_pick(struct char_data *ch, obj_vnum keynum, int pickproof, int scmd)$/;"	f
ok_shop_room	./shop.c	/^int ok_shop_room(int shop_nr, room_vnum room)$/;"	f
olc_bitvector	./olc.c	/^void olc_bitvector(int *bv, const char **names, char *arg)$/;"	f
olc_ch	./olc.c	/^struct char_data *olc_ch;$/;"	v	typeref:struct:char_data
olc_commands	./olc.c	/^const char *olc_commands[] = {$/;"	v
olc_interpreter	./olc.c	/^void olc_interpreter(void *targ, int mode, char *arg)$/;"	f
olc_modes	./olc.c	/^const char *olc_modes[] = {$/;"	v
olc_set_show	./olc.c	/^void olc_set_show(struct char_data *ch, int olc_mode, char *arg)$/;"	f
olc_string	./olc.c	/^void olc_string(char **string, size_t maxlen, char *arg)$/;"	f
one_argument	./interpreter.c	/^char *one_argument(char *argument, char *first_arg)$/;"	f
one_word	./interpreter.c	/^char *one_word(char *argument, char *first_arg)$/;"	f
open1	./shop.h	/^   int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
open2	./shop.h	/^   int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
open_logfile	./comm.c	/^int open_logfile(const char *filename, FILE *stderr_fp)$/;"	f
operator_str	./shop.c	/^const char *operator_str[] = {$/;"	v
org	./spell_parser.c	/^  const char *org;$/;"	m	struct:syllable	file:
original	./structs.h	/^   struct char_data *original;	\/* original char if switched		*\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::char_data
others_auto	./act.social.c	/^  char *others_auto;$/;"	m	struct:social_messg	file:
others_found	./act.social.c	/^  char *others_found;$/;"	m	struct:social_messg	file:
others_no_arg	./act.social.c	/^  char *others_no_arg;$/;"	m	struct:social_messg	file:
output	./structs.h	/^   char *output;		\/* ptr to the current output buffer	*\/$/;"	m	struct:descriptor_data
owner	./house.h	/^   long owner;			\/* idnum of house's owner	*\/$/;"	m	struct:house_control_rec
p_locks	./structs.h	/^   sh_int p_locks;$/;"	m	struct:dex_skill_type
p_pocket	./structs.h	/^   sh_int p_pocket;$/;"	m	struct:dex_skill_type
page_string	./modify.c	/^void page_string(struct descriptor_data *d, char *str, int keep_internal)$/;"	f
paginate_string	./modify.c	/^void paginate_string(char *str, struct descriptor_data *d)$/;"	f
parse_class	./class.c	/^int parse_class(char arg)$/;"	f
parse_enhanced_mob	./db.c	/^void parse_enhanced_mob(FILE *mob_f, int i, int nr)$/;"	f
parse_espec	./db.c	/^void parse_espec(char *buf, int i, int nr)$/;"	f
parse_ip	./comm.c	/^int parse_ip(const char *addr, struct in_addr *inaddr)$/;"	f
parse_mobile	./db.c	/^void parse_mobile(FILE *mob_f, int nr)$/;"	f
parse_object	./db.c	/^char *parse_object(FILE *obj_f, int nr)$/;"	f
parse_room	./db.c	/^void parse_room(FILE *fl, int virtual_nr)$/;"	f
parse_simple_mob	./db.c	/^void parse_simple_mob(FILE *mob_f, int i, int nr)$/;"	f
passwd	./structs.h	/^   char	passwd[MAX_PWD_LENGTH+1]; \/* character's password      *\/$/;"	m	struct:char_player_data
pc_class	./structs.h	/^  int pc_class;$/;"	m	struct:guild_info_type
pc_class_types	./class.c	/^const char *pc_class_types[] = {$/;"	v
pcnpc	./act.wizard.c	/^    const char pcnpc;$/;"	m	struct:set_struct	file:
people	./structs.h	/^   struct char_data *people;    \/* List of NPC \/ PC in room           *\/$/;"	m	struct:room_data	typeref:struct:room_data::char_data
perform_act	./comm.c	/^void perform_act(const char *orig, struct char_data *ch, struct obj_data *obj,$/;"	f
perform_alias	./interpreter.c	/^int perform_alias(struct descriptor_data *d, char *orig, size_t maxlen)$/;"	f
perform_complex_alias	./interpreter.c	/^void perform_complex_alias(struct txt_q *input_q, char *orig, struct alias_data *a)$/;"	f
perform_drop	./act.item.c	/^int perform_drop(struct char_data *ch, struct obj_data *obj,$/;"	f
perform_drop_gold	./act.item.c	/^void perform_drop_gold(struct char_data *ch, int amount,$/;"	f
perform_dupe_check	./interpreter.c	/^int perform_dupe_check(struct descriptor_data *d)$/;"	f
perform_get_from_container	./act.item.c	/^void perform_get_from_container(struct char_data *ch, struct obj_data *obj,$/;"	f
perform_get_from_room	./act.item.c	/^int perform_get_from_room(struct char_data *ch, struct obj_data *obj)$/;"	f
perform_give	./act.item.c	/^void perform_give(struct char_data *ch, struct char_data *vict,$/;"	f
perform_give_gold	./act.item.c	/^void perform_give_gold(struct char_data *ch, struct char_data *vict,$/;"	f
perform_group	./act.other.c	/^int perform_group(struct char_data *ch, struct char_data *vict)$/;"	f
perform_group_gain	./fight.c	/^void perform_group_gain(struct char_data *ch, int base,$/;"	f
perform_immort_invis	./act.wizard.c	/^void perform_immort_invis(struct char_data *ch, int level)$/;"	f
perform_immort_vis	./act.wizard.c	/^void perform_immort_vis(struct char_data *ch)$/;"	f
perform_immort_where	./act.informative.c	/^void perform_immort_where(struct char_data *ch, char *arg)$/;"	f
perform_mag_groups	./magic.c	/^void perform_mag_groups(int level, struct char_data *ch,$/;"	f
perform_mortal_where	./act.informative.c	/^void perform_mortal_where(struct char_data *ch, char *arg)$/;"	f
perform_move	./act.movement.c	/^int perform_move(struct char_data *ch, int dir, int need_specials_check)$/;"	f
perform_put	./act.item.c	/^void perform_put(struct char_data *ch, struct obj_data *obj,$/;"	f
perform_remove	./act.item.c	/^void perform_remove(struct char_data *ch, int pos)$/;"	f
perform_set	./act.wizard.c	/^int perform_set(struct char_data *ch, struct char_data *vict, int mode,$/;"	f
perform_socket_read	./comm.c	/^ssize_t perform_socket_read(socket_t desc, char *read_point, size_t space_left)$/;"	f
perform_socket_write	./comm.c	/^ssize_t perform_socket_write(socket_t desc, const char *txt, size_t length)$/;"	f
perform_subst	./comm.c	/^int perform_subst(struct descriptor_data *t, char *orig, char *subst)$/;"	f
perform_tell	./act.comm.c	/^void perform_tell(struct char_data *ch, struct char_data *vict, char *arg)$/;"	f
perform_violence	./fight.c	/^void perform_violence(void)$/;"	f
perform_wear	./act.item.c	/^void perform_wear(struct char_data *ch, struct obj_data *obj, int where)$/;"	f
pet_shops	./spec_assign.c	/^SPECIAL(pet_shops);$/;"	v
pet_shops	./spec_procs.c	/^SPECIAL(pet_shops);$/;"	v
peter	./castle.c	/^SPECIAL(peter);$/;"	v
pfilepos	./structs.h	/^   int pfilepos;			 \/* playerfile pos		  *\/$/;"	m	struct:char_data
pk_allowed	./config.c	/^int pk_allowed = NO;$/;"	v
played	./structs.h	/^   int	played;     \/* This is the total accumulated time played in secs *\/$/;"	m	struct:time_data
played	./structs.h	/^   int	played;    \/* Number of secs played in total *\/$/;"	m	struct:char_file_u
player	./structs.h	/^   struct char_player_data player;       \/* Normal data                   *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_player_data
player_bits	./constants.c	/^const char *player_bits[] = {$/;"	v
player_fl	./db.c	/^FILE *player_fl = NULL;		\/* file desc of player file	 *\/$/;"	v
player_index_element	./db.h	/^struct player_index_element {$/;"	s
player_special_data	./structs.h	/^struct player_special_data {$/;"	s
player_special_data_saved	./structs.h	/^struct player_special_data_saved {$/;"	s
player_specials	./structs.h	/^   struct player_special_data *player_specials; \/* PC specials		  *\/$/;"	m	struct:char_data	typeref:struct:char_data::player_special_data
player_specials_saved	./structs.h	/^   struct player_special_data_saved player_specials_saved;$/;"	m	struct:char_file_u	typeref:struct:char_file_u::player_special_data_saved
player_table	./db.c	/^struct player_index_element *player_table = NULL;	\/* index to plr file	 *\/$/;"	v	typeref:struct:player_index_element
plural	./spells.h	/^   const char	*plural;$/;"	m	struct:attack_hit_type
point_update	./limits.c	/^void point_update(void)$/;"	f
points	./structs.h	/^   struct char_point_data points;        \/* Points                        *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_point_data
points	./structs.h	/^   struct char_point_data points;$/;"	m	struct:char_file_u	typeref:struct:char_file_u::char_point_data
policies	./db.c	/^char *policies = NULL;		\/* policies page		 *\/$/;"	v
poofin	./structs.h	/^   char	*poofin;		\/* Description on arrival of a god.     *\/$/;"	m	struct:player_special_data
poofout	./structs.h	/^   char	*poofout;		\/* Description upon a god's exit.       *\/$/;"	m	struct:player_special_data
pop	./shop.c	/^int pop(struct stack_data *stack)$/;"	f
pop_free_list	./mail.c	/^long pop_free_list(void)$/;"	f
position	./mail.h	/^   long	position;$/;"	m	struct:position_list_type_d
position	./structs.h	/^   byte position;		\/* Standing, fighting, sleeping, etc.	*\/$/;"	m	struct:char_special_data
position_list_type	./mail.h	/^typedef struct position_list_type_d position_list_type;$/;"	t	typeref:struct:position_list_type_d
position_list_type_d	./mail.h	/^struct position_list_type_d {$/;"	s
position_types	./constants.c	/^const char *position_types[] = {$/;"	v
postmaster	./mail.c	/^SPECIAL(postmaster);$/;"	v
postmaster	./spec_assign.c	/^SPECIAL(postmaster);$/;"	v
postmaster_check_mail	./mail.c	/^void postmaster_check_mail(struct char_data *ch, struct char_data *mailman,$/;"	f
postmaster_receive_mail	./mail.c	/^void postmaster_receive_mail(struct char_data *ch, struct char_data *mailman,$/;"	f
postmaster_send_mail	./mail.c	/^void postmaster_send_mail(struct char_data *ch, struct char_data *mailman,$/;"	f
pow10	./bsd-snprintf.c	/^pow10(int exp)$/;"	f	file:
prac_params	./class.c	/^int prac_params[4][NUM_CLASSES] = {$/;"	v
prac_types	./spec_procs.c	/^const char *prac_types[] = {$/;"	v
pref	./structs.h	/^   long \/*bitvector_t*\/	pref;	\/* preference flags for PC's.		*\/$/;"	m	struct:player_special_data_saved
preference_bits	./constants.c	/^const char *preference_bits[] = {$/;"	v
pressure	./structs.h	/^   int	pressure;	\/* How is the pressure ( Mb ) *\/$/;"	m	struct:weather_data
print_group	./act.other.c	/^void print_group(struct char_data *ch)$/;"	f
print_object_location	./act.informative.c	/^void print_object_location(int num, struct obj_data *obj, struct char_data *ch,$/;"	f
print_zone_to_buf	./act.wizard.c	/^size_t print_zone_to_buf(char *bufptr, size_t left, zone_rnum zone)$/;"	f
process_input	./comm.c	/^int process_input(struct descriptor_data *t)$/;"	f
process_output	./comm.c	/^int process_output(struct descriptor_data *t)$/;"	f
producing	./shop.h	/^   obj_vnum *producing;		\/* Which item to produce (virtual)	*\/$/;"	m	struct:shop_data
profit_buy	./shop.h	/^   float profit_buy;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
profit_sell	./shop.h	/^   float profit_sell;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
prune_crlf	./utils.c	/^void prune_crlf(char *txt)$/;"	f
pt_allowed	./config.c	/^int pt_allowed = NO;$/;"	v
puff	./spec_assign.c	/^SPECIAL(puff);$/;"	v
puff	./spec_procs.c	/^SPECIAL(puff);$/;"	v
push	./shop.c	/^void push(struct stack_data *stack, int pushval)$/;"	f
push_free_list	./mail.c	/^void push_free_list(long pos)$/;"	f
pwd	./structs.h	/^   char	pwd[MAX_PWD_LENGTH+1];    \/* character's password *\/$/;"	m	struct:char_file_u
q	./random.c	46;"	d	file:
queue_head	./graph.c	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	typeref:struct:bfs_queue_struct	file:
queue_tail	./graph.c	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	typeref:struct:	file:
r	./random.c	49;"	d	file:
r_frozen_start_room	./db.c	/^room_rnum r_frozen_start_room;	\/* rnum of frozen start room	 *\/$/;"	v
r_immort_start_room	./db.c	/^room_rnum r_immort_start_room;	\/* rnum of immort start room	 *\/$/;"	v
r_mortal_start_room	./db.c	/^room_rnum r_mortal_start_room;	\/* rnum of mortal start room	 *\/$/;"	v
rand_number	./utils.c	/^int rand_number(int from, int to)$/;"	f
raw_kill	./fight.c	/^void raw_kill(struct char_data *ch)$/;"	f
reaction	./structs.h	/^   sh_int reaction;$/;"	m	struct:dex_app_type
read_aliases	./alias.c	/^void read_aliases(struct char_data *ch)$/;"	f
read_delete	./mail.c	/^char *read_delete(long recipient)$/;"	f
read_from_file	./mail.c	/^void read_from_file(void *buf, int size, long filepos)$/;"	f
read_line	./shop.c	/^void read_line(FILE *shop_f, const char *string, void *data)$/;"	f
read_list	./shop.c	/^int read_list(FILE *shop_f, struct shop_buy_data *list, int new_format,$/;"	f
read_lvl	./boards.h	/^   int	read_lvl;	\/* min level to read messages on this board *\/$/;"	m	struct:board_info_type
read_mobile	./db.c	/^struct char_data *read_mobile(mob_vnum nr, int type) \/* and mob_rnum *\/$/;"	f
read_object	./db.c	/^struct obj_data *read_object(obj_vnum nr, int type) \/* and obj_rnum *\/$/;"	f
read_shop_message	./shop.c	/^char *read_shop_message(int mnum, room_vnum shr, FILE *shop_f, const char *why)$/;"	f
read_type_list	./shop.c	/^int read_type_list(FILE *shop_f, struct shop_buy_data *list,$/;"	f
real_abils	./structs.h	/^   struct char_ability_data real_abils;	 \/* Abilities without modifiers   *\/$/;"	m	struct:char_data	typeref:struct:char_data::char_ability_data
real_mobile	./db.c	/^mob_rnum real_mobile(mob_vnum vnum)$/;"	f
real_object	./db.c	/^obj_rnum real_object(obj_vnum vnum)$/;"	f
real_room	./db.c	/^room_rnum real_room(room_vnum vnum)$/;"	f
real_time_passed	./utils.c	/^struct time_info_data *real_time_passed(time_t t2, time_t t1)$/;"	f
real_zone	./db.c	/^room_rnum real_zone(room_vnum vnum)$/;"	f
reap	./comm.c	/^RETSIGTYPE reap(int sig)$/;"	f
reboot_wizlists	./db.c	/^void reboot_wizlists(void)$/;"	f
receptionist	./objsave.c	/^SPECIAL(receptionist);$/;"	v
receptionist	./spec_assign.c	/^SPECIAL(receptionist);$/;"	v
recipient	./mail.h	/^   long recipient;			\/* who is this mail for?	*\/$/;"	m	struct:mail_index_type_d
record_usage	./comm.c	/^void record_usage(void)$/;"	f
remember	./mobact.c	/^void remember(struct char_data *ch, struct char_data *victim)$/;"	f
remove_lvl	./boards.h	/^   int	remove_lvl;	\/* min level to remove messages from this board *\/$/;"	m	struct:board_info_type
rent_file_timeout	./config.c	/^int rent_file_timeout = 30;$/;"	v
rent_info	./structs.h	/^struct rent_info {$/;"	s
rentcode	./structs.h	/^   int	rentcode;$/;"	m	struct:rent_info
renum_world	./db.c	/^void renum_world(void)$/;"	f
renum_zone_table	./db.c	/^void renum_zone_table(void)$/;"	f
replace_string	./fight.c	/^char *replace_string(const char *str, const char *weapon_singular, const char *weapon_plural)$/;"	f
replacement	./interpreter.h	/^  char *replacement;$/;"	m	struct:alias_data
reread_wizlist	./comm.c	/^byte reread_wizlist;		\/* signal: SIGUSR1 *\/$/;"	v
reread_wizlists	./comm.c	/^RETSIGTYPE reread_wizlists(int sig)$/;"	f
reserved	./interpreter.c	/^const char *reserved[] =$/;"	v
reserved_word	./interpreter.c	/^int reserved_word(char *argument)$/;"	f
reset_char	./db.c	/^void reset_char(struct char_data *ch)$/;"	f
reset_com	./db.h	/^struct reset_com {$/;"	s
reset_mode	./db.h	/^   int	reset_mode;         \/* conditions for reset (see below)   *\/$/;"	m	struct:zone_data
reset_q	./db.c	/^struct reset_q_type reset_q;	\/* queue of zones to be reset	 *\/$/;"	v	typeref:struct:reset_q_type
reset_q_element	./db.h	/^struct reset_q_element {$/;"	s
reset_q_type	./db.h	/^struct reset_q_type {$/;"	s
reset_time	./db.c	/^void reset_time(void)$/;"	f
reset_zone	./db.c	/^void reset_zone(zone_rnum zone)$/;"	f
rev_dir	./constants.c	/^int rev_dir[] =$/;"	v
rnum	./boards.h	/^   obj_rnum rnum;	\/* rnum of this board *\/$/;"	m	struct:board_info_type
roll_real_abils	./class.c	/^void roll_real_abils(struct char_data *ch)$/;"	f
room	./graph.c	/^  room_rnum room;$/;"	m	struct:bfs_queue_struct	file:
room_bits	./constants.c	/^const char *room_bits[] = {$/;"	v
room_bits_count	./constants.c	/^size_t	room_bits_count = sizeof(room_bits) \/ sizeof(room_bits[0]) - 1,$/;"	v
room_data	./structs.h	/^struct room_data {$/;"	s
room_direction_data	./structs.h	/^struct room_direction_data {$/;"	s
room_flags	./structs.h	/^   int \/*bitvector_t*\/ room_flags;		\/* DEATH,DARK ... etc *\/$/;"	m	struct:room_data
room_is_dark	./utils.c	/^int room_is_dark(room_rnum room)$/;"	f
room_msg	./structs.h	/^   char	*room_msg;      \/* message to room     *\/$/;"	m	struct:msg_type
room_rnum	./structs.h	/^typedef IDXTYPE room_rnum;$/;"	t
room_vnum	./structs.h	/^typedef IDXTYPE room_vnum;$/;"	t
round	./bsd-snprintf.c	/^round(long double value)$/;"	f	file:
routines	./spells.h	/^   int routines;$/;"	m	struct:spell_info_type
run_autowiz	./limits.c	/^void run_autowiz(void)$/;"	f
s_addr	./sysdep.h	/^  unsigned long int s_addr;	\/* for inet_addr, etc. *\/$/;"	m	struct:in_addr
same_obj	./shop.c	/^int same_obj(struct obj_data *obj1, struct obj_data *obj2)$/;"	f
save_char	./db.c	/^void save_char(struct char_data *ch)$/;"	f
save_etext	./db.c	/^void save_etext(struct char_data *ch)$/;"	f
save_mud_time	./db.c	/^void save_mud_time(struct time_info_data *when)$/;"	f
saved	./structs.h	/^   struct char_special_data_saved saved; \/* constants saved in plrfile	*\/$/;"	m	struct:char_special_data	typeref:struct:char_special_data::char_special_data_saved
saved	./structs.h	/^   struct player_special_data_saved saved;$/;"	m	struct:player_special_data	typeref:struct:player_special_data::player_special_data_saved
saving_throws	./class.c	/^byte saving_throws(int class_num, int type, int level)$/;"	f
say_spell	./spell_parser.c	/^void say_spell(struct char_data *ch, int spellnum, struct char_data *tch,$/;"	f
sbyte	./structs.h	/^typedef signed char		sbyte;$/;"	t
scan_file	./mail.c	/^int scan_file(void)$/;"	f
scheck	./comm.c	/^int scheck = 0;			\/* for syntax checking mode *\/$/;"	v
search_block	./interpreter.c	/^int search_block(char *arg, const char **list, int exact)$/;"	f
sector_type	./structs.h	/^   int	sector_type;            \/* sector type (move\/hide)            *\/$/;"	m	struct:room_data
sector_types	./constants.c	/^const char *sector_types[] = {$/;"	v
seed	./random.c	/^static unsigned long seed;$/;"	v	file:
sell_price	./shop.c	/^int sell_price(struct obj_data *obj, int shop_nr, struct char_data *keeper, struct char_data *seller)$/;"	f
send_to_all	./comm.c	/^void send_to_all(const char *messg, ...)$/;"	f
send_to_char	./comm.c	/^size_t send_to_char(struct char_data *ch, const char *messg, ...)$/;"	f
send_to_outdoor	./comm.c	/^void send_to_outdoor(const char *messg, ...)$/;"	f
send_to_room	./comm.c	/^void send_to_room(room_rnum room, const char *messg, ...)$/;"	f
set_fields	./act.wizard.c	/^  } set_fields[] = {$/;"	v	typeref:struct:set_struct
set_fighting	./fight.c	/^void set_fighting(struct char_data *ch, struct char_data *vict)$/;"	f
set_sendbuf	./comm.c	/^int set_sendbuf(socket_t s)$/;"	f
set_struct	./act.wizard.c	/^  struct set_struct {$/;"	s	file:
set_title	./limits.c	/^void set_title(struct char_data *ch, char *title)$/;"	f
setup_dir	./db.c	/^void setup_dir(FILE *fl, int room, int dir)$/;"	f
setup_log	./comm.c	/^void setup_log(const char *filename, int fd)$/;"	f
sex	./structs.h	/^   byte sex;           \/* PC \/ NPC's sex                       *\/$/;"	m	struct:char_player_data
sex	./structs.h	/^   byte sex;$/;"	m	struct:char_file_u
sh_int	./structs.h	/^typedef signed short int	sh_int;$/;"	t
shock	./structs.h	/^   sh_int shock;$/;"	m	struct:con_app_type
shop_bits	./shop.c	/^const char *shop_bits[] = {$/;"	v
shop_buy_data	./shop.h	/^struct shop_buy_data {$/;"	s
shop_data	./shop.h	/^struct shop_data {$/;"	s
shop_index	./shop.c	/^struct shop_data *shop_index;$/;"	v	typeref:struct:shop_data
shop_keeper	./act.other.c	/^SPECIAL(shop_keeper);$/;"	v
shop_keeper	./shop.c	/^SPECIAL(shop_keeper);$/;"	v
shop_producing	./shop.c	/^int shop_producing(struct obj_data *item, int shop_nr)$/;"	f
shop_rnum	./structs.h	/^typedef IDXTYPE shop_rnum;$/;"	t
shop_vnum	./structs.h	/^typedef IDXTYPE shop_vnum;$/;"	t
shopping_buy	./shop.c	/^void shopping_buy(char *arg, struct char_data *ch, struct char_data *keeper, int shop_nr)$/;"	f
shopping_list	./shop.c	/^void shopping_list(char *arg, struct char_data *ch, struct char_data *keeper, int shop_nr)$/;"	f
shopping_sell	./shop.c	/^void shopping_sell(char *arg, struct char_data *ch, struct char_data *keeper, int shop_nr)$/;"	f
shopping_value	./shop.c	/^void shopping_value(char *arg, struct char_data *ch, struct char_data *keeper, int shop_nr)$/;"	f
short_descr	./structs.h	/^   char	*short_descr;  \/* for NPC 'actions'                    *\/$/;"	m	struct:char_player_data
short_description	./structs.h	/^   char	*short_description;       \/* when worn\/carry\/in cont.         *\/$/;"	m	struct:obj_data
show_obj_modifiers	./act.informative.c	/^void show_obj_modifiers(struct obj_data *obj, struct char_data *ch)$/;"	f
show_obj_to_char	./act.informative.c	/^void show_obj_to_char(struct obj_data *obj, struct char_data *ch, int mode)$/;"	f
show_shops	./shop.c	/^void show_shops(struct char_data *ch, char *arg)$/;"	f
show_string	./modify.c	/^void show_string(struct descriptor_data *d, char *input)$/;"	f
showstr_count	./structs.h	/^   int  showstr_count;		\/* number of pages to page through	*\/$/;"	m	struct:descriptor_data
showstr_head	./structs.h	/^   char *showstr_head;		\/* for keeping track of an internal str	*\/$/;"	m	struct:descriptor_data
showstr_page	./structs.h	/^   int  showstr_page;		\/* which page are we currently showing?	*\/$/;"	m	struct:descriptor_data
showstr_vector	./structs.h	/^   char **showstr_vector;	\/* for paging through texts		*\/$/;"	m	struct:descriptor_data
sigfunc	./comm.h	/^typedef RETSIGTYPE sigfunc(int);$/;"	t
signal_setup	./comm.c	/^void signal_setup(void)$/;"	f
singular	./spells.h	/^   const char	*singular;$/;"	m	struct:attack_hit_type
site	./db.h	/^   char	site[BANNED_SITE_LENGTH+1];$/;"	m	struct:ban_list_element
siteok_everyone	./config.c	/^int siteok_everyone = TRUE;$/;"	v
skill_message	./fight.c	/^int skill_message(int dam, struct char_data *ch, struct char_data *vict,$/;"	f
skill_name	./spell_parser.c	/^const char *skill_name(int num)$/;"	f
skillo	./spell_parser.c	707;"	d	file:
skills	./structs.h	/^   byte skills[MAX_SKILLS+1];	\/* array of skills plus skill 0		*\/$/;"	m	struct:player_special_data_saved
skip_spaces	./interpreter.c	/^void skip_spaces(char **string)$/;"	f
sky	./structs.h	/^   int	sky;	\/* How is the sky. *\/$/;"	m	struct:weather_data
slc_names	./telnet.h	/^char *slc_names[] = {$/;"	v
slide_obj	./shop.c	/^struct obj_data *slide_obj(struct obj_data *obj, struct char_data *keeper,$/;"	f
slot_num	./boards.h	/^   int	slot_num;     \/* pos of message in "master index" *\/$/;"	m	struct:board_msginfo
small_outbuf	./structs.h	/^   char small_outbuf[SMALL_BUFSIZE];  \/* standard output buffer		*\/$/;"	m	struct:descriptor_data
smash_tilde	./modify.c	/^void smash_tilde(char *str)$/;"	f
snake	./spec_assign.c	/^SPECIAL(snake);$/;"	v
snake	./spec_procs.c	/^SPECIAL(snake);$/;"	v
sneak	./structs.h	/^   sh_int sneak;$/;"	m	struct:dex_skill_type
snoop_by	./structs.h	/^   struct descriptor_data *snoop_by; \/* And who is snooping this char	*\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::descriptor_data
snoop_check	./act.wizard.c	/^void snoop_check(struct char_data *ch)$/;"	f
snooping	./structs.h	/^   struct descriptor_data *snooping; \/* Who is this char snooping	*\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::descriptor_data
snprintf	./bsd-snprintf.c	/^snprintf(char *str,size_t count,const char *fmt,...)$/;"	f
snprintf	./sysdep.h	350;"	d
soc_mess_list	./act.social.c	/^} *soc_mess_list;$/;"	v	typeref:struct:social_messg
social_messg	./act.social.c	/^struct social_messg {$/;"	s	file:
socket_t	./sysdep.h	/^  typedef SOCKET		socket_t;$/;"	t
solo_gain	./fight.c	/^void solo_gain(struct char_data *ch, struct char_data *victim)$/;"	f
sort_commands	./act.informative.c	/^void sort_commands(void)$/;"	f
sort_commands_helper	./act.informative.c	/^int sort_commands_helper(const void *a, const void *b)$/;"	f
sort_keeper_objs	./shop.c	/^void sort_keeper_objs(struct char_data *keeper, int shop_nr)$/;"	f
sort_spells	./spec_procs.c	/^void sort_spells(void)$/;"	f
spare0	./house.h	/^   long spare0;$/;"	m	struct:house_control_rec
spare0	./structs.h	/^   int	spare0;$/;"	m	struct:rent_info
spare0	./structs.h	/^   ubyte spare0;$/;"	m	struct:player_special_data_saved
spare1	./house.h	/^   long spare1;$/;"	m	struct:house_control_rec
spare1	./structs.h	/^   int	spare1;$/;"	m	struct:rent_info
spare1	./structs.h	/^   ubyte spare1;$/;"	m	struct:player_special_data_saved
spare10	./structs.h	/^   int spare10;$/;"	m	struct:player_special_data_saved
spare11	./structs.h	/^   int spare11;$/;"	m	struct:player_special_data_saved
spare12	./structs.h	/^   int spare12;$/;"	m	struct:player_special_data_saved
spare13	./structs.h	/^   int spare13;$/;"	m	struct:player_special_data_saved
spare14	./structs.h	/^   int spare14;$/;"	m	struct:player_special_data_saved
spare15	./structs.h	/^   int spare15;$/;"	m	struct:player_special_data_saved
spare16	./structs.h	/^   int spare16;$/;"	m	struct:player_special_data_saved
spare17	./structs.h	/^   long	spare17;$/;"	m	struct:player_special_data_saved
spare18	./structs.h	/^   long	spare18;$/;"	m	struct:player_special_data_saved
spare19	./structs.h	/^   long	spare19;$/;"	m	struct:player_special_data_saved
spare2	./house.h	/^   long spare2;$/;"	m	struct:house_control_rec
spare2	./structs.h	/^   int	spare2;$/;"	m	struct:rent_info
spare2	./structs.h	/^   ubyte spare2;$/;"	m	struct:player_special_data_saved
spare20	./structs.h	/^   long	spare20;$/;"	m	struct:player_special_data_saved
spare21	./structs.h	/^   long	spare21;$/;"	m	struct:player_special_data_saved
spare3	./house.h	/^   long spare3;$/;"	m	struct:house_control_rec
spare3	./structs.h	/^   int	spare3;$/;"	m	struct:rent_info
spare3	./structs.h	/^   ubyte spare3;$/;"	m	struct:player_special_data_saved
spare4	./house.h	/^   long spare4;$/;"	m	struct:house_control_rec
spare4	./structs.h	/^   int	spare4;$/;"	m	struct:rent_info
spare4	./structs.h	/^   ubyte spare4;$/;"	m	struct:player_special_data_saved
spare5	./house.h	/^   long spare5;$/;"	m	struct:house_control_rec
spare5	./structs.h	/^   int	spare5;$/;"	m	struct:rent_info
spare5	./structs.h	/^   ubyte spare5;$/;"	m	struct:player_special_data_saved
spare6	./house.h	/^   long spare6;$/;"	m	struct:house_control_rec
spare6	./structs.h	/^   int	spare6;$/;"	m	struct:rent_info
spare7	./house.h	/^   long spare7;$/;"	m	struct:house_control_rec
spare7	./structs.h	/^   int	spare7;$/;"	m	struct:rent_info
spare7	./structs.h	/^   int spare7;$/;"	m	struct:player_special_data_saved
spare8	./structs.h	/^   int spare8;$/;"	m	struct:player_special_data_saved
spare9	./structs.h	/^   int spare9;$/;"	m	struct:player_special_data_saved
special	./interpreter.c	/^int special(struct char_data *ch, int cmd, char *arg)$/;"	f
spell_charm	./spells.h	/^ASPELL(spell_charm);$/;"	v
spell_create_water	./spells.h	/^ASPELL(spell_create_water);$/;"	v
spell_detect_poison	./spells.h	/^ASPELL(spell_detect_poison);$/;"	v
spell_enchant_weapon	./spells.h	/^ASPELL(spell_enchant_weapon);$/;"	v
spell_identify	./spells.h	/^ASPELL(spell_identify);$/;"	v
spell_info	./spell_parser.c	/^struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];$/;"	v	typeref:struct:spell_info_type
spell_info_type	./spells.h	/^struct spell_info_type {$/;"	s
spell_information	./spells.h	/^ASPELL(spell_information);$/;"	v
spell_level	./spell_parser.c	/^void spell_level(int spell, int chclass, int level)$/;"	f
spell_locate_object	./spells.h	/^ASPELL(spell_locate_object);$/;"	v
spell_recall	./spells.h	/^ASPELL(spell_recall);$/;"	v
spell_sort_info	./spec_procs.c	/^int spell_sort_info[MAX_SKILLS + 1];$/;"	v
spell_summon	./spells.h	/^ASPELL(spell_summon);$/;"	v
spell_teleport	./spells.h	/^ASPELL(spell_teleport);$/;"	v
spello	./spell_parser.c	/^void spello(int spl, const char *name, int max_mana, int min_mana,$/;"	f
spells_to_learn	./structs.h	/^   int spells_to_learn;		\/* How many can you learn yet this level*\/$/;"	m	struct:player_special_data_saved
sprintbit	./utils.c	/^size_t sprintbit(bitvector_t bitvector, const char *names[], char *result, size_t reslen)$/;"	f
sprinttype	./utils.c	/^size_t sprinttype(int type, const char *names[], char *result, size_t reslen)$/;"	f
stack_data	./shop.h	/^struct stack_data {$/;"	s
stop_fighting	./fight.c	/^void stop_fighting(struct char_data *ch)$/;"	f
stop_follower	./utils.c	/^void stop_follower(struct char_data *ch)$/;"	f
stop_snooping	./act.wizard.c	/^void stop_snooping(struct char_data *ch)$/;"	f
store_mail	./mail.c	/^void store_mail(long to, long from, char *message_pointer)$/;"	f
store_to_char	./db.c	/^void store_to_char(struct char_file_u *st, struct char_data *ch)$/;"	f
str	./structs.h	/^   char	**str;			\/* for the modify-str system		*\/$/;"	m	struct:descriptor_data
str	./structs.h	/^   sbyte str;$/;"	m	struct:char_ability_data
str_add	./structs.h	/^   sbyte str_add;      \/* 000 - 100 if strength 18             *\/$/;"	m	struct:char_ability_data
str_app	./constants.c	/^cpp_extern const struct str_app_type str_app[] = {$/;"	v	typeref:struct:str_app_type
str_app_type	./structs.h	/^struct str_app_type {$/;"	s
str_cmp	./sysdep.h	326;"	d
str_cmp	./utils.c	/^int str_cmp(const char *arg1, const char *arg2)$/;"	f
strdup	./utils.c	/^char *strdup(const char *source)$/;"	f
string_add	./modify.c	/^void string_add(struct descriptor_data *d, char *str)$/;"	f
string_fields	./modify.c	/^const char *string_fields[] =$/;"	v
string_write	./modify.c	/^void string_write(struct descriptor_data *d, char **writeto, size_t len, long mailto, void *data)$/;"	f
strlcpy	./utils.c	/^size_t strlcpy(char *dest, const char *source, size_t totalsize)$/;"	f
strn_cmp	./sysdep.h	333;"	d
strn_cmp	./utils.c	/^int strn_cmp(const char *arg1, const char *arg2, int n)$/;"	f
subcmd	./interpreter.h	/^   int	subcmd;$/;"	m	struct:command_info
sunlight	./structs.h	/^   int	sunlight;	\/* And how much sun. *\/$/;"	m	struct:weather_data
syllable	./spell_parser.c	/^struct syllable {$/;"	s	file:
syls	./spell_parser.c	/^struct syllable syls[] = {$/;"	v	typeref:struct:syllable
tail	./db.h	/^   struct reset_q_element *tail;$/;"	m	struct:reset_q_type	typeref:struct:reset_q_type::reset_q_element
tail	./structs.h	/^   struct txt_block *tail;$/;"	m	struct:txt_q	typeref:struct:txt_q::txt_block
talks	./structs.h	/^   bool talks[MAX_TONGUE];	\/* PC s Tongues 0 for NPC		*\/$/;"	m	struct:player_special_data_saved
targets	./spells.h	/^   int targets;         \/* See below for use with TAR_XXX  *\/$/;"	m	struct:spell_info_type
telcmds	./telnet.h	/^char *telcmds[] = {$/;"	v
telopts	./telnet.h	/^char *telopts[NTELOPTS+1] = {$/;"	v
temper1	./shop.h	/^   int	 temper1;		\/* How does keeper react if no money	*\/$/;"	m	struct:shop_data
text	./structs.h	/^   char	*text;$/;"	m	struct:txt_block
text_overflow	./comm.c	/^const char *text_overflow = "**OVERFLOW**\\r\\n";$/;"	v
thaco	./class.c	/^int thaco(int class_num, int level)$/;"	f
thief	./spec_assign.c	/^SPECIAL(thief);$/;"	v
thief	./spec_procs.c	/^SPECIAL(thief);$/;"	v
tics	./comm.c	/^int tics = 0;			\/* for extern checkpointing *\/$/;"	v
tim	./castle.c	/^SPECIAL(tim);$/;"	v
time	./structs.h	/^   int	time;$/;"	m	struct:rent_info
time	./structs.h	/^   struct time_data time;  \/* PC's AGE in days                 *\/$/;"	m	struct:char_player_data	typeref:struct:char_player_data::time_data
time_data	./structs.h	/^struct time_data {$/;"	s
time_info	./db.c	/^struct time_info_data time_info;\/* the infomation about the time    *\/$/;"	v	typeref:struct:time_info_data
time_info_data	./structs.h	/^struct time_info_data {$/;"	s
timeadd	./comm.c	/^void timeadd(struct timeval *rslt, struct timeval *a, struct timeval *b)$/;"	f
timediff	./comm.c	/^void timediff(struct timeval *rslt, struct timeval *a, struct timeval *b)$/;"	f
timer	./structs.h	/^   int	timer;			\/* Timer for update			*\/$/;"	m	struct:char_special_data
timer	./structs.h	/^   int	timer;		\/* Timer for object                 *\/$/;"	m	struct:obj_flag_data
timer	./structs.h	/^   int	timer;$/;"	m	struct:obj_file_elem
times_message	./shop.c	/^char *times_message(struct obj_data *obj, char *name, int num)$/;"	f
title	./structs.h	/^   char	*title;        \/* PC \/ NPC's title                     *\/$/;"	m	struct:char_player_data
title	./structs.h	/^   char	title[MAX_TITLE_LENGTH+1];$/;"	m	struct:char_file_u
title_female	./class.c	/^const char *title_female(int chclass, int level)$/;"	f
title_male	./class.c	/^const char *title_male(int chclass, int level)$/;"	f
to	./mail.h	/^   long to;			\/* idnum of mail's recipient		*\/$/;"	m	struct:header_data_type
to_room	./structs.h	/^   room_rnum to_room;		\/* Where direction leads (NOWHERE)	*\/$/;"	m	struct:room_direction_data
todam	./structs.h	/^   sh_int todam;    \/* Damage Bonus\/Penalty                *\/$/;"	m	struct:str_app_type
tohit	./structs.h	/^   sh_int tohit;    \/* To Hit (THAC0) Bonus\/Penalty        *\/$/;"	m	struct:str_app_type
tom	./castle.c	/^SPECIAL(tom);$/;"	v
top	./db.h	/^   room_vnum top;           \/* upper limit for rooms in this zone *\/$/;"	m	struct:zone_data
top	./shop.c	/^int top(struct stack_data *stack)$/;"	f
top_idnum	./db.c	/^long top_idnum = 0;		\/* highest idnum in use		 *\/$/;"	v
top_of_helpt	./db.c	/^int top_of_helpt = 0;		\/* top of help index table	 *\/$/;"	v
top_of_mobt	./db.c	/^mob_rnum top_of_mobt = 0;	\/* top of mobile index table	 *\/$/;"	v
top_of_objt	./db.c	/^obj_rnum top_of_objt = 0;	\/* top of object index table	 *\/$/;"	v
top_of_p_table	./db.c	/^int top_of_p_table = 0;		\/* ref to top of table		 *\/$/;"	v
top_of_world	./db.c	/^room_rnum top_of_world = 0;	\/* ref to top element of world	 *\/$/;"	v
top_of_zone_table	./db.c	/^zone_rnum top_of_zone_table = 0;\/* top element of zone tab	 *\/$/;"	v
top_shop	./shop.c	/^int top_shop = -1;$/;"	v
touch	./utils.c	/^int touch(const char *path)$/;"	f
track_through_doors	./config.c	/^int track_through_doors = YES;$/;"	v
trade_letters	./shop.c	/^const char *trade_letters[] = {$/;"	v
trade_with	./shop.c	/^int trade_with(struct obj_data *item, int shop_nr)$/;"	f
training_master	./castle.c	/^SPECIAL(training_master);$/;"	v
transaction_amt	./shop.c	/^int transaction_amt(char *arg)$/;"	f
traps	./structs.h	/^   sh_int traps;$/;"	m	struct:dex_skill_type
tunnel_size	./config.c	/^int tunnel_size = 2;$/;"	v
two_arguments	./interpreter.c	/^char *two_arguments(char *argument, char *first_arg, char *second_arg)$/;"	f
txt	./mail.h	/^   char	txt[DATA_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:data_block_type_d
txt	./mail.h	/^   char	txt[HEADER_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:header_block_type_d
txt_block	./structs.h	/^struct txt_block {$/;"	s
txt_q	./structs.h	/^struct txt_q {$/;"	s
type	./act.wizard.c	/^    const char type;$/;"	m	struct:set_struct	file:
type	./db.h	/^   int	type;$/;"	m	struct:ban_list_element
type	./interpreter.h	/^  int type;$/;"	m	struct:alias_data
type	./shop.h	/^   int type;$/;"	m	struct:shop_buy_data
type	./shop.h	/^   struct shop_buy_data *type;	\/* Which items to trade			*\/$/;"	m	struct:shop_data	typeref:struct:shop_data::shop_buy_data
type	./structs.h	/^   sh_int type;          \/* The type of spell that caused this      *\/$/;"	m	struct:affected_type
type_flag	./structs.h	/^   byte type_flag;	\/* Type of item			    *\/$/;"	m	struct:obj_flag_data
ubyte	./structs.h	/^typedef unsigned char		ubyte;$/;"	t
unequip_char	./handler.c	/^struct obj_data *unequip_char(struct char_data *ch, int pos)$/;"	f
unrestrict_game	./comm.c	/^RETSIGTYPE unrestrict_game(int sig)$/;"	f
unused_spell	./spell_parser.c	/^void unused_spell(int spl)$/;"	f
unused_spellname	./spell_parser.c	/^const char *unused_spellname = "!UNUSED!"; \/* So we can get &unused_spellname *\/$/;"	v
update_char_objects	./handler.c	/^void update_char_objects(struct char_data *ch)$/;"	f
update_obj_file	./objsave.c	/^void update_obj_file(void)$/;"	f
update_object	./handler.c	/^void update_object(struct obj_data *obj, int use)$/;"	f
update_pos	./fight.c	/^void update_pos(struct char_data *victim)$/;"	f
use_autowiz	./config.c	/^int use_autowiz = YES;$/;"	v
ush_int	./structs.h	/^typedef unsigned short int	ush_int;$/;"	t
value	./structs.h	/^   int	value[4];	\/* Values of the item (see list)    *\/$/;"	m	struct:obj_flag_data
value	./structs.h	/^   int	value[4];$/;"	m	struct:obj_file_elem
vict_found	./act.social.c	/^  char *vict_found;$/;"	m	struct:social_messg	file:
victim_msg	./structs.h	/^   char	*victim_msg;    \/* message to victim   *\/$/;"	m	struct:msg_type
violent	./spells.h	/^   byte violent;$/;"	m	struct:spell_info_type
vnum	./boards.h	/^   obj_vnum vnum;	\/* vnum of this board *\/$/;"	m	struct:board_info_type
vnum	./house.h	/^   room_vnum vnum;		\/* vnum of this house		*\/$/;"	m	struct:house_control_rec
vnum	./shop.h	/^   room_vnum vnum;		\/* Virtual number of this shop		*\/$/;"	m	struct:shop_data
vnum	./structs.h	/^   mob_vnum	vnum;	\/* virtual number of this mob\/obj		*\/$/;"	m	struct:index_data
vnum_mobile	./db.c	/^int vnum_mobile(char *searchname, struct char_data *ch)$/;"	f
vnum_object	./db.c	/^int vnum_object(char *searchname, struct char_data *ch)$/;"	f
vsnprintf	./bsd-snprintf.c	/^vsnprintf(char *str, size_t count, const char *fmt, va_list args)$/;"	f
vsnprintf	./sysdep.h	351;"	d
vwrite_to_output	./comm.c	/^size_t vwrite_to_output(struct descriptor_data *t, const char *format, va_list args)$/;"	f
wait	./structs.h	/^   int wait;				 \/* wait for how many loops	  *\/$/;"	m	struct:char_data
was_in_room	./structs.h	/^   room_rnum was_in_room;		 \/* location for linkdead people  *\/$/;"	m	struct:char_data
wear_bits	./constants.c	/^const char *wear_bits[] = {$/;"	v
wear_bits_count	./constants.c	/^	wear_bits_count = sizeof(wear_bits) \/ sizeof(wear_bits[0]) - 1;$/;"	v
wear_flags	./structs.h	/^   int \/*bitvector_t*\/	wear_flags;	\/* Where you can wear it	    *\/$/;"	m	struct:obj_flag_data
wear_message	./act.item.c	/^void wear_message(struct char_data *ch, struct obj_data *obj, int where)$/;"	f
wear_off_msg	./spells.h	/^   const char *wear_off_msg;	\/* Input size not limited. Originates from string constants. *\/$/;"	m	struct:spell_info_type
wear_where	./constants.c	/^const char *wear_where[] = {$/;"	v
weather_and_time	./weather.c	/^void weather_and_time(int mode)$/;"	f
weather_change	./weather.c	/^void weather_change(void)$/;"	f
weather_data	./structs.h	/^struct weather_data {$/;"	s
weather_info	./db.c	/^struct weather_data weather_info;	\/* the infomation about the weather *\/$/;"	v	typeref:struct:weather_data
weekdays	./constants.c	/^const char *weekdays[] = {$/;"	v
weight	./structs.h	/^   int	weight;		\/* Weigt what else                  *\/$/;"	m	struct:obj_flag_data
weight	./structs.h	/^   int	weight;$/;"	m	struct:obj_file_elem
weight	./structs.h	/^   ubyte weight;       \/* PC \/ NPC's weight                    *\/$/;"	m	struct:char_player_data
weight	./structs.h	/^   ubyte weight;$/;"	m	struct:char_file_u
weight_change_object	./act.item.c	/^void weight_change_object(struct obj_data *obj, int weight)$/;"	f
wield_w	./structs.h	/^   sh_int wield_w;  \/* Maximum weight that can be wielded  *\/$/;"	m	struct:str_app_type
wimp_level	./structs.h	/^   int	wimp_level;		\/* Below this # of hit points, flee!	*\/$/;"	m	struct:player_special_data_saved
wis	./structs.h	/^   sbyte wis;$/;"	m	struct:char_ability_data
wis_app	./constants.c	/^cpp_extern const struct wis_app_type wis_app[] = {$/;"	v	typeref:struct:wis_app_type
wis_app_type	./structs.h	/^struct wis_app_type {$/;"	s
with_who	./shop.h	/^   int	 with_who;		\/* Who does the shop trade with?	*\/$/;"	m	struct:shop_data
wizlist	./db.c	/^char *wizlist = NULL;		\/* list of higher gods		 *\/$/;"	v
world	./db.c	/^struct room_data *world = NULL;	\/* array of rooms		 *\/$/;"	v	typeref:struct:room_data
worn_by	./structs.h	/^   struct char_data *worn_by;	  \/* Worn by?			      *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::char_data
worn_on	./structs.h	/^   sh_int worn_on;		  \/* Worn where?		      *\/$/;"	m	struct:obj_data
write	./comm.c	1531;"	d	file:
write_aliases	./alias.c	/^void write_aliases(struct char_data *ch)$/;"	f
write_ban_list	./ban.c	/^void write_ban_list(void)$/;"	f
write_lvl	./boards.h	/^   int	write_lvl;	\/* min level to write messages on this board *\/$/;"	m	struct:board_info_type
write_to_descriptor	./comm.c	/^int write_to_descriptor(socket_t desc, const char *txt)$/;"	f
write_to_file	./mail.c	/^void write_to_file(void *buf, int size, long filepos)$/;"	f
write_to_output	./comm.c	/^size_t write_to_output(struct descriptor_data *t, const char *txt, ...)$/;"	f
write_to_q	./comm.c	/^void write_to_q(const char *txt, struct txt_q *queue, int aliased)$/;"	f
xEOF	./telnet.h	61;"	d
year	./structs.h	/^   sh_int year;$/;"	m	struct:time_info_data
zone	./structs.h	/^   zone_rnum zone;              \/* Room zone (for resetting)          *\/$/;"	m	struct:room_data
zone_data	./db.h	/^struct zone_data {$/;"	s
zone_rnum	./structs.h	/^typedef IDXTYPE zone_rnum;$/;"	t
zone_table	./db.c	/^struct zone_data *zone_table;	\/* zone table			 *\/$/;"	v	typeref:struct:zone_data
zone_to_reset	./db.h	/^   zone_rnum zone_to_reset;            \/* ref to zone_data *\/$/;"	m	struct:reset_q_element
zone_update	./db.c	/^void zone_update(void)$/;"	f
zone_vnum	./structs.h	/^typedef IDXTYPE zone_vnum;$/;"	t
